%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: black_2x4.ai
%%Creator: Adobe Graphics Manager
%%For: Piotr Mardziel
%%CreationDate: 2/6/14
%%BoundingBox: 3 3 213 357
%%HiResBoundingBox: 3 3 213 357
%%CropBox: 36 36 180 324
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%TargetDevice: (HP LaserJet 500 color M551) (3010.107) 3
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_OnHost_Seps 1.0 0
%%Copyright: Copyright(C)1997-2006 Adobe Systems, Inc. All Rights Reserved.
%%Version: 1.0 0
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_OnHost_Seps 149 dict dup begin put
/ds{
	Adobe_AGM_OnHost_Seps begin
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	0 1 AGMOHS_gstack length 1 sub{
			AGMOHS_gstack exch AGMOHS_gstackframekeys dict put
	}for
	false setoverprint
	false setinkoverprint
	[/DeviceGray]set_colorspace
	false setregistration
	1 settint
	()setspotcolorant
	/AGMOHS_have_reported_unsupported_color_space false def
	/current_image_decode[]def
	level2 
	{
		currentpagedevice/Separations known
		{
			currentpagedevice/Separations get
			{
				<<
				/Separations false
				/ProcessColorModel/DeviceGray
				/SeparationColorNames[]
				/SeparationOrder[]
				/Policies<</PolicyNotFound 1>>
				>>setpagedevice
			}if
		}if
	}if
	end
}def
/pt{end}def
/dt{}def
/AGMOHS_inkdict nd
/AGMOHS_sepink nd
/AGMOHS_sep_plate nd
/AGMOHS_sepMX matrix def
/AGMOHS_isDCS? false def
/AGMOHS_isDCSComposite? false def
/AGMOHS_pattern nd
/AGMOHS_gstack 32 array def
/AGMOHS_gstackptr 0 def
/AGMOHS_gstacksaveptr 0 def
/AGMOHS_gstackframekeys 6 def
/AGMOHS_image_dict 9 dict def
/AGMOHS_colorspace_error
{
	/Adobe_AGM_Core where
		{
		pop
		Adobe_AGM_Core/AGMCORE_cur_err/AGMCORE_color_space_onhost_seps put
		AGMCORE_color_space_onhost_seps
		}if
}def
/AGMOHS_report_unsupported_color_space
{
	AGMOHS_have_reported_unsupported_color_space false eq
	{
		(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
		Adobe_AGM_OnHost_Seps/AGMOHS_have_reported_unsupported_color_space true ddf
	}if
}def
/AGMOHS_&gsave/gsave ldf
/AGMOHS_&grestore/grestore ldf
/AGMOHS_&grestoreall/grestoreall ldf
/AGMOHS_&save/save ldf
/AGMOHS_&setgray/setgray ldf
/AGMOHS_&sethsbcolor/sethsbcolor ldf
/AGMOHS_&setrgbcolor/setrgbcolor ldf
/AGMOHS_&setcolor level2{/setcolor ldf}{/AGMOHS_colorspace_error ldf}ifelse
/AGMOHS_&setcolorspace level2{/setcolorspace ldf}{/AGMOHS_colorspace_error ldf}ifelse
/AGMOHS_&image[
	/dup cvx/type cvx/dicttype/eq cvx[
		/begin cvx/AGMIMG_init_common cvx/currentdict cvx/end cvx
	]cvx/if cvx
	/image load dup type/operatortype eq not{/exec cvx}if
]cvx def
/colorimage{AGMOHS_&image}ndf
/AGMOHS_&colorimage/colorimage ldf
/AGMOHS_&imagemask/imagemask ldf
/AGMOHS_&stroke/stroke ldf
/AGMOHS_&fill/fill ldf
/AGMOHS_&eofill/eofill ldf
/AGMOHS_&show/show ldf
/AGMOHS_&ashow/ashow ldf
/AGMOHS_&widthshow/widthshow ldf
/AGMOHS_&awidthshow/awidthshow ldf
/AGMOHS_&kshow/kshow ldf
level2{
	/AGMOHS_&ustroke/ustroke ldf
	/AGMOHS_&ufill/ufill ldf
	/AGMOHS_&ueofill/ueofill ldf
	/AGMOHS_&rectstroke/rectstroke ldf
	/AGMOHS_&rectfill/rectfill ldf
	/AGMOHS_&xshow/xshow ldf
	/AGMOHS_&yshow/yshow ldf
	/AGMOHS_&xyshow/xyshow ldf
	/AGMOHS_&glyphshow/glyphshow ldf
	/AGMOHS_&cshow/cshow ldf
}if
/gsave nd
/grestore nd
/grestoreall nd
/save nd
/setgray nd
/setcmykcolor{4{pop}repeat}def
/setcolor nd
/setcolorspace nd
/setpattern nd
/image nd
/imagemask nd
/colorimage nd
/setoverprint nd
/currentoverprint nd
/setrgbcolor nd
/sethsbcolor nd
/setrgbcolor nd
/ufill nd
/ueofill nd
/rectstroke nd
/rectfill nd
/stroke nd
/fill nd
/eofill nd
/show nd
/ashow nd
/widthshow nd
/awidthshow nd
/kshow nd
/xshow nd
/yshow nd
/xyshow nd
/glyphshow nd
/cshow nd
/makeinkdict
{
	dict Adobe_AGM_OnHost_Seps/AGMOHS_inkdict xddf
}def
/addink
{
	3 dict begin
	/op_thold xdf
	/op xdf
	map_reserved_ink_name
	dup/name xdf
	currentdict end
	AGMOHS_inkdict begin def end
}def
/plate_setup
{
	Adobe_AGM_OnHost_Seps begin
	dup/AGMOHS_sep_plate xdf
	load exec
	map_reserved_ink_name
	/AGMOHS_sepink xdf
	/AGMOHS_get_ink_data
		AGMOHS_sep_plate/c eq{
			{pop pop pop}
		}{
			AGMOHS_sep_plate/m eq{
				{4 3 roll pop pop pop}
			}{
				AGMOHS_sep_plate/y eq{
			 		{4 2 roll pop pop pop}
				}{
			 		{4 1 roll pop pop pop}
				}ifelse
			}ifelse
		}ifelse
	def
}def
level2{
	/AGMOHS_&image_L2/AGMOHS_&image ldf
	/AGMOHS_invert_image_samples
	{
		Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
		/Decode[Decode 1 get Decode 0 get]def
	}def
	/AGMOHS_knockout_image_samples
	{
		/Decode[1 1]def
	}def
}{
	/AGMOHS_&image_L2
	{
		begin
		Width Height BitsPerComponent ImageMatrix/DataSource load 
		AGMOHS_&image
		end
	}def
	/AGMOHS_invert_image_samples
	{
		{1 exch sub}currenttransfer addprocs settransfer
	}def
	/AGMOHS_knockout_image_samples
	{
		{pop 1}currenttransfer addprocs settransfer
	}def
}ifelse
/setcmybcolor
{
	setcmykcolor
}def
/setcmykcoloroverprint
{pop pop pop pop}def
/findcmykcustomcolor
{5 makereadonlyarray}def
/setcolorspace
{	
	dup set_colorspace
	currentcolorspace 0 get/Separation eq
		{
		currentcolorspace 1 get
		}
		{
		()
		}ifelse
		setspotcolorant
	AGMOHS_&setcolorspace
}def
/AGMOHS_mapL2and3colorspace
{
	dup 0 get/DeviceCMYK eq
		{
		5 1 roll setcmykcolor
		}
		{
		dup 0 get/DeviceGray eq
			{
			exch 1 exch sub 0 0 0 4 -1 roll
			setcmykcolor
			}
			{
			dup 0 get/DeviceRGB eq
				{
				4 1 roll setrgbcolor
				}
				{
				dup 0 get/Separation eq
					{
					dup 1 get
					dup type/stringtype eq{
						cvn
					}if
					dup/Cyan eq
						{
						3 -1 roll 0 0 0 setcmykcolor
						pop
						}
						{
						dup/Magenta eq
							{
							0 4 -1 roll 0 0 setcmykcolor
							pop
							}
							{
							dup/Yellow eq
								{
								0 0 5 -1 roll 0 setcmykcolor
								pop
								}
								{
								dup/Black eq
									{
									0 0 0 6 -1 roll setcmykcolor
									pop
									}
									{
									dup/All eq
										{
										3 -1 roll 1 exch sub setseparationgray
										pop
										}
										{
										1 index 2 get base_colorspace_type/DeviceCMYK eq
											{
											2 index 2 index 3 get
											exec
												}
												{
												0 0 0 5 index
											}ifelse
											5 -1 roll dup length string cvs
										findcmykcustomcolor
										3 2 roll setcustomcolor
										}ifelse
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}
					{
					dup 0 get/DeviceN eq
						{
						3 dict begin
						/devncolorspace exch def
						/painted? false def
						/names_index 0 def
						devncolorspace 1 get
							{
							dup AGMOHS_onmask?
								{
								0 0 0 0 5 -1 roll findcmykcustomcolor
								devncolorspace 1 get length names_index sub index setcustomcolor
								devncolorspace 1 get length{pop}repeat
								/painted? true def
								exit
								}
								{
								pop
								}ifelse
							/names_index names_index 1 add def
							}forall
						painted? not
							{
							devncolorspace 1 get length{pop}repeat
							0 0 0 0()findcmykcustomcolor 0 setcustomcolor
							}if
						end
						}
						{
						AGMOHS_report_unsupported_color_space
						AGMOHS_&setcolorspace
						AGMOHS_&setcolor
						AGMOHS_sep_plate/k ne
							{
							0 0 0 0 setcmykcolor
							}if
						}ifelse
						currentcolorspace
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	pop
}def
/setcolor
{
	current_colorspace
	dup 0 get/Pattern eq
		{
		1 index/PatternType get 2 eq
			{
			pop
			}{
			1 index/PaintType get 2 eq 2 index/EmittedGSCS known not and
				{
				exch Adobe_AGM_OnHost_Seps exch/AGMOHS_pattern xpt
				1 get base_colorspace_type 1 array dup 0 4 -1 roll put AGMOHS_mapL2and3colorspace
				currentgray[/Pattern/DeviceGray]AGMOHS_&setcolorspace
				AGMOHS_pattern
				}{
				pop
				}ifelse
			}ifelse
		AGMOHS_&setcolor
		}
		{
		dup 0 get/Indexed eq
			{
			dup 1 get AGMOHS_&setcolorspace
			dup 3 get type/stringtype eq
				{
				3 get exch
				currentcolorspace 0 get dup dup/DeviceGray eq 3 1 roll/CIEBasedA eq
				exch/Separation eq or or
					{
					1
					}{
					currentcolorspace 0 get dup dup/DeviceRGB eq 3 1 roll/CIEBasedABC eq
					exch/CIEBasedDEF eq or or
						{
						3
						}{
						currentcolorspace 0 get dup/DeviceCMYK eq exch/CIEBasedDEFG eq or
							{
							4
							}{
							currentcolorspace 1 get length
							}ifelse
						}ifelse
					}ifelse
				Adobe_AGM_OnHost_Seps/AGMOHS_ncomps xddf
				AGMOHS_ncomps mul AGMOHS_ncomps getinterval{}forall
				AGMOHS_ncomps{
					0.0 1.0 map255_to_range
					AGMOHS_ncomps 1 roll
				}repeat
				}{
				3 gx
				}ifelse
			currentcolorspace
			}if
		AGMOHS_mapL2and3colorspace
		}ifelse
}def
/setpattern
{
	currentcolorspace 0 get/Pattern ne
		{
		current_colorspace 0 get/Pattern eq
			{current_colorspace}
			{[/Pattern currentcolorspace]}ifelse
			AGMOHS_&setcolorspace
		}if
	currentcolorspace set_colorspace
	setcolor
}def
/setgray
{	
	false setinkoverprint
	AGMOHS_isDCS?
	{
		AGMOHS_&setgray
	}{
		1 exch sub 0 0 0 4 -1 roll
		setcmykcolor
	}
	ifelse
	false setregistration
	1 settint
	()setspotcolorant
}def
/AGMOHS_toprocess?
{
	map_reserved_ink_name
	dup/All eq
	{
		pop false
	}{
		AGMOHS_inkdict exch known not
	}
	ifelse
}def
/AGMOHS_onmask?
{
	map_reserved_ink_name
	dup AGMOHS_sepink eq exch/All eq or
}def
/AGMOHS_pure?
{
	aload pop 0 ne exch 0 ne 3 -1 roll 0 ne 4 -1 roll 0 ne 0 5 1 roll
	3 -1 0
	{
		exch true eq
		{
			dup 0 gt
			{
				2 add dup -1 roll 1 add exch 1 sub 1 roll
			}{
				pop 1 add
			}ifelse
		}{
			pop
		}ifelse
	}for
	1 eq
}def
/AGMOHS_overprintprocess
{
	false setinkoverprint
	dup AGMOHS_pure?
	{
		aload pop mark 5 1 roll
		0 1 3
		{
			exch dup 0 ne
			{
				settint
				dup 0 eq
				{
					pop(Black)
				}{
					dup 1 eq
					{
						pop(Yellow)
					}{
						dup 2 eq
						{
							pop(Magenta)
						}{
							pop(Cyan)
						}ifelse
					}ifelse
				}ifelse
				AGMOHS_inkoverprint?
				{
					true setinkoverprint exit
				}if
			}{
				pop pop
			}ifelse	
		}for
		cleartomark
	}{
	pop
	}ifelse
}def
/AGMOHS_inkoverprint?
{
	AGMUTIL_str256 copy
	length Adobe_AGM_Utils/AGMUTIL_srcLen xddf
	false
	AGMOHS_inkdict
	{
		begin
		pop
		name AGMUTIL_str256 0 AGMUTIL_srcLen getinterval eq
		{
			pop
			op currenttint op_thold ge and
			end exit
		}if
		end
	}forall
}def
/AGMOHS_generateKOImage
{
	<<
		/ImageType 1
		/Width 1
		/Height 1
		/ImageMatrix[1 0 0 -1 0 1]
		/DataSource<00>
		/BitsPerComponent 8
		/Decode[1 0]
	>>
	AGMOHS_&image
}def
/setcustomcolor
{
	dup settint 
	exch aload 4 get setspotcolorant
	dup AGMOHS_toprocess?
		{
			pop
			4
				{4 index mul 4 1 roll}
			repeat 
			setcmykcolor
			pop
		}{		 
			dup AGMOHS_inkoverprint? setinkoverprint
			5 1 roll
			4
				{pop}
			repeat 
			AGMOHS_onmask?
				{1 exch sub AGMOHS_&setgray}
				{pop 1 AGMOHS_&setgray}
			ifelse
		}
	ifelse
	false setregistration
}def
/setseparationgray
{AGMOHS_&setgray true setregistration}def
/setregistration
{/current_registration exch AGMOHS_gput}def
/currentregistration
{/current_registration AGMOHS_gget}def
/setoverprint
{/current_overprint exch AGMOHS_gput}def
/currentoverprint
{/current_overprint AGMOHS_gget}def
/setinkoverprint
{/current_ink_overprint exch AGMOHS_gput}def
/currentinkoverprint
{/current_ink_overprint AGMOHS_gget}def
/settint
{/current_tint exch AGMOHS_gput}def
/currenttint
{/current_tint AGMOHS_gget}def
/setspotcolorant
{/current_spot_colorant exch AGMOHS_gput}def
/currentspotcolorant
{/current_spot_colorant AGMOHS_gget}def
/set_colorspace
{
	dup type dup/arraytype eq exch/packedarraytype eq or not{
		[exch]
	}if
	/current_colorspace exch AGMOHS_gput
}def
/current_colorspace
{/current_colorspace AGMOHS_gget}def
/AGMOHS_paint?
{
	Adobe_AGM_OnHost_Seps begin
		currentoverprint currentinkoverprint or not
		currentgray 1 ne or
		currentregistration or
		currentspotcolorant AGMOHS_sepink eq or
	end
}def
/setrgbcolor
{
	AGMOHS_sep_plate/k ne
		{3{pop}repeat 1 1 1}if
	AGMOHS_&setrgbcolor
	AGMOHS_report_unsupported_color_space
	false setregistration
	1 settint
	()setspotcolorant
}def
/sethsbcolor
{
	AGMOHS_&sethsbcolor currentrgbcolor setrgbcolor
	false setregistration
	1 settint
}def
/stroke
{
	AGMOHS_paint?
		{AGMOHS_&stroke}
		{newpath}
	ifelse
}def
/fill
{
	AGMOHS_paint?
		{AGMOHS_&fill}
		{newpath}
	ifelse
}def
/eofill
{
	AGMOHS_paint?
		{AGMOHS_&eofill}
		{newpath}
	ifelse
}def
/show
{
	AGMOHS_paint?
		{AGMOHS_&show}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&show currentpoint grestore moveto}
	ifelse
}def
/ashow
{
	AGMOHS_paint?
		{AGMOHS_&ashow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&ashow currentpoint grestore moveto}
	ifelse
}def
/widthshow
{
	AGMOHS_paint?
		{AGMOHS_&widthshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&widthshow currentpoint grestore moveto}
	ifelse
}def
/awidthshow
{
	AGMOHS_paint?
		{AGMOHS_&awidthshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&awidthshow currentpoint grestore moveto}
	ifelse
}def
/kshow
{
	AGMOHS_paint?
		{AGMOHS_&kshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&kshow currentpoint grestore moveto}
	ifelse
}def
level2{
	/ustroke{
		AGMOHS_paint?
			{AGMOHS_&ustroke}
			{
			gsave nulldevice AGMOHS_&ustroke grestore
			}
		ifelse
	}def
	/ufill{
		AGMOHS_paint?
			{AGMOHS_&ufill}
			{pop}
		ifelse
	}def
	/ueofill{
		AGMOHS_paint?
			{AGMOHS_&ueofill}
			{pop}
		ifelse
	}def
	/rectstroke{
		AGMOHS_paint?
			{AGMOHS_&rectstroke}
			{
			gsave nulldevice AGMOHS_&rectstroke grestore
			}
		ifelse
	}def
	/rectfill{
		AGMOHS_paint?
			{AGMOHS_&rectfill}
			{
			gsave nulldevice AGMOHS_&rectfill grestore
			}
		ifelse
	}def
	/xshow
	{
		AGMOHS_paint?
			{AGMOHS_&xshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&xshow currentpoint grestore moveto}
		ifelse
	}def
	/yshow
	{
		AGMOHS_paint?
			{AGMOHS_&yshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&yshow currentpoint grestore moveto}
		ifelse
	}def
	/xyshow
	{
		AGMOHS_paint?
			{AGMOHS_&xyshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&xyshow currentpoint grestore moveto}
		ifelse
	}def
	/glyphshow
	{
		AGMOHS_paint?
			{AGMOHS_&glyphshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&glyphshow currentpoint grestore moveto}
		ifelse
	}def
	/cshow
	{
		AGMOHS_paint?
			{AGMOHS_&cshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&cshow currentpoint grestore moveto}
		ifelse
	}def
}if
/separationimage
{
	AGMOHS_&image
}def 
/imagemask
{
	AGMOHS_isDCS?
	{
		AGMOHS_&imagemask
	}
	{
		AGMOHS_paint?
			{AGMOHS_&imagemask}
			{gsave nulldevice AGMOHS_&imagemask grestore}
		ifelse
	}
	ifelse
}def
/image
{
	AGMOHS_isDCS?{
		AGMOHS_&image
	}{
		dup type/dicttype eq{
			current_colorspace 0 get/Separation eq{
				current_colorspace 2 get base_colorspace_type
				/DeviceCMYK eq{
					begin
					ImageType 1 eq
					currentdict/MultipleDataSources known
						{MultipleDataSources not}{true}ifelse
					and
					currentdict end exch
				}{
					false
				}ifelse
			}{
				current_colorspace 0 get/DeviceN eq{
					current_colorspace 2 get base_colorspace_type
					dup/DeviceCMYK eq exch dup/DeviceRGB eq exch/DeviceGray eq or or{
						begin
						ImageType 1 eq
						currentdict end exch
					}{
						false
					}ifelse
				}{
					false
				}ifelse
			}ifelse
			current_colorspace 0 get
			dup/DeviceGray eq exch
			dup/DeviceRGB eq exch
			dup/DeviceCMYK eq exch
			dup/Pattern eq exch
			dup/DeviceN eq exch
			/Indexed eq
				{
				current_colorspace 1 get base_colorspace_type dup/DeviceCMYK eq exch/DeviceN eq or
				}
				{false}
				ifelse
			or or or or or or
		}{
			true
		}ifelse
		not{
			AGMOHS_report_unsupported_color_space
			AGMOHS_sep_plate/k ne
			{
			dup type/dicttype eq
				{
				dup
				ignoreimagedata
				AGMCORE_distilling
					{
						gsave
						/DeviceGray setcolorspace
						begin
						/Height 1 def
						/Width 1 def
						/DataSource( )def
						/MultipleDataSources false def
						currentdict end
						AGMOHS_&image
						grestore
					}{
					pop
					}ifelse
				}{
				nulldevice image
				}ifelse
			}{
				AGMOHS_&image
			}ifelse
		}{
			gsave
			dup type/dicttype ne{
				AGMOHS_image_dict begin
					/ImageType 1 def
					/Decode[0 1]def
					/DataSource xdf
					/ImageMatrix xdf
					/BitsPerComponent xdf
					/Height xdf
					/Width xdf
					/MultipleDataSources false def
					/DeviceGray
			}{
				begin
				current_colorspace 0 get
			}ifelse
			dup/DeviceN eq{
				pop
				<<
					/Names current_colorspace 1 get
					/CSA current_colorspace 2 get base_colorspace_type get_csa_by_name
					/TintProc null
					/TintTransform current_colorspace 3 get
				>>setdevicencolorspace
				<<
					/Width Width
					/Height Height
					/BitsPerComponent BitsPerComponent
					/ImageMatrix ImageMatrix
					/Decode Decode
					/MultipleDataSources currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
					/DataSource DataSource
					/Operator/image
					/NComponents current_colorspace 1 get length
					/ImageType ImageType
				>>devn_imageormask
			}{
				dup/Separation eq{
					pop
					Adobe_AGM_OnHost_Seps/current_image_decode Decode ddf
					Width Height BitsPerComponent ImageMatrix DataSource
					1 current_colorspace 3 gx current_colorspace 1 get findcmykcustomcolor
					1 setcolor
					customcolorimage
					Adobe_AGM_OnHost_Seps/current_image_decode[]ddf
				}{
					dup/DeviceGray eq{
						pop
						AGMOHS_sep_plate/k ne AGMOHS_isDCSComposite? or{
							currentdict ignoreimagedata
						}{
							0 AGMOHS_&setgray	
							currentdict AGMOHS_&image_L2
						}ifelse
					}{
						dup/DeviceRGB eq{pop
							Width Height BitsPerComponent ImageMatrix
							currentdict/MultipleDataSources known{
								MultipleDataSources{
									DataSource 0 get DataSource 1 get DataSource 2 get true
								}{
									/DataSource load false
								}ifelse
							}{
								/DataSource load false
							}ifelse
							3 colorimage
						}{
							dup/DeviceCMYK eq{
								pop
								Width Height BitsPerComponent ImageMatrix
								currentdict/MultipleDataSources known{
									MultipleDataSources{
										DataSource 0 get DataSource 1 get DataSource 2 get DataSource 3 get true
									}{
										/DataSource load false
									}ifelse
								}{
									/DataSource load false
								}ifelse
								4 colorimage
							}{
								dup/Indexed eq{
									pop
									currentcolorspace 1 get 
									base_colorspace_type
									dup/DeviceCMYK eq
									AGMCORE_plate_ndx 4 lt and
									{
										pop
										2 dict begin
										/GrayTable currentcolorspace 2 get 1 add string def
										/CMYKTable currentcolorspace 3 get def
										AGMCORE_plate_ndx 4 CMYKTable length 1 sub
										{
											GrayTable exch dup 4 idiv exch CMYKTable exch get 255 exch sub put
										}for
										[
											/Indexed 
											[/DeviceGray]
											currentcolorspace 2 get
											GrayTable
										]
										setcolorspace
										end
										currentdict AGMOHS_&image_L2
									}{
										pop
										5 dict begin
										/DevNIndex -1 def
										/DevNCand -1 def
										currentcolorspace 1 get 1 get
										dup/DevNCompCnt exch length def
										{
											/DevNCand DevNCand 1 add def
											AGMOHS_sepink eq{/DevNIndex DevNCand def exit}if
										}forall
										DevNIndex -1 eq{
											end
											currentdict
											gsave
											nulldevice AGMOHS_&image
											grestore
											knockout_unitsq
										}{
											/GrayTable currentcolorspace 2 get 1 add string def
											/DevNTable currentcolorspace 3 get def
											DevNIndex DevNCompCnt DevNTable length 1 sub
											{
												GrayTable exch dup DevNCompCnt idiv exch DevNTable exch get 255 exch sub put
											}for
											[
												/Indexed 
												[/DeviceGray]
												currentcolorspace 2 get
												GrayTable
											]
											setcolorspace
											end
											currentdict AGMOHS_&image_L2
										}ifelse
									}ifelse
								}{
									pop
									currentdict AGMOHS_&image_L2
								}ifelse
							}ifelse
						}ifelse
					}ifelse			
				}ifelse			
			}ifelse			
			end			
			grestore
		}ifelse		
	}ifelse
}def
/customcolorimage
{
	gsave
	aload 4 get setspotcolorant
	dup AGMOHS_toprocess?{		
		pop
		setcmykcolor
		1 currentgray sub settint
	}{
		AGMOHS_onmask? not{
			0 settint
		}if
		4{pop}repeat
	}ifelse
	AGMOHS_image_dict begin
		/DoImage true def
		/ImageType 1 def
		/DataSource xdf
		/ImageMatrix xdf
		/BitsPerComponent xdf
		/Height xdf
		/Width xdf
		/MultipleDataSources false def
		level2{
			current_colorspace 0 get/Separation eq
			current_image_decode length 2 eq
				{
				current_image_decode 0 get current_image_decode 1 get lt
				}{
				false
				}ifelse
			and
				{
				/Decode[1 currenttint 1 exch sub]def
				}{
				/Decode[currenttint 1 exch sub 1]def
				}ifelse
		}{
			{currenttint mul 1 currenttint sub add}currenttransfer addprocs settransfer
		}ifelse
		currenttint 1 exch sub AGMOHS_&setgray
		AGMOHS_paint?{
			currentgray 1 eq{
				gsave
				knockout_unitsq
				grestore
				/DoImage false def 
			}if
		}{
			/DoImage false def 
		}ifelse
		currentdict 
	end
	dup/DoImage get
	{
		AGMOHS_&image_L2
	}{
		consumeimagedata
	}ifelse
	grestore
}def
/AGMOHS_begindcsplate
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCS? true ddf}def
/AGMOHS_enddcsplate
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCS? false ddf}def
/AGMOHS_begindcscomposite
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCSComposite? true ddf}def
/AGMOHS_enddcscomposite
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCSComposite? false ddf}def
/colorimage
{
	gsave 
	1 AGMOHS_&setgray
	()setspotcolorant
	AGMOHS_image_dict begin
		/NComponents xdf
		/MultipleDataSources xdf
		MultipleDataSources NComponents 3 ne and{
			NComponents 4 eq{
				/DataSource[
					5 index/exec cvx
					6 index/exec cvx
					7 index/exec cvx
					8 index/exec cvx
					/AGMOHS_get_ink_data cvx
				]cvx def
				NComponents{pop}repeat
			}if
			/ImageType 1 def
			/Decode[0 1]def
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/DoImage true def
			AGMOHS_sep_plate/spot ne{
				NComponents 4 eq{
					AGMOHS_invert_image_samples
				}{
					NComponents 1 eq AGMOHS_sep_plate/k ne AGMOHS_isDCSComposite? or and{
						/DoImage false def
						currentdict ignoreimagedata
					}if
				}ifelse
			}{
				/DoImage false def
				currentdict ignoreimagedata
			}ifelse
			DoImage{
				currentdict AGMOHS_&image_L2
				}if
		}{
			AGMOHS_sep_plate/spot ne{
				NComponents 1 eq{
					AGMOHS_&image
				}{
					level2 not NComponents 3 eq or{
						AGMOHS_report_unsupported_color_space
						AGMOHS_sep_plate/k ne
							{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							setcolortransfer
							}if
						MultipleDataSources NComponents AGMOHS_&colorimage
					}{
						/DataSource xdf
						/ImageType 1 def
						/Decode[1 0]def
						/ImageMatrix xdf
						/BitsPerComponent xdf
						/Height xdf
						/Width xdf
						/DataSource Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							/DataSource load filter_cmyk 0()/SubFileDecode filter def
						currentdict AGMOHS_&image
					}ifelse
				}ifelse
			}{
				MultipleDataSources
					{
					/DataSource[
						1 1 NComponents
							{2 add -1 roll}for
						]def
					}{
					/DataSource exch def
					}ifelse
				/ImageType 1 def
				/Decode[NComponents{0 1}repeat]def
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				currentdict ignoreimagedata
			}ifelse
		}ifelse
	end
	grestore
}def
/spot
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop pop pop 1 AGMOHS_&setgray
		false setregistration
		1 settint
		()setspotcolorant
	}def		
	end
}def
/c
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop pop 1 exch sub AGMOHS_&setgray
		false setregistration
		1 settint
		()setspotcolorant
	}def
	end
}def
/m
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop exch pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/y
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop 3 1 roll pop pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/k
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		4 1 roll pop pop pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/AGMOHS_gdictcopy{
	begin
	{def}forall
	end
}def
/AGMOHS_gput{
	 AGMOHS_gstack AGMOHS_gstackptr get
	 3 1 roll
	 put
}def
/AGMOHS_gget{
		 AGMOHS_gstack AGMOHS_gstackptr get
		 exch
		 get
}def
/gsave{
		 AGMOHS_&gsave
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gstackptr 1 add
		 dup 32 ge{limitcheck}if
		 Adobe_AGM_OnHost_Seps exch
		 /AGMOHS_gstackptr xpt
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gdictcopy
}def
/grestore{
		 AGMOHS_&grestore
		 AGMOHS_gstackptr 1 sub
		 dup AGMOHS_gstacksaveptr lt{1 add}if
		 Adobe_AGM_OnHost_Seps exch
		 /AGMOHS_gstackptr xpt
}def
/grestoreall{
		 AGMOHS_&grestoreall
		 Adobe_AGM_OnHost_Seps
		/AGMOHS_gstackptr AGMOHS_gstacksaveptr put 
}def
/save{
		 AGMOHS_&save
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gstackptr 1 add
		 dup 32 ge{limitcheck}if
		 Adobe_AGM_OnHost_Seps begin
			/AGMOHS_gstackptr exch def
			/AGMOHS_gstacksaveptr AGMOHS_gstackptr def
		 end
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gdictcopy
}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
Adobe_AGM_OnHost_Seps begin
%%BeginSetup
Adobe_AGM_Utils begin
Adobe_AGM_OnHost_Seps/ds gx
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
216.000000 360.000000 0.000000 0.000000 1 
pop pop pop <</PageSize[5 -2 roll]/ImagingBBox null>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
4 makeinkdict
/Cyan false 0 addink
/Magenta false 0 addink
/Yellow false 0 addink
/Black false 0 addink
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
end
%%Page: 1 1
%%PlateColor: Cyan
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1) /PlateColor (Cyan)]
[/TrimBox [36 36 180 324]]
[/BleedBox [27 27 189 333]]
]xpdfm
/Cyan /c Adobe_AGM_OnHost_Seps /plate_setup gx
Adobe_AGM_Core/ps gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
216.000000 360.000000 0.000000 0.000000 1 
pop pop pop <</PageSize[5 -2 roll]/ImagingBBox null>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_AGM_Core begin
60 45 getspotfunction setscreen
end
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[0 -1 1 0 0 360 ]ct
gsave
np
gsave
27 27 mo
27 189 li
333 189 li
333 27 li
cp
clp
333 189 mo
27 189 li
27 27 li
333 27 li
333 189 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
82.6406 84.3184 mo
92.2529 78.4033 96.1006 76.8115 103.478 66.1992 cv
105.608 63.1338 107.749 73.9648 107.749 73.9648 cv
88.335 92.7305 li
88.335 92.7305 79.2754 86.3896 82.6406 84.3184 cv
cp
.788724 1 .346899 .303899 cmyk
f
64.4102 48.5859 mo
65.375 48.5859 66.5801 48.1299 66.5801 48.1299 cv
65.3213 51.3721 li
63.1694 52.7061 li
63.1694 52.7061 61.8345 49.4453 62.0303 49.0791 cv
62.2261 48.7129 64.4102 48.5859 64.4102 48.5859 cv
cp
.890898 .318517 1 .249577 cmyk
f
70.251 43.335 mo
68.9111 43.709 62.3564 48.2109 62.0483 49.0146 cv
61.7402 49.8184 68.5361 47.5684 68.8579 48.0498 cv
83.1113 56.8379 84.8877 62.8223 96.0415 79.5527 cv
96.271 79.8975 99.1641 76.7109 99.0117 76.498 cv
97.0845 73.8008 85.5762 53.0859 70.251 43.335 cv
cp
.627649 0 1 0 cmyk
f
85.2705 61.332 mo
86.4282 62.2568 74.6611 68.7266 72.25 83.6768 cv
71.3101 89.502 67.7329 72.3613 70.793 66.8965 cv
73.853 61.4326 80.4482 57.4736 85.2705 61.332 cv
cp
.890898 .318517 1 .249577 cmyk
f
84.3062 60.6885 mo
73.5356 64.0645 72.1543 76.4102 71.6719 84.2861 cv
71.4136 88.5078 77.7153 68.4053 82.8599 65.3506 cv
88.667 61.9023 84.3062 60.6885 84.3062 60.6885 cv
cp
.627649 0 1 0 cmyk
f
146.059 68.7871 mo
130.563 55.5166 110.559 59.4111 104.125 65.2939 cv
99.5952 69.4355 103.913 73.7578 97.6538 79.6592 cv
93.124 83.9297 84.0645 81.8604 80.5698 86.1309 cv
71.936 96.6836 73.4497 114.177 82.0293 128.027 cv
82.083 127.959 82.1353 127.892 82.1904 127.822 cv
82.8628 126.994 84.0542 125.467 85.7632 123.24 cv
86.1763 122.672 86.6948 120.6 87.3159 117.028 cv
87.5742 115.476 88.04 114.311 88.7139 113.533 cv
90.8877 115.009 li
95.1323 108.951 97.4111 105.718 97.7212 105.302 cv
100.568 100.799 101.993 97.3311 101.993 94.8965 cv
98.8862 96.5537 96.1685 97.5635 93.8389 97.9258 cv
93.8389 97.1484 li
93.1401 96.3721 li
93.8389 93.498 li
96.1685 91.6875 100.387 89.8486 106.497 87.9854 cv
112.449 86.1738 117.031 85.2676 120.241 85.2676 cv
123.503 85.2676 126.065 86.1484 127.929 87.9082 cv
129.793 89.668 130.725 92.1787 130.725 95.4404 cv
130.725 104.863 123.554 112.137 109.214 117.261 cv
106.314 118.298 101.189 119.798 93.8389 121.765 cv
91.7153 122.335 89.9297 123.706 88.481 125.881 cv
88.1699 126.347 87.1606 128.314 85.4526 131.782 cv
85.3389 132.015 85.2246 132.234 85.1094 132.447 cv
97.7778 148.663 121.042 157.311 148.819 137.469 cv
151.717 135.398 154.085 132.854 156.012 130.126 cv
155.107 130.126 li
154.9 130.126 152.363 129.737 147.498 128.961 cv
145.115 128.547 143.33 128.34 142.14 128.34 cv
140.016 128.34 137.531 128.6 134.685 129.116 cv
128.162 130.255 124.149 130.824 122.648 130.824 cv
119.231 130.824 117.523 129.997 117.523 128.34 cv
117.523 127.513 118.325 125.984 119.93 123.758 cv
120.5 123.033 121.612 121.584 123.27 119.409 cv
131.293 108.591 137.325 96.2949 141.363 82.5244 cv
142.761 77.8135 144.314 75.4561 146.022 75.4561 cv
146.798 75.4561 147.536 75.9111 148.235 76.8154 cv
148.934 77.7217 149.284 78.5898 149.284 79.418 cv
149.284 80.2979 147.653 84.0508 144.392 90.6768 cv
142.373 94.8193 139.111 101.188 134.607 109.781 cv
127.463 123.448 li
130.775 124.225 134.502 124.612 138.645 124.612 cv
141.078 124.612 144.714 124.432 149.556 124.069 cv
153.95 123.74 157.349 123.561 159.76 123.53 cv
162.842 116.733 163.793 110.147 163.793 107.676 cv
163.793 103.488 164.07 84.2139 146.059 68.7871 cv
cp
.547906 .935973 0 0 cmyk
f
114.34 110.505 mo
122.622 105.535 126.764 100.902 126.764 96.6055 cv
126.764 94.2246 125.936 92.3867 124.279 91.0908 cv
122.83 89.9531 120.862 89.3838 118.377 89.3838 cv
116.306 89.3838 114.288 89.7715 112.32 90.5479 cv
110.042 91.4795 108.489 92.7227 107.662 94.2754 cv
106.936 96.0361 106.211 97.7695 105.487 99.4785 cv
99.5078 107.709 li
97.333 110.868 95.6763 113.818 94.5381 116.563 cv
95.2368 117.339 li
95.9355 117.339 li
100.595 117.339 106.729 115.061 114.34 110.505 cv
cp
f
126.192 146.653 mo
131.935 146.498 107.923 155.633 99.8726 134.766 cv
97.9409 129.759 107.721 147.148 126.192 146.653 cv
cp
.788724 1 .346899 .303899 cmyk
f
89.5435 107.787 mo
90.6699 113.42 77.5928 91.3076 96.791 79.8311 cv
101.398 77.0781 85.9194 89.668 89.5435 107.787 cv
cp
f
229.947 80.5176 mo
241.903 80.5176 li
261.241 121.04 li
280.5 80.5176 li
292.295 80.5176 li
292.295 82.041 li
288.364 82.3623 286.839 82.4434 286.999 85.1709 cv
289.567 121.521 li
290.049 128.902 290.691 128.902 296.549 128.902 cv
296.549 130.428 li
275.926 130.428 li
275.926 128.902 li
279.698 128.902 283.389 127.859 283.068 123.606 cv
280.741 87.6582 li
280.581 87.6582 li
260.6 130.428 li
258.754 130.428 li
238.292 87.6582 li
238.132 87.6582 li
235.966 123.768 li
235.725 127.859 238.774 128.743 242.385 128.902 cv
242.385 130.428 li
225.694 130.428 li
225.694 128.902 li
231.552 128.902 232.275 127.619 232.676 120.317 cv
234.602 89.1025 li
234.923 83.8066 234.922 82.3623 229.947 82.041 cv
224.572 82.1221 222.806 84.2891 222.806 89.4238 cv
222.806 111.09 li
222.806 121.04 216.467 131.711 199.054 131.711 cv
183.728 131.711 175.864 122.965 175.864 111.49 cv
175.864 88.0596 li
175.864 82.9248 174.42 82.1221 168.963 82.041 cv
168.963 80.5176 li
189.585 80.5176 li
189.585 82.041 li
188.864 82.041 li
184.45 82.041 182.525 83.2461 182.525 87.8994 cv
182.525 110.206 li
182.525 121.04 188.864 127.539 200.82 127.539 cv
209.887 127.539 219.115 123.768 219.115 110.127 cv
219.115 91.4307 li
219.115 83.7266 217.911 82.3623 211.251 82.041 cv
211.251 80.5176 li
229.947 80.5176 li
cp
0 0 0 0 cmyk
f
168.501 162.27 mo
168.501 168.159 173.276 172.935 179.165 172.935 cv
185.056 172.935 189.832 168.159 189.832 162.27 cv
189.832 156.379 185.056 151.604 179.165 151.604 cv
173.276 151.604 168.501 156.379 168.501 162.27 cv
cp
f
189.83 162.031 mo
189.83 162.079 189.64 162.24 189.438 162.362 cv
189.433 162.363 189.428 162.367 189.422 162.37 cv
189.148 162.521 188.758 162.661 188.273 162.787 cv
187.775 162.919 187.16 163.038 186.485 163.142 cv
185.809 163.245 185.056 163.322 184.246 163.395 cv
184.246 163.393 184.246 163.396 184.246 163.395 cv
183.208 163.487 182.581 163.527 181.754 163.567 cv
180.874 163.605 179.838 163.625 179.061 163.622 cv
179.061 163.741 179.061 163.858 179.061 163.977 cv
179.061 164.81 179.039 165.604 179.042 166.351 cv
179.064 170.445 179.058 170.444 179.179 172.935 cv
185.07 172.935 189.838 168.158 189.838 162.27 cv
189.838 162.27 189.83 162.114 189.83 162.031 cv
0 .18 1 0 cmyk
f
179.009 163.977 mo
179.01 164.81 179.013 165.604 179.016 166.353 cv
180.725 167.971 180.725 167.971 181.439 168.684 cv
181.626 167.33 181.731 165.714 181.729 163.921 cv
181.729 163.805 181.728 163.686 181.727 163.569 cv
180.648 163.611 179.935 163.624 179.008 163.622 cv
179.008 163.739 179.009 163.859 179.009 163.977 cv
0 0 0 1 cmyk
f
182.922 170.507 mo
182.548 169.898 182.208 169.501 181.436 168.69 cv
181.074 171.287 180.427 172.886 179.631 172.921 cv
179.697 172.918 179.802 172.912 179.869 172.908 cv
179.955 172.901 180.059 172.893 180.142 172.886 cv
181.246 172.787 182.195 171.941 182.922 170.507 cv
f
184.117 166.151 mo
184.12 166.138 183.502 169.356 182.923 170.507 cv
183.256 171.15 183.272 171.406 183.137 171.83 cv
184.171 171.044 185.026 169.858 185.614 168.391 cv
185.236 167.623 184.981 167.214 184.117 166.151 cv
f
181.063 172.768 mo
181.295 172.727 181.283 172.722 181.712 172.626 cv
181.968 172.554 li
182.756 172.309 182.894 172.184 183.139 171.819 cv
182.437 172.35 181.685 172.674 180.845 172.804 cv
181.063 172.768 li
cp
f
185.805 170.15 mo
187.342 168.408 188.281 165.948 188.278 163.142 cv
188.278 163.022 188.275 162.905 188.273 162.787 cv
187.776 162.919 187.16 163.038 186.485 163.142 cv
186.495 163.26 186.499 163.38 186.499 163.498 cv
186.501 165.323 186.191 166.981 185.627 168.384 cv
185.945 169.199 185.949 169.539 185.805 170.15 cv
f
184.247 163.395 mo
183.208 163.486 182.555 163.526 181.727 163.567 cv
183.189 165.088 183.499 165.443 184.117 166.151 cv
184.205 165.398 184.25 164.598 184.25 163.761 cv
184.249 163.641 184.248 163.515 184.247 163.395 cv
f
176.827 152.154 mo
177.422 151.913 177.993 151.666 179.145 151.6 cv
178.364 151.671 177.551 151.888 176.827 152.154 cv
f
186.308 163.14 mo
185.752 163.067 185.288 162.128 185.532 161.173 cv
184.751 161.714 183.872 160.604 184 159.576 cv
184.068 159.032 184.424 158.551 185.046 158.773 cv
184.793 157.906 184.477 157.084 184.107 156.328 cv
183.556 156.398 182.951 156.456 182.309 156.502 cv
182.879 157.363 182.321 158.163 181.525 158.037 cv
180.949 157.943 180.409 157.339 180.56 156.618 cv
180.093 156.943 179.134 156.814 179.044 155.792 cv
179.018 157.964 179.005 160.737 179.009 163.622 cv
181.842 163.65 185.164 163.349 186.485 163.142 cv
186.485 163.142 186.485 163.146 186.485 163.142 cv
186.431 163.146 186.359 163.147 186.308 163.14 cv
0 1 .66 .2 cmyk
f
172.275 165.282 mo
173.067 164.975 174.064 166.346 173.716 167.261 cv
173.555 167.684 173.138 167.802 172.701 167.547 cv
172.936 168.347 173.242 169.079 173.608 169.727 cv
174.169 169.803 174.8 169.869 175.488 169.922 cv
174.935 169.241 175.379 168.683 176.117 168.721 cv
176.751 168.753 177.589 169.279 177.41 170.001 cv
177.98 169.743 178.943 169.953 179.061 170.696 cv
179.032 169.098 179.015 166.748 179.01 163.977 cv
179.01 163.854 179.009 163.743 179.008 163.622 cv
178.108 163.625 177.196 163.591 176.289 163.553 cv
174.359 163.473 173.049 163.362 171.437 163.087 cv
171.434 163.094 171.437 163.084 171.437 163.087 cv
172.262 163.367 172.489 164.599 172.275 165.282 cv
f
184.169 155.459 mo
184.169 155.459 li
184.172 155.459 184.225 155.462 184.228 155.462 cv
184.228 155.462 184.23 155.462 184.232 155.462 cv
184.336 155.462 184.433 155.422 184.527 155.406 cv
185.138 155.294 186.523 154.959 186.523 154.558 cv
186.523 154.558 187.065 155.101 187.463 155.855 cv
187.51 155.938 187.542 156.013 187.584 156.132 cv
187.632 156.267 187.662 156.421 187.656 156.496 cv
187.638 156.727 187.492 156.729 187.34 156.662 cv
187.324 156.656 187.308 156.649 187.291 156.641 cv
186.743 156.395 186.563 155.892 186.458 155.686 cv
186.179 155.772 185.718 155.972 185.334 156.048 cv
185.29 156.057 185.208 156.076 185.162 156.083 cv
185.614 156.828 186.044 157.715 186.353 158.574 cv
186.89 158.021 187.731 159.046 187.771 160.035 cv
187.796 160.616 187.535 161.134 187.004 160.946 cv
187.428 161.733 187.292 162.889 186.485 163.143 cv
186.353 160.556 185.913 158.31 184.209 155.462 cv
184.109 155.462 li
f
184.223 155.396 mo
184.223 155.396 li
182.865 153.321 181.785 152.6 180.407 152.055 cv
180.133 151.946 179.196 151.596 179.148 151.584 cv
179.152 151.601 li
179.394 151.955 179.881 152.172 179.986 152.202 cv
179.956 152.332 179.977 152.591 180.426 152.915 cv
180.497 152.967 180.562 153.006 180.627 153.039 cv
181.321 153.403 181.475 153.119 181.507 153.007 cv
181.512 153.004 181.515 153.002 181.52 152.998 cv
181.73 153.154 182.142 153.484 182.597 154.002 cv
182.86 154.316 183.107 154.591 183.293 154.866 cv
182.865 154.92 182.298 154.97 181.735 155.011 cv
181.704 154.33 181.213 153.991 180.903 153.876 cv
180.228 153.625 180.005 154.42 180.299 154.979 cv
179.765 154.69 179.146 154.947 179.058 155.792 cv
181.17 155.779 182.686 155.688 184.238 155.459 cv
184.238 155.333 li
f
184.341 153.526 mo
184.335 153.516 184.329 153.479 184.336 153.451 cv
184.344 153.424 184.367 153.401 184.367 153.401 cv
184.367 153.401 184.377 153.373 184.418 153.35 cv
184.527 153.288 184.849 153.256 185.741 153.872 cv
183.892 152.418 181.901 151.82 180.211 151.654 cv
179.973 151.627 179.531 151.608 179.531 151.608 cv
180.067 151.656 180.434 151.76 180.52 151.79 cv
180.589 151.813 180.643 151.838 180.676 151.838 cv
180.679 151.838 180.681 151.838 180.681 151.838 cv
180.788 151.838 180.911 151.911 181.062 151.954 cv
181.227 152.003 181.501 152.124 181.747 152.239 cv
181.993 152.355 182.356 152.624 182.358 152.77 cv
182.302 152.804 182.284 152.818 182.119 152.773 cv
182.75 153.225 183.656 154.074 184.19 154.699 cv
184.557 154.629 185.104 154.551 185.357 154.467 cv
185.34 154.484 184.523 153.873 184.341 153.526 cv
f
173.498 170.317 mo
172.583 170.15 172.057 170.013 171.706 169.834 cv
171.648 169.803 171.629 169.803 171.615 169.8 cv
171.608 169.8 171.096 169.273 170.644 168.688 cv
170.318 168.263 170.04 167.782 170.011 167.737 cv
170.015 167.744 170.085 167.737 170.128 167.753 cv
170.608 167.912 171.355 169.221 171.365 169.234 cv
171.66 169.345 172.047 169.449 172.513 169.543 cv
172.075 168.882 171.709 168.142 171.426 167.334 cv
170.76 167.67 169.912 165.911 170.18 165.17 cv
170.236 165.02 170.412 164.704 170.862 165.045 cv
170.523 164.262 170.615 163.086 171.436 163.088 cv
171.453 165.681 171.808 167.914 173.498 170.317 cv
f
179.046 170.845 mo
178.954 171.216 178.436 171.567 177.703 171.269 cv
178.044 171.722 177.748 172.112 177.145 172.003 cv
176.678 171.918 176.119 171.541 176.076 171.164 cv
175.496 171.12 174.967 171.064 174.496 170.999 cv
174.944 171.519 175.442 171.942 175.98 172.259 cv
176.046 172.232 176.145 172.238 176.464 172.352 cv
176.873 172.493 177.262 172.686 177.671 172.831 cv
177.584 172.818 li
177.275 172.77 177.199 172.754 177.027 172.72 cv
176.24 172.565 174.871 172.118 173.498 170.317 cv
175.153 170.57 176.767 170.683 179.063 170.697 cv
179.057 170.741 179.056 170.803 179.046 170.845 cv
f
179.145 151.6 mo
173.426 151.6 168.612 156.268 168.502 162.063 cv
168.506 162.074 li
168.51 162.092 168.563 162.198 168.788 162.339 cv
169.013 162.48 169.345 162.629 169.783 162.742 cv
170.325 162.883 170.894 162.995 171.425 163.086 cv
171.434 163.088 li
173.049 163.361 174.359 163.473 176.289 163.554 cv
177.196 163.591 178.109 163.625 179.008 163.622 cv
179.006 163.078 179.004 159.98 179.029 156.989 cv
179.031 156.602 179.037 156.198 179.042 155.793 cv
179.065 153.846 179.107 151.86 179.145 151.6 cv
0 .18 1 0 cmyk
f
184.254 171.646 mo
183.65 171.984 183.534 171.993 182.723 172.327 cv
182.498 172.42 182.287 172.475 182.055 172.539 cv
183.494 172.152 185.46 170.542 185.807 170.148 cv
185.631 170.536 185.5 170.795 185.076 171.136 cv
184.958 171.231 184.449 171.537 184.254 171.646 cv
0 0 0 1 cmyk
f
169.783 162.742 mo
169.338 162.634 169.013 162.48 168.788 162.339 cv
168.906 158.479 171.051 155.056 174.174 153.18 cv
173.436 153.835 173.107 154.226 172.734 155.112 cv
170.982 157.125 169.863 159.831 169.783 162.742 cv
f
174.184 153.174 mo
174.965 152.609 175.413 152.197 176.652 151.9 cv
177.521 151.692 178.283 151.603 179.145 151.6 cv
177.348 151.677 175.657 152.291 174.184 153.174 cv
f
173.614 163.382 mo
172.835 163.306 172.098 163.202 171.436 163.087 cv
171.479 161.154 171.882 159.3 172.583 157.657 cv
172.854 158.736 173.084 159.316 173.845 160.595 cv
173.708 161.496 173.628 162.432 173.614 163.382 cv
f
179.043 155.793 mo
179.03 156.968 179.021 158.177 179.019 159.108 cv
179.015 160.031 179.01 160.7 179.01 160.83 cv
177.962 159.729 177.399 159.11 176.633 158.137 cv
177.149 154.82 178.079 152.201 179.145 151.6 cv
179.106 151.915 179.065 153.798 179.043 155.793 cv
f
175.299 155.668 mo
174.628 157.079 174.129 158.774 173.851 160.594 cv
174.504 161.563 174.907 162.129 176.206 163.55 cv
176.22 161.643 176.375 159.793 176.634 158.129 cv
175.853 157.066 175.605 156.56 175.299 155.668 cv
f
189.423 162.37 mo
189.427 162.487 189.428 162.605 189.428 162.724 cv
189.435 166.495 187.595 169.632 184.711 171.368 cv
184.637 171.424 li
185.992 170.594 187.702 169.188 188.791 166.861 cv
189.957 164.568 189.83 162.031 189.83 162.031 cv
189.772 162.136 189.602 162.268 189.423 162.37 cv
f
176.827 152.154 mo
175.271 152.765 173.871 153.81 172.736 155.11 cv
172.427 156.081 172.427 156.622 172.583 157.657 cv
173.276 156.041 174.241 154.64 175.384 153.592 cv
175.737 152.982 175.956 152.618 176.827 152.154 cv
f
175.296 155.675 mo
175.103 154.803 175.087 154.359 175.38 153.601 cv
176.494 152.576 177.777 151.813 179.145 151.6 cv
177.647 152.001 176.292 153.57 175.296 155.675 cv
f
228.265 167.341 mo
227.827 167.341 227.542 167.36 227.083 167.305 cv
227.083 161.084 li
227.427 161.045 227.674 161.045 228.037 161.045 cv
230.972 161.045 231.775 162.411 231.775 164.175 cv
231.775 166.45 230.382 167.341 228.265 167.341 cv
cp
215.356 166.56 mo
216.969 162.168 li
218.638 166.56 li
215.356 166.56 li
cp
234.681 170.6 mo
233.186 169.106 li
232.301 168.219 231.737 167.69 231.03 167.135 cv
232.583 166.679 233.542 165.483 233.542 164.062 cv
233.542 162.126 231.981 160.678 228.457 160.678 cv
227.216 160.678 226.838 160.698 226.066 160.737 cv
225.292 160.771 224.133 160.848 223.679 160.848 cv
223.679 161.216 li
224.096 161.216 li
225.197 161.216 225.52 161.557 225.52 162.733 cv
225.52 170.706 li
225.52 171.97 225.12 172.271 224.001 172.271 cv
223.685 172.271 li
222.737 172.271 222.337 172.082 221.958 171.077 cv
217.993 160.572 li
216.341 160.572 li
216.513 160.988 li
213.059 170.396 li
212.453 172.043 212.244 172.253 211.011 172.271 cv
209.635 172.271 209.484 172.267 209.37 170.525 cv
208.763 161.926 li
208.724 161.28 209.085 161.262 210.015 161.186 cv
210.015 160.845 li
207.225 160.845 li
202.673 170.41 li
198.1 160.845 li
195.225 160.845 li
195.225 161.186 li
196.403 161.262 196.441 161.604 196.364 162.856 cv
195.91 170.239 li
195.815 171.968 195.644 172.271 194.258 172.271 cv
194.258 172.639 li
198.214 172.639 li
198.214 172.271 li
197.361 172.233 196.633 172.025 196.69 171.057 cv
197.208 162.515 li
197.246 162.515 li
202.084 172.639 li
202.52 172.639 li
207.244 162.515 li
207.283 162.515 li
207.832 171.019 li
207.908 172.025 207.036 172.271 206.145 172.271 cv
206.145 172.639 li
211.021 172.639 li
215.395 172.639 li
215.395 172.271 li
215.09 172.271 li
214.046 172.271 213.554 172.082 213.554 171.569 cv
213.554 171.305 213.8 170.735 213.933 170.377 cv
215.033 167.403 li
218.961 167.403 li
220.231 170.851 li
220.308 171.04 220.441 171.325 220.441 171.627 cv
220.441 172.158 220.042 172.271 218.961 172.271 cv
218.467 172.271 li
218.467 172.639 li
223.679 172.639 li
223.685 172.639 li
229.049 172.639 li
229.049 172.271 li
228.609 172.271 li
227.542 172.271 227.083 171.988 227.083 170.858 cv
227.083 167.671 li
227.389 167.69 227.636 167.709 228.057 167.709 cv
228.57 167.709 228.875 167.69 229.351 167.671 cv
229.81 167.973 230.478 168.522 231.317 169.35 cv
232.565 170.594 li
234.245 172.278 235.098 172.998 238.419 172.847 cv
238.419 172.506 li
236.958 172.412 235.801 171.713 234.681 170.6 cv
cp
0 0 0 0 cmyk
f
257.667 169.867 mo
256.472 171.525 256.13 171.962 255.01 171.962 cv
252.222 171.962 li
251.672 171.962 251.463 171.772 251.463 171.261 cv
251.463 162.523 li
251.463 161.349 251.785 161.217 253.02 161.217 cv
253.721 161.217 li
253.721 160.849 li
248.226 160.849 li
248.135 160.849 li
243.95 160.849 li
243.95 161.217 li
245.164 161.217 245.522 161.538 244.916 162.578 cv
242.247 167.123 li
239.203 162.446 li
238.631 161.576 238.725 161.217 240.216 161.217 cv
240.216 160.849 li
235.17 160.849 li
235.17 161.217 li
236.399 161.252 236.834 161.519 237.76 162.977 cv
241.155 168.239 li
241.155 170.908 li
241.155 171.836 240.809 172.271 239.623 172.271 cv
239.259 172.271 li
239.259 172.641 li
244.48 172.641 li
244.48 172.271 li
244.234 172.271 li
243.079 172.271 242.718 171.874 242.718 170.871 cv
242.718 168.03 li
245.862 162.711 li
246.393 161.82 246.941 161.31 248.226 161.217 cv
248.4 161.217 li
249.595 161.217 249.898 161.634 249.898 162.638 cv
249.898 171.021 li
249.898 171.988 249.576 172.271 248.704 172.271 cv
248.077 172.271 li
248.077 172.639 li
256.547 172.639 li
258.008 169.867 li
257.667 169.867 li
cp
f
294.644 170.737 mo
293.465 171.911 292.404 172.271 289.857 172.271 cv
288.357 172.271 288.3 172.007 288.3 171.231 cv
288.3 161.121 li
288.527 161.103 289.041 161.045 289.819 161.045 cv
292.479 161.045 293.828 161.708 294.703 162.579 cv
295.822 163.697 296.221 165.249 296.221 166.648 cv
296.221 168.6 295.348 170.056 294.644 170.737 cv
cp
261.914 166.56 mo
263.527 162.168 li
265.197 166.56 li
261.914 166.56 li
cp
290.769 160.678 mo
289.782 160.678 288.623 160.698 287.584 160.737 cv
286.545 160.773 285.616 160.809 284.915 160.848 cv
284.915 160.849 li
280.333 160.849 li
280.333 161.217 li
281.847 161.254 282.19 161.463 282.19 162.618 cv
282.19 170.162 li
273.268 160.849 li
270.294 160.849 li
270.294 161.217 li
270.957 161.234 271.452 161.386 271.888 161.689 cv
271.888 171.003 li
271.888 171.874 271.507 172.271 270.333 172.271 cv
270.243 172.271 li
269.294 172.271 268.896 172.082 268.517 171.077 cv
264.551 160.572 li
262.9 160.572 li
263.072 160.988 li
259.618 170.396 li
259.011 172.043 258.803 172.253 257.568 172.271 cv
257.568 172.639 li
261.952 172.639 li
261.952 172.271 li
261.649 172.271 li
260.606 172.271 260.112 172.082 260.112 171.569 cv
260.112 171.305 260.358 170.735 260.491 170.377 cv
261.591 167.403 li
265.519 167.403 li
266.791 170.851 li
266.866 171.04 266.999 171.325 266.999 171.627 cv
266.999 172.158 266.6 172.271 265.519 172.271 cv
265.026 172.271 li
265.026 172.639 li
274.65 172.639 li
274.65 172.271 li
273.04 172.271 272.738 171.988 272.738 170.625 cv
272.738 162.503 li
282.547 172.778 li
283.039 172.778 li
283.039 162.202 li
283.039 161.463 283.491 161.2 284.915 161.2 cv
285.294 161.186 li
286.413 161.186 286.736 161.489 286.736 162.723 cv
286.736 170.89 li
286.736 171.987 286.261 172.271 285.236 172.271 cv
284.915 172.271 li
284.915 172.639 li
290.979 172.639 li
295.784 172.639 297.989 169.205 297.989 166.348 cv
297.989 163.223 295.784 160.678 290.769 160.678 cv
cp
f
202.156 152.96 mo
202.156 153.129 li
201.542 153.139 201.324 153.386 201.324 153.972 cv
201.324 156.439 li
201.324 157.574 200.598 158.791 198.615 158.791 cv
196.87 158.791 195.971 157.794 195.971 156.484 cv
195.971 153.816 li
195.971 153.229 195.805 153.139 195.184 153.129 cv
195.184 152.96 li
197.537 152.96 li
197.537 153.129 li
197.456 153.129 li
196.951 153.129 196.732 153.266 196.732 153.797 cv
196.732 156.339 li
196.732 157.574 197.456 158.314 198.816 158.314 cv
199.849 158.314 200.902 157.886 200.902 156.33 cv
200.902 154.2 li
200.902 153.322 200.763 153.167 200.005 153.129 cv
200.005 152.96 li
202.156 152.96 li
cp
f
211.083 158.722 mo
206.356 153.753 li
206.356 157.688 li
206.356 158.346 206.501 158.484 207.277 158.484 cv
207.277 158.654 li
205.16 158.654 li
205.16 158.484 li
205.197 158.484 li
205.765 158.484 205.947 158.292 205.947 157.87 cv
205.947 153.358 li
205.737 153.213 205.499 153.139 205.179 153.129 cv
205.179 152.96 li
206.61 152.96 li
210.91 157.457 li
210.91 153.808 li
210.91 153.249 210.747 153.147 210.016 153.129 cv
210.016 152.96 li
212.151 152.96 li
212.151 153.129 li
211.466 153.129 211.319 153.249 211.319 153.606 cv
211.319 158.722 li
211.083 158.722 li
cp
f
218.06 158.654 mo
215.833 158.654 li
215.833 158.486 li
216.4 158.457 216.519 158.311 216.519 157.697 cv
216.519 153.791 li
216.519 153.295 216.346 153.158 215.833 153.129 cv
215.833 152.959 li
218.06 152.959 li
218.06 153.129 li
217.482 153.129 217.28 153.259 217.28 153.872 cv
217.28 157.761 li
217.28 158.3 217.428 158.486 218.06 158.486 cv
218.06 158.654 li
cp
f
224.195 158.791 mo
222.209 153.844 li
221.98 153.266 221.87 153.129 221.312 153.129 cv
221.312 152.96 li
223.828 152.96 li
223.828 153.129 li
222.986 153.147 222.786 153.341 222.96 153.761 cv
224.605 157.856 li
226.051 154.08 li
226.15 153.824 226.206 153.642 226.206 153.514 cv
226.206 153.24 225.977 153.129 225.357 153.129 cv
225.357 152.96 li
227.479 152.96 li
227.479 153.129 li
227.002 153.129 226.755 153.35 226.537 153.916 cv
224.649 158.791 li
224.195 158.791 li
cp
f
234.663 156.592 mo
234.493 156.592 li
234.419 155.939 234.244 155.867 233.868 155.867 cv
232.313 155.867 li
232.313 157.826 li
232.313 158.248 232.471 158.332 232.811 158.332 cv
234.226 158.332 li
234.863 158.332 235.056 158.084 235.285 157.29 cv
235.45 157.29 li
235.302 158.654 li
230.436 158.654 li
230.436 158.486 li
230.691 158.486 li
231.425 158.486 231.553 158.282 231.553 157.731 cv
231.553 153.865 li
231.553 153.35 231.434 153.129 230.822 153.129 cv
230.618 153.129 li
230.618 152.959 li
235.019 152.959 li
235.093 154.229 li
234.928 154.229 li
234.809 153.447 234.582 153.283 234.253 153.283 cv
232.313 153.283 li
232.313 155.543 li
233.959 155.543 li
234.289 155.543 234.445 155.387 234.493 154.853 cv
234.663 154.853 li
234.663 156.592 li
cp
f
241.344 156.087 mo
241.135 156.087 240.997 156.096 240.778 156.067 cv
240.778 153.063 li
240.943 153.044 241.063 153.044 241.235 153.044 cv
242.641 153.044 243.025 153.704 243.025 154.558 cv
243.025 155.656 242.358 156.087 241.344 156.087 cv
cp
244.438 157.661 mo
243.715 156.937 li
243.282 156.505 243.007 156.248 242.669 155.987 cv
243.42 155.768 243.889 155.188 243.889 154.502 cv
243.889 153.566 243.126 152.874 241.436 152.874 cv
240.842 152.874 240.658 152.884 240.282 152.902 cv
239.906 152.924 239.349 152.96 239.128 152.96 cv
239.128 153.129 li
239.33 153.129 li
239.861 153.129 240.016 153.294 240.016 153.862 cv
240.016 157.721 li
240.016 158.337 239.825 158.484 239.284 158.484 cv
239.128 158.484 li
239.128 158.654 li
241.719 158.654 li
241.719 158.484 li
241.509 158.484 li
240.997 158.484 240.778 158.346 240.778 157.795 cv
240.778 156.239 li
240.924 156.248 241.042 156.257 241.245 156.257 cv
241.491 156.257 241.637 156.248 241.865 156.239 cv
242.085 156.388 242.404 156.654 242.806 157.058 cv
243.412 157.666 li
244.228 158.478 244.639 158.828 246.242 158.754 cv
246.242 158.589 li
245.537 158.542 244.978 158.202 244.438 157.661 cv
cp
f
248.718 157.25 mo
248.908 158.063 249.545 158.537 250.256 158.537 cv
250.868 158.537 251.515 158.181 251.515 157.46 cv
251.515 156.146 248.591 155.744 248.591 154.147 cv
248.591 153.392 249.281 152.824 250.211 152.824 cv
250.977 152.824 251.132 153.054 251.451 153.054 cv
251.524 153.054 251.561 153.035 251.615 152.96 cv
251.76 152.96 li
251.913 154.12 li
251.76 154.12 li
251.505 153.463 250.922 153.044 250.293 153.044 cv
249.69 153.044 249.27 153.392 249.27 153.902 cv
249.27 155.198 252.194 155.545 252.194 157.223 cv
252.194 158.116 251.406 158.788 250.338 158.788 cv
249.836 158.788 249.198 158.537 249.072 158.537 cv
248.991 158.537 248.926 158.583 248.891 158.654 cv
248.735 158.654 li
248.545 157.25 li
248.718 157.25 li
cp
f
258.622 158.654 mo
256.396 158.654 li
256.396 158.486 li
256.962 158.457 257.081 158.311 257.081 157.697 cv
257.081 153.791 li
257.081 153.295 256.907 153.158 256.396 153.129 cv
256.396 152.959 li
258.622 152.959 li
258.622 153.129 li
258.045 153.129 257.843 153.259 257.843 153.872 cv
257.843 157.761 li
257.843 158.3 257.989 158.486 258.622 158.486 cv
258.622 158.654 li
cp
f
265.125 157.814 mo
265.125 158.31 265.291 158.484 265.848 158.484 cv
266.188 158.484 li
266.188 158.654 li
263.301 158.654 li
263.301 158.484 li
263.64 158.484 li
264.198 158.484 264.363 158.31 264.363 157.814 cv
264.363 153.281 li
262.77 153.281 li
262.405 153.281 262.239 153.494 262.102 154.302 cv
261.938 154.302 li
262.083 152.824 li
262.258 152.824 li
262.267 152.878 262.304 152.914 262.358 152.934 cv
262.415 152.95 262.478 152.96 262.541 152.96 cv
266.947 152.96 li
267.075 152.96 267.211 152.934 267.23 152.824 cv
267.403 152.824 li
267.551 154.302 li
267.386 154.302 li
267.249 153.494 267.084 153.281 266.718 153.281 cv
265.125 153.281 li
265.125 157.814 li
cp
f
275.13 153.79 mo
275.424 153.285 275.25 153.129 274.66 153.129 cv
274.66 152.96 li
276.73 152.96 li
276.73 153.129 li
276.109 153.176 275.844 153.423 275.588 153.854 cv
274.06 156.431 li
274.06 157.806 li
274.06 158.292 274.234 158.484 274.798 158.484 cv
274.917 158.484 li
274.917 158.654 li
272.405 158.654 li
272.405 158.484 li
272.576 158.484 li
273.137 158.484 273.298 158.274 273.298 157.824 cv
273.298 156.531 li
271.683 153.982 li
271.232 153.278 271.021 153.147 270.426 153.129 cv
270.426 152.96 li
272.855 152.96 li
272.855 153.129 li
272.151 153.129 272.105 153.304 272.376 153.726 cv
273.831 155.99 li
275.13 153.79 li
cp
f
287.28 158.57 mo
285.805 158.57 284.641 157.36 284.641 155.646 cv
284.641 154.547 285.283 153.044 286.894 153.044 cv
288.408 153.044 289.488 154.245 289.488 155.949 cv
289.488 157.25 288.774 158.57 287.28 158.57 cv
cp
287.132 152.824 mo
285.182 152.824 283.776 154.106 283.776 155.932 cv
283.776 157.645 285.292 158.79 287.087 158.79 cv
288.865 158.79 290.352 157.498 290.352 155.646 cv
290.352 153.997 288.865 152.824 287.132 152.824 cv
cp
f
296.54 156.463 mo
296.386 156.463 li
296.368 155.93 296.174 155.765 295.735 155.765 cv
294.038 155.765 li
294.038 157.777 li
294.038 158.291 294.148 158.484 294.838 158.484 cv
294.838 158.654 li
292.608 158.654 li
292.608 158.484 li
293.177 158.447 293.277 158.328 293.277 157.583 cv
293.277 153.992 li
293.277 153.405 293.232 153.139 292.591 153.129 cv
292.591 152.959 li
296.692 152.959 li
296.692 154.036 li
296.54 154.036 li
296.529 153.503 296.347 153.283 295.779 153.283 cv
294.038 153.283 li
294.038 155.441 li
295.855 155.441 li
296.194 155.441 296.358 155.248 296.386 154.853 cv
296.54 154.853 li
296.54 156.463 li
cp
f
68.9995 153.036 mo
69.2158 153 69.4146 153 69.6216 153 cv
70.8213 153 71.1011 153.694 71.1011 154.398 cv
71.1011 155.31 70.4697 155.978 69.4863 155.978 cv
69.3154 155.978 69.1162 155.933 68.9995 155.905 cv
68.9995 153.036 li
cp
69.7661 156.148 mo
71.1011 156.148 71.9492 155.48 71.9492 154.425 cv
71.9492 153.73 71.5161 152.828 69.6309 152.828 cv
69.3872 152.828 68.9546 152.837 68.5122 152.855 cv
68.0703 152.874 67.6284 152.901 67.3755 152.91 cv
67.3755 153.081 li
67.8267 153.081 li
68.1421 153.081 68.2505 153.226 68.2505 153.559 cv
68.2505 157.826 li
68.2505 158.25 68.1152 158.35 67.646 158.35 cv
67.52 158.35 li
67.52 158.521 li
70.0186 158.521 li
70.0186 158.35 li
69.7212 158.35 li
69.1528 158.35 68.9995 158.16 68.9995 157.655 cv
68.9995 156.076 li
69.27 156.131 69.4956 156.148 69.7661 156.148 cv
cp
f
77.0098 155.995 mo
76.8018 155.995 76.6665 156.004 76.4502 155.978 cv
76.4502 153.018 li
76.6123 153 76.73 153 76.9009 153 cv
78.2905 153 78.6694 153.649 78.6694 154.489 cv
78.6694 155.571 78.0107 155.995 77.0098 155.995 cv
cp
80.0586 157.547 mo
79.3462 156.834 li
78.9219 156.41 78.6514 156.157 78.3174 155.896 cv
79.0571 155.679 79.5176 155.111 79.5176 154.435 cv
79.5176 153.514 78.7686 152.828 77.0996 152.828 cv
76.5132 152.828 76.3325 152.837 75.9629 152.855 cv
75.5933 152.874 75.043 152.91 74.8262 152.91 cv
74.8262 153.081 li
75.0249 153.081 li
75.5479 153.081 75.7012 153.244 75.7012 153.803 cv
75.7012 157.601 li
75.7012 158.205 75.5117 158.35 74.9795 158.35 cv
74.8262 158.35 li
74.8262 158.521 li
77.3794 158.521 li
77.3794 158.35 li
77.1719 158.35 li
76.6665 158.35 76.4502 158.214 76.4502 157.673 cv
76.4502 156.148 li
76.5942 156.157 76.7119 156.167 76.9102 156.167 cv
77.1538 156.167 77.2983 156.157 77.5234 156.148 cv
77.7402 156.293 78.0557 156.555 78.4531 156.951 cv
79.0479 157.547 li
79.8511 158.35 80.2568 158.692 81.8354 158.621 cv
81.8354 158.458 li
81.1411 158.412 80.5908 158.078 80.0586 157.547 cv
cp
f
87.293 158.44 mo
85.8408 158.44 84.6948 157.249 84.6948 155.562 cv
84.6948 154.48 85.3262 153 86.9136 153 cv
88.4023 153 89.4668 154.182 89.4668 155.859 cv
89.4668 157.141 88.7632 158.44 87.293 158.44 cv
cp
87.1484 152.774 mo
85.2271 152.774 83.8467 154.047 83.8467 155.842 cv
83.8467 157.528 85.3354 158.665 87.1035 158.665 cv
88.8535 158.665 90.3149 157.385 90.3149 155.562 cv
90.3149 153.938 88.8535 152.774 87.1484 152.774 cv
cp
f
99.0015 158.098 mo
98.1089 158.557 96.9629 158.665 96.584 158.665 cv
94.6084 158.665 93.688 157.141 93.688 155.823 cv
93.688 154.47 94.6353 152.774 96.8364 152.774 cv
97.8018 152.774 98.4419 153.081 98.6313 153.081 cv
98.7129 153.081 98.7852 153.063 98.8394 153.018 cv
98.9653 153.018 li
98.9653 154.48 li
98.7852 154.48 li
98.5415 153.352 97.7749 153 96.9355 153 cv
95.3481 153 94.5361 154.317 94.5361 155.77 cv
94.5361 157.619 95.835 158.44 96.8726 158.44 cv
97.2876 158.44 97.748 158.35 98.2529 158.098 cv
98.2529 156.96 li
98.2529 156.445 98.0723 156.275 97.5313 156.275 cv
97.1973 156.275 li
97.1973 156.112 li
99.6328 156.112 li
99.6328 156.275 li
99.1821 156.302 99.0015 156.456 99.0015 156.844 cv
99.0015 158.098 li
cp
f
104.585 155.995 mo
104.377 155.995 104.242 156.004 104.026 155.978 cv
104.026 153.018 li
104.188 153 104.305 153 104.477 153 cv
105.866 153 106.245 153.649 106.245 154.489 cv
106.245 155.571 105.586 155.995 104.585 155.995 cv
cp
107.634 157.547 mo
106.921 156.834 li
106.497 156.41 106.227 156.157 105.893 155.896 cv
106.633 155.679 107.093 155.111 107.093 154.435 cv
107.093 153.514 106.344 152.828 104.675 152.828 cv
104.088 152.828 103.909 152.837 103.538 152.855 cv
103.168 152.874 102.618 152.91 102.402 152.91 cv
102.402 153.081 li
102.6 153.081 li
103.124 153.081 103.277 153.244 103.277 153.803 cv
103.277 157.601 li
103.277 158.205 103.088 158.35 102.555 158.35 cv
102.402 158.35 li
102.402 158.521 li
104.955 158.521 li
104.955 158.35 li
104.748 158.35 li
104.242 158.35 104.026 158.214 104.026 157.673 cv
104.026 156.148 li
104.17 156.157 104.287 156.167 104.486 156.167 cv
104.729 156.167 104.874 156.157 105.099 156.148 cv
105.315 156.293 105.631 156.555 106.028 156.951 cv
106.624 157.547 li
107.427 158.35 107.833 158.692 109.411 158.621 cv
109.411 158.458 li
108.717 158.412 108.167 158.078 107.634 157.547 cv
cp
f
113.948 155.635 mo
114.715 153.532 li
115.509 155.635 li
113.948 155.635 li
cp
117.087 157.781 mo
115.202 152.774 li
114.417 152.774 li
114.498 152.973 li
112.856 157.456 li
112.568 158.242 112.469 158.341 111.882 158.35 cv
111.882 158.521 li
113.966 158.521 li
113.966 158.35 li
113.822 158.35 li
113.326 158.35 113.091 158.26 113.091 158.016 cv
113.091 157.89 113.208 157.619 113.271 157.447 cv
113.795 156.031 li
115.662 156.031 li
116.267 157.673 li
116.302 157.764 116.366 157.899 116.366 158.043 cv
116.366 158.296 116.176 158.35 115.662 158.35 cv
115.428 158.35 li
115.428 158.521 li
117.908 158.521 li
117.908 158.35 li
117.457 158.35 117.268 158.26 117.087 157.781 cv
cp
f
124.168 158.521 mo
121.868 153.713 li
121.85 153.713 li
121.606 157.772 li
121.579 158.232 121.922 158.332 122.328 158.35 cv
122.328 158.521 li
120.452 158.521 li
120.452 158.35 li
121.11 158.35 121.191 158.205 121.236 157.385 cv
121.453 153.875 li
121.489 153.28 121.471 153.117 120.912 153.081 cv
120.912 152.919 li
122.274 152.919 li
124.448 157.466 li
126.613 152.919 li
127.939 152.919 li
127.939 153.081 li
127.497 153.117 127.326 153.126 127.344 153.434 cv
127.632 157.52 li
127.687 158.35 127.759 158.35 128.417 158.35 cv
128.417 158.521 li
126.099 158.521 li
126.099 158.35 li
126.523 158.35 126.938 158.232 126.902 157.755 cv
126.64 153.713 li
126.622 153.713 li
124.376 158.521 li
124.168 158.521 li
cp
f
134.821 158.521 mo
132.521 153.713 li
132.503 153.713 li
132.259 157.772 li
132.232 158.232 132.575 158.332 132.981 158.35 cv
132.981 158.521 li
131.104 158.521 li
131.104 158.35 li
131.763 158.35 131.844 158.205 131.889 157.385 cv
132.106 153.875 li
132.142 153.28 132.124 153.117 131.565 153.081 cv
131.565 152.919 li
132.927 152.919 li
135.101 157.466 li
137.266 152.919 li
138.592 152.919 li
138.592 153.081 li
138.15 153.117 137.979 153.126 137.997 153.434 cv
138.286 157.52 li
138.339 158.35 138.412 158.35 139.07 158.35 cv
139.07 158.521 li
136.752 158.521 li
136.752 158.35 li
137.176 158.35 137.591 158.232 137.555 157.755 cv
137.293 153.713 li
137.275 153.713 li
135.029 158.521 li
134.821 158.521 li
cp
f
144.239 158.521 mo
142.046 158.521 li
142.046 158.35 li
142.606 158.322 142.723 158.178 142.723 157.574 cv
142.723 153.73 li
142.723 153.244 142.552 153.108 142.046 153.081 cv
142.046 152.91 li
144.239 152.91 li
144.239 153.081 li
143.67 153.081 143.472 153.207 143.472 153.813 cv
143.472 157.637 li
143.472 158.169 143.616 158.35 144.239 158.35 cv
144.239 158.521 li
cp
f
153.151 158.584 mo
148.479 153.694 li
148.479 157.565 li
148.479 158.214 148.623 158.35 149.389 158.35 cv
149.389 158.521 li
147.296 158.521 li
147.296 158.35 li
147.332 158.35 li
147.892 158.35 148.072 158.16 148.072 157.745 cv
148.072 153.307 li
147.865 153.162 147.63 153.091 147.314 153.081 cv
147.314 152.91 li
148.73 152.91 li
152.98 157.339 li
152.98 153.748 li
152.98 153.198 152.817 153.1 152.095 153.081 cv
152.095 152.91 li
154.207 152.91 li
154.207 153.081 li
153.53 153.081 153.386 153.198 153.386 153.55 cv
153.386 158.584 li
153.151 158.584 li
cp
f
162.568 158.098 mo
161.675 158.557 160.53 158.665 160.151 158.665 cv
158.175 158.665 157.255 157.141 157.255 155.823 cv
157.255 154.47 158.202 152.774 160.403 152.774 cv
161.369 152.774 162.009 153.081 162.199 153.081 cv
162.28 153.081 162.352 153.063 162.406 153.018 cv
162.532 153.018 li
162.532 154.48 li
162.352 154.48 li
162.108 153.352 161.341 153 160.502 153 cv
158.915 153 158.103 154.317 158.103 155.77 cv
158.103 157.619 159.402 158.44 160.439 158.44 cv
160.854 158.44 161.314 158.35 161.82 158.098 cv
161.82 156.96 li
161.82 156.445 161.639 156.275 161.098 156.275 cv
160.764 156.275 li
160.764 156.112 li
163.2 156.112 li
163.2 156.275 li
162.749 156.302 162.568 156.456 162.568 156.844 cv
162.568 158.098 li
cp
f
80.0767 166.305 mo
81.6748 161.924 li
83.3296 166.305 li
80.0767 166.305 li
cp
97.1143 160.626 mo
97.1143 160.983 li
98.6187 161.021 98.957 161.229 98.957 162.375 cv
98.957 169.859 li
90.0996 160.626 li
87.1475 160.626 li
87.1475 160.983 li
87.8062 161.002 88.2949 161.152 88.7275 161.453 cv
88.7275 170.705 li
88.7275 171.411 88.4761 171.805 87.749 171.925 cv
87.2065 171.83 86.9072 171.541 86.6206 170.78 cv
82.6904 160.344 li
81.0547 160.344 li
81.2236 160.758 li
77.8013 170.104 li
77.2729 171.54 77.0488 171.875 76.1743 171.947 cv
77.4248 169.577 li
77.0864 169.577 li
75.9014 171.213 75.563 171.646 74.4536 171.646 cv
71.6895 171.646 li
71.144 171.646 70.937 171.457 70.937 170.95 cv
70.937 162.281 li
70.937 161.115 71.2568 160.983 72.4795 160.983 cv
73.1748 160.983 li
73.1748 160.626 li
67.6279 160.626 li
67.6279 160.983 li
67.8906 160.983 li
69.0757 160.983 69.3765 161.396 69.3765 162.395 cv
69.3765 170.724 li
69.3765 171.684 69.0566 171.966 68.1914 171.966 cv
67.5713 171.966 li
67.5713 172.322 li
75.7705 172.322 li
75.9771 172.322 li
80.1143 172.322 li
80.1143 171.966 li
79.813 171.966 li
78.7793 171.966 78.29 171.777 78.29 171.27 cv
78.29 171.007 78.5347 170.442 78.666 170.085 cv
79.7573 167.133 li
83.6489 167.133 li
84.9092 170.556 li
84.9849 170.743 85.1162 171.024 85.1162 171.326 cv
85.1162 171.853 84.7212 171.966 83.6489 171.966 cv
83.1602 171.966 li
83.1602 172.322 li
87.1099 172.322 li
88.332 172.322 li
91.4727 172.322 li
91.4727 171.966 li
89.874 171.966 89.5732 171.684 89.5732 170.329 cv
89.5732 162.263 li
99.314 172.454 li
99.8027 172.454 li
99.8027 161.962 li
99.8027 161.229 100.104 160.983 101.514 160.983 cv
101.514 160.626 li
97.1143 160.626 li
cp
f
112.102 171.438 mo
110.24 172.398 107.852 172.623 107.063 172.623 cv
102.944 172.623 101.026 169.445 101.026 166.7 cv
101.026 163.88 103 160.344 107.589 160.344 cv
109.601 160.344 110.936 160.983 111.331 160.983 cv
111.5 160.983 111.65 160.946 111.764 160.853 cv
112.026 160.853 li
112.026 163.898 li
111.65 163.898 li
111.143 161.548 109.544 160.814 107.795 160.814 cv
104.486 160.814 102.794 163.56 102.794 166.587 cv
102.794 170.442 105.501 172.153 107.664 172.153 cv
108.529 172.153 109.488 171.966 110.541 171.438 cv
110.541 169.069 li
110.541 167.998 110.165 167.641 109.037 167.641 cv
108.341 167.641 li
108.341 167.303 li
113.418 167.303 li
113.418 167.641 li
112.478 167.696 112.102 168.017 112.102 168.824 cv
112.102 171.438 li
cp
f
126.657 160.626 mo
126.657 160.983 li
125.397 161.002 124.946 161.51 124.946 162.714 cv
124.946 167.791 li
124.946 170.123 123.46 172.623 119.38 172.623 cv
115.789 172.623 113.946 170.574 113.946 167.885 cv
113.946 162.395 li
113.946 161.19 113.607 161.002 112.328 160.983 cv
112.328 160.626 li
117.161 160.626 li
117.161 160.983 li
116.992 160.983 li
115.958 160.983 115.506 161.266 115.506 162.356 cv
115.506 167.584 li
115.506 170.123 116.992 171.646 119.793 171.646 cv
121.918 171.646 124.081 170.762 124.081 167.565 cv
124.081 163.184 li
124.081 161.378 123.799 161.059 122.238 160.983 cv
122.238 160.626 li
126.657 160.626 li
cp
f
128.163 166.305 mo
129.761 161.924 li
131.416 166.305 li
128.163 166.305 li
cp
134.707 170.78 mo
130.776 160.344 li
129.141 160.344 li
129.31 160.758 li
125.887 170.104 li
125.286 171.74 125.079 171.946 123.856 171.966 cv
123.856 172.322 li
128.2 172.322 li
128.2 171.966 li
127.899 171.966 li
126.865 171.966 126.376 171.777 126.376 171.27 cv
126.376 171.007 126.621 170.442 126.752 170.085 cv
127.843 167.133 li
131.735 167.133 li
132.996 170.556 li
133.07 170.743 133.202 171.024 133.202 171.326 cv
133.202 171.853 132.808 171.966 131.735 171.966 cv
131.247 171.966 li
131.247 172.322 li
136.418 172.322 li
136.418 171.966 li
135.478 171.966 135.083 171.777 134.707 170.78 cv
cp
f
146.028 171.438 mo
144.166 172.398 141.778 172.623 140.988 172.623 cv
136.87 172.623 134.952 169.445 134.952 166.7 cv
134.952 163.88 136.926 160.344 141.515 160.344 cv
143.527 160.344 144.862 160.983 145.257 160.983 cv
145.426 160.983 145.576 160.946 145.689 160.853 cv
145.953 160.853 li
145.953 163.898 li
145.576 163.898 li
145.069 161.548 143.47 160.814 141.721 160.814 cv
138.412 160.814 136.719 163.56 136.719 166.587 cv
136.719 170.442 139.427 172.153 141.59 172.153 cv
142.455 172.153 143.414 171.966 144.467 171.438 cv
144.467 169.069 li
144.467 167.998 144.091 167.641 142.962 167.641 cv
142.267 167.641 li
142.267 167.303 li
147.344 167.303 li
147.344 167.641 li
146.404 167.696 146.028 168.017 146.028 168.824 cv
146.028 171.438 li
cp
f
157.537 162.563 mo
157.537 161.51 158.402 160.796 159.643 160.796 cv
160.94 160.796 162.145 161.661 162.671 163.015 cv
162.99 163.015 li
162.671 160.626 li
162.37 160.626 li
162.257 160.776 162.182 160.814 162.032 160.814 cv
161.374 160.814 161.053 160.344 159.474 160.344 cv
157.556 160.344 156.127 161.51 156.127 163.071 cv
156.127 166.361 162.163 167.189 162.163 169.897 cv
162.163 171.382 160.828 172.116 159.568 172.116 cv
158.101 172.116 156.785 171.138 156.39 169.465 cv
156.033 169.465 li
156.041 169.521 li
155.919 169.521 li
155.449 171.138 155.055 171.646 153.738 171.646 cv
150.842 171.646 li
150.146 171.646 149.827 171.477 149.827 170.611 cv
149.827 166.605 li
153.004 166.605 li
153.775 166.605 154.133 166.757 154.284 168.091 cv
154.641 168.091 li
154.641 164.519 li
154.284 164.519 li
154.189 165.609 153.87 165.929 153.192 165.929 cv
149.827 165.929 li
149.827 161.303 li
153.794 161.303 li
154.472 161.303 154.941 161.642 155.186 163.239 cv
155.524 163.239 li
155.374 160.626 li
146.348 160.626 li
146.348 160.983 li
146.762 160.983 li
148.021 160.983 148.266 161.435 148.266 162.487 cv
148.266 170.423 li
148.266 171.552 148.002 171.966 146.498 171.966 cv
145.972 171.966 li
145.972 172.322 li
155.957 172.322 li
156.163 170.406 li
156.428 172.322 li
156.748 172.322 li
156.823 172.21 156.954 172.116 157.124 172.116 cv
157.387 172.116 158.703 172.623 159.737 172.623 cv
161.938 172.623 163.573 171.251 163.573 169.408 cv
163.573 165.948 157.537 165.233 157.537 162.563 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
%ADOBeginPageMarks
1.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
false sop
/0 
<<
/Name (All)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
@
.25 lw
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
1 /0 /CSD get_res sepcs
1 sep
@
true sop
.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPP+Courier /Courier findfont ct_VMDictPut/RJHRPP+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 18{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c 5{/.notdef}rp /i /.notdef /k /l 3{/.notdef}rp /p 7{/.notdef}rp /x 40{/.notdef}rp /degree 94{/.notdef}rp]RJHRPP+Courier nfRJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp.3996 lw
@
1 0 0 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 .05 0 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 1 0 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 .05 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 1 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 0 .05 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 0 1 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPP+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s 4{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPP+Courier nfRJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan) false chp@
1 0 0 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan)sh0 .05 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPP+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPP+Courier nfRJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta) false chp@
0 1 0 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta)sh0 0 .05 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPP+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPP+Courier nfRJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow) false chp@
0 0 1 0 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow)sh0 0 0 .05 nzopmsc
%%IncludeResource: font Courier
/RJHRPP+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 7{/.notdef}rp /B /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPP+Courier nfRJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black) false chp@
0 0 0 1 nzopmsc
RJHRPP+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black)sh%ADOEndPageMarks
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/RJHRPP+Courier*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
Adobe_AGM_OnHost_Seps/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 1 2
%%PlateColor: Magenta
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1) /PlateColor (Magenta)]
[/TrimBox [36 36 180 324]]
[/BleedBox [27 27 189 333]]
]xpdfm
/Magenta /m Adobe_AGM_OnHost_Seps /plate_setup gx
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_AGM_Core begin
60 45 getspotfunction setscreen
end
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[0 -1 1 0 0 360 ]ct
gsave
np
gsave
27 27 mo
27 189 li
333 189 li
333 27 li
cp
clp
333 189 mo
27 189 li
27 27 li
333 27 li
333 189 li
cp
false sop
/2 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
82.6406 84.3184 mo
92.2529 78.4033 96.1006 76.8115 103.478 66.1992 cv
105.608 63.1338 107.749 73.9648 107.749 73.9648 cv
88.335 92.7305 li
88.335 92.7305 79.2754 86.3896 82.6406 84.3184 cv
cp
.788724 1 .346899 .303899 cmyk
f
64.4102 48.5859 mo
65.375 48.5859 66.5801 48.1299 66.5801 48.1299 cv
65.3213 51.3721 li
63.1694 52.7061 li
63.1694 52.7061 61.8345 49.4453 62.0303 49.0791 cv
62.2261 48.7129 64.4102 48.5859 64.4102 48.5859 cv
cp
.890898 .318517 1 .249577 cmyk
f
70.251 43.335 mo
68.9111 43.709 62.3564 48.2109 62.0483 49.0146 cv
61.7402 49.8184 68.5361 47.5684 68.8579 48.0498 cv
83.1113 56.8379 84.8877 62.8223 96.0415 79.5527 cv
96.271 79.8975 99.1641 76.7109 99.0117 76.498 cv
97.0845 73.8008 85.5762 53.0859 70.251 43.335 cv
cp
.627649 0 1 0 cmyk
f
85.2705 61.332 mo
86.4282 62.2568 74.6611 68.7266 72.25 83.6768 cv
71.3101 89.502 67.7329 72.3613 70.793 66.8965 cv
73.853 61.4326 80.4482 57.4736 85.2705 61.332 cv
cp
.890898 .318517 1 .249577 cmyk
f
84.3062 60.6885 mo
73.5356 64.0645 72.1543 76.4102 71.6719 84.2861 cv
71.4136 88.5078 77.7153 68.4053 82.8599 65.3506 cv
88.667 61.9023 84.3062 60.6885 84.3062 60.6885 cv
cp
.627649 0 1 0 cmyk
f
146.059 68.7871 mo
130.563 55.5166 110.559 59.4111 104.125 65.2939 cv
99.5952 69.4355 103.913 73.7578 97.6538 79.6592 cv
93.124 83.9297 84.0645 81.8604 80.5698 86.1309 cv
71.936 96.6836 73.4497 114.177 82.0293 128.027 cv
82.083 127.959 82.1353 127.892 82.1904 127.822 cv
82.8628 126.994 84.0542 125.467 85.7632 123.24 cv
86.1763 122.672 86.6948 120.6 87.3159 117.028 cv
87.5742 115.476 88.04 114.311 88.7139 113.533 cv
90.8877 115.009 li
95.1323 108.951 97.4111 105.718 97.7212 105.302 cv
100.568 100.799 101.993 97.3311 101.993 94.8965 cv
98.8862 96.5537 96.1685 97.5635 93.8389 97.9258 cv
93.8389 97.1484 li
93.1401 96.3721 li
93.8389 93.498 li
96.1685 91.6875 100.387 89.8486 106.497 87.9854 cv
112.449 86.1738 117.031 85.2676 120.241 85.2676 cv
123.503 85.2676 126.065 86.1484 127.929 87.9082 cv
129.793 89.668 130.725 92.1787 130.725 95.4404 cv
130.725 104.863 123.554 112.137 109.214 117.261 cv
106.314 118.298 101.189 119.798 93.8389 121.765 cv
91.7153 122.335 89.9297 123.706 88.481 125.881 cv
88.1699 126.347 87.1606 128.314 85.4526 131.782 cv
85.3389 132.015 85.2246 132.234 85.1094 132.447 cv
97.7778 148.663 121.042 157.311 148.819 137.469 cv
151.717 135.398 154.085 132.854 156.012 130.126 cv
155.107 130.126 li
154.9 130.126 152.363 129.737 147.498 128.961 cv
145.115 128.547 143.33 128.34 142.14 128.34 cv
140.016 128.34 137.531 128.6 134.685 129.116 cv
128.162 130.255 124.149 130.824 122.648 130.824 cv
119.231 130.824 117.523 129.997 117.523 128.34 cv
117.523 127.513 118.325 125.984 119.93 123.758 cv
120.5 123.033 121.612 121.584 123.27 119.409 cv
131.293 108.591 137.325 96.2949 141.363 82.5244 cv
142.761 77.8135 144.314 75.4561 146.022 75.4561 cv
146.798 75.4561 147.536 75.9111 148.235 76.8154 cv
148.934 77.7217 149.284 78.5898 149.284 79.418 cv
149.284 80.2979 147.653 84.0508 144.392 90.6768 cv
142.373 94.8193 139.111 101.188 134.607 109.781 cv
127.463 123.448 li
130.775 124.225 134.502 124.612 138.645 124.612 cv
141.078 124.612 144.714 124.432 149.556 124.069 cv
153.95 123.74 157.349 123.561 159.76 123.53 cv
162.842 116.733 163.793 110.147 163.793 107.676 cv
163.793 103.488 164.07 84.2139 146.059 68.7871 cv
cp
.547906 .935973 0 0 cmyk
f
114.34 110.505 mo
122.622 105.535 126.764 100.902 126.764 96.6055 cv
126.764 94.2246 125.936 92.3867 124.279 91.0908 cv
122.83 89.9531 120.862 89.3838 118.377 89.3838 cv
116.306 89.3838 114.288 89.7715 112.32 90.5479 cv
110.042 91.4795 108.489 92.7227 107.662 94.2754 cv
106.936 96.0361 106.211 97.7695 105.487 99.4785 cv
99.5078 107.709 li
97.333 110.868 95.6763 113.818 94.5381 116.563 cv
95.2368 117.339 li
95.9355 117.339 li
100.595 117.339 106.729 115.061 114.34 110.505 cv
cp
f
126.192 146.653 mo
131.935 146.498 107.923 155.633 99.8726 134.766 cv
97.9409 129.759 107.721 147.148 126.192 146.653 cv
cp
.788724 1 .346899 .303899 cmyk
f
89.5435 107.787 mo
90.6699 113.42 77.5928 91.3076 96.791 79.8311 cv
101.398 77.0781 85.9194 89.668 89.5435 107.787 cv
cp
f
229.947 80.5176 mo
241.903 80.5176 li
261.241 121.04 li
280.5 80.5176 li
292.295 80.5176 li
292.295 82.041 li
288.364 82.3623 286.839 82.4434 286.999 85.1709 cv
289.567 121.521 li
290.049 128.902 290.691 128.902 296.549 128.902 cv
296.549 130.428 li
275.926 130.428 li
275.926 128.902 li
279.698 128.902 283.389 127.859 283.068 123.606 cv
280.741 87.6582 li
280.581 87.6582 li
260.6 130.428 li
258.754 130.428 li
238.292 87.6582 li
238.132 87.6582 li
235.966 123.768 li
235.725 127.859 238.774 128.743 242.385 128.902 cv
242.385 130.428 li
225.694 130.428 li
225.694 128.902 li
231.552 128.902 232.275 127.619 232.676 120.317 cv
234.602 89.1025 li
234.923 83.8066 234.922 82.3623 229.947 82.041 cv
224.572 82.1221 222.806 84.2891 222.806 89.4238 cv
222.806 111.09 li
222.806 121.04 216.467 131.711 199.054 131.711 cv
183.728 131.711 175.864 122.965 175.864 111.49 cv
175.864 88.0596 li
175.864 82.9248 174.42 82.1221 168.963 82.041 cv
168.963 80.5176 li
189.585 80.5176 li
189.585 82.041 li
188.864 82.041 li
184.45 82.041 182.525 83.2461 182.525 87.8994 cv
182.525 110.206 li
182.525 121.04 188.864 127.539 200.82 127.539 cv
209.887 127.539 219.115 123.768 219.115 110.127 cv
219.115 91.4307 li
219.115 83.7266 217.911 82.3623 211.251 82.041 cv
211.251 80.5176 li
229.947 80.5176 li
cp
0 0 0 0 cmyk
f
168.501 162.27 mo
168.501 168.159 173.276 172.935 179.165 172.935 cv
185.056 172.935 189.832 168.159 189.832 162.27 cv
189.832 156.379 185.056 151.604 179.165 151.604 cv
173.276 151.604 168.501 156.379 168.501 162.27 cv
cp
f
189.83 162.031 mo
189.83 162.079 189.64 162.24 189.438 162.362 cv
189.433 162.363 189.428 162.367 189.422 162.37 cv
189.148 162.521 188.758 162.661 188.273 162.787 cv
187.775 162.919 187.16 163.038 186.485 163.142 cv
185.809 163.245 185.056 163.322 184.246 163.395 cv
184.246 163.393 184.246 163.396 184.246 163.395 cv
183.208 163.487 182.581 163.527 181.754 163.567 cv
180.874 163.605 179.838 163.625 179.061 163.622 cv
179.061 163.741 179.061 163.858 179.061 163.977 cv
179.061 164.81 179.039 165.604 179.042 166.351 cv
179.064 170.445 179.058 170.444 179.179 172.935 cv
185.07 172.935 189.838 168.158 189.838 162.27 cv
189.838 162.27 189.83 162.114 189.83 162.031 cv
0 .18 1 0 cmyk
f
179.009 163.977 mo
179.01 164.81 179.013 165.604 179.016 166.353 cv
180.725 167.971 180.725 167.971 181.439 168.684 cv
181.626 167.33 181.731 165.714 181.729 163.921 cv
181.729 163.805 181.728 163.686 181.727 163.569 cv
180.648 163.611 179.935 163.624 179.008 163.622 cv
179.008 163.739 179.009 163.859 179.009 163.977 cv
0 0 0 1 cmyk
f
182.922 170.507 mo
182.548 169.898 182.208 169.501 181.436 168.69 cv
181.074 171.287 180.427 172.886 179.631 172.921 cv
179.697 172.918 179.802 172.912 179.869 172.908 cv
179.955 172.901 180.059 172.893 180.142 172.886 cv
181.246 172.787 182.195 171.941 182.922 170.507 cv
f
184.117 166.151 mo
184.12 166.138 183.502 169.356 182.923 170.507 cv
183.256 171.15 183.272 171.406 183.137 171.83 cv
184.171 171.044 185.026 169.858 185.614 168.391 cv
185.236 167.623 184.981 167.214 184.117 166.151 cv
f
181.063 172.768 mo
181.295 172.727 181.283 172.722 181.712 172.626 cv
181.968 172.554 li
182.756 172.309 182.894 172.184 183.139 171.819 cv
182.437 172.35 181.685 172.674 180.845 172.804 cv
181.063 172.768 li
cp
f
185.805 170.15 mo
187.342 168.408 188.281 165.948 188.278 163.142 cv
188.278 163.022 188.275 162.905 188.273 162.787 cv
187.776 162.919 187.16 163.038 186.485 163.142 cv
186.495 163.26 186.499 163.38 186.499 163.498 cv
186.501 165.323 186.191 166.981 185.627 168.384 cv
185.945 169.199 185.949 169.539 185.805 170.15 cv
f
184.247 163.395 mo
183.208 163.486 182.555 163.526 181.727 163.567 cv
183.189 165.088 183.499 165.443 184.117 166.151 cv
184.205 165.398 184.25 164.598 184.25 163.761 cv
184.249 163.641 184.248 163.515 184.247 163.395 cv
f
176.827 152.154 mo
177.422 151.913 177.993 151.666 179.145 151.6 cv
178.364 151.671 177.551 151.888 176.827 152.154 cv
f
186.308 163.14 mo
185.752 163.067 185.288 162.128 185.532 161.173 cv
184.751 161.714 183.872 160.604 184 159.576 cv
184.068 159.032 184.424 158.551 185.046 158.773 cv
184.793 157.906 184.477 157.084 184.107 156.328 cv
183.556 156.398 182.951 156.456 182.309 156.502 cv
182.879 157.363 182.321 158.163 181.525 158.037 cv
180.949 157.943 180.409 157.339 180.56 156.618 cv
180.093 156.943 179.134 156.814 179.044 155.792 cv
179.018 157.964 179.005 160.737 179.009 163.622 cv
181.842 163.65 185.164 163.349 186.485 163.142 cv
186.485 163.142 186.485 163.146 186.485 163.142 cv
186.431 163.146 186.359 163.147 186.308 163.14 cv
0 1 .66 .2 cmyk
f
172.275 165.282 mo
173.067 164.975 174.064 166.346 173.716 167.261 cv
173.555 167.684 173.138 167.802 172.701 167.547 cv
172.936 168.347 173.242 169.079 173.608 169.727 cv
174.169 169.803 174.8 169.869 175.488 169.922 cv
174.935 169.241 175.379 168.683 176.117 168.721 cv
176.751 168.753 177.589 169.279 177.41 170.001 cv
177.98 169.743 178.943 169.953 179.061 170.696 cv
179.032 169.098 179.015 166.748 179.01 163.977 cv
179.01 163.854 179.009 163.743 179.008 163.622 cv
178.108 163.625 177.196 163.591 176.289 163.553 cv
174.359 163.473 173.049 163.362 171.437 163.087 cv
171.434 163.094 171.437 163.084 171.437 163.087 cv
172.262 163.367 172.489 164.599 172.275 165.282 cv
f
184.169 155.459 mo
184.169 155.459 li
184.172 155.459 184.225 155.462 184.228 155.462 cv
184.228 155.462 184.23 155.462 184.232 155.462 cv
184.336 155.462 184.433 155.422 184.527 155.406 cv
185.138 155.294 186.523 154.959 186.523 154.558 cv
186.523 154.558 187.065 155.101 187.463 155.855 cv
187.51 155.938 187.542 156.013 187.584 156.132 cv
187.632 156.267 187.662 156.421 187.656 156.496 cv
187.638 156.727 187.492 156.729 187.34 156.662 cv
187.324 156.656 187.308 156.649 187.291 156.641 cv
186.743 156.395 186.563 155.892 186.458 155.686 cv
186.179 155.772 185.718 155.972 185.334 156.048 cv
185.29 156.057 185.208 156.076 185.162 156.083 cv
185.614 156.828 186.044 157.715 186.353 158.574 cv
186.89 158.021 187.731 159.046 187.771 160.035 cv
187.796 160.616 187.535 161.134 187.004 160.946 cv
187.428 161.733 187.292 162.889 186.485 163.143 cv
186.353 160.556 185.913 158.31 184.209 155.462 cv
184.109 155.462 li
f
184.223 155.396 mo
184.223 155.396 li
182.865 153.321 181.785 152.6 180.407 152.055 cv
180.133 151.946 179.196 151.596 179.148 151.584 cv
179.152 151.601 li
179.394 151.955 179.881 152.172 179.986 152.202 cv
179.956 152.332 179.977 152.591 180.426 152.915 cv
180.497 152.967 180.562 153.006 180.627 153.039 cv
181.321 153.403 181.475 153.119 181.507 153.007 cv
181.512 153.004 181.515 153.002 181.52 152.998 cv
181.73 153.154 182.142 153.484 182.597 154.002 cv
182.86 154.316 183.107 154.591 183.293 154.866 cv
182.865 154.92 182.298 154.97 181.735 155.011 cv
181.704 154.33 181.213 153.991 180.903 153.876 cv
180.228 153.625 180.005 154.42 180.299 154.979 cv
179.765 154.69 179.146 154.947 179.058 155.792 cv
181.17 155.779 182.686 155.688 184.238 155.459 cv
184.238 155.333 li
f
184.341 153.526 mo
184.335 153.516 184.329 153.479 184.336 153.451 cv
184.344 153.424 184.367 153.401 184.367 153.401 cv
184.367 153.401 184.377 153.373 184.418 153.35 cv
184.527 153.288 184.849 153.256 185.741 153.872 cv
183.892 152.418 181.901 151.82 180.211 151.654 cv
179.973 151.627 179.531 151.608 179.531 151.608 cv
180.067 151.656 180.434 151.76 180.52 151.79 cv
180.589 151.813 180.643 151.838 180.676 151.838 cv
180.679 151.838 180.681 151.838 180.681 151.838 cv
180.788 151.838 180.911 151.911 181.062 151.954 cv
181.227 152.003 181.501 152.124 181.747 152.239 cv
181.993 152.355 182.356 152.624 182.358 152.77 cv
182.302 152.804 182.284 152.818 182.119 152.773 cv
182.75 153.225 183.656 154.074 184.19 154.699 cv
184.557 154.629 185.104 154.551 185.357 154.467 cv
185.34 154.484 184.523 153.873 184.341 153.526 cv
f
173.498 170.317 mo
172.583 170.15 172.057 170.013 171.706 169.834 cv
171.648 169.803 171.629 169.803 171.615 169.8 cv
171.608 169.8 171.096 169.273 170.644 168.688 cv
170.318 168.263 170.04 167.782 170.011 167.737 cv
170.015 167.744 170.085 167.737 170.128 167.753 cv
170.608 167.912 171.355 169.221 171.365 169.234 cv
171.66 169.345 172.047 169.449 172.513 169.543 cv
172.075 168.882 171.709 168.142 171.426 167.334 cv
170.76 167.67 169.912 165.911 170.18 165.17 cv
170.236 165.02 170.412 164.704 170.862 165.045 cv
170.523 164.262 170.615 163.086 171.436 163.088 cv
171.453 165.681 171.808 167.914 173.498 170.317 cv
f
179.046 170.845 mo
178.954 171.216 178.436 171.567 177.703 171.269 cv
178.044 171.722 177.748 172.112 177.145 172.003 cv
176.678 171.918 176.119 171.541 176.076 171.164 cv
175.496 171.12 174.967 171.064 174.496 170.999 cv
174.944 171.519 175.442 171.942 175.98 172.259 cv
176.046 172.232 176.145 172.238 176.464 172.352 cv
176.873 172.493 177.262 172.686 177.671 172.831 cv
177.584 172.818 li
177.275 172.77 177.199 172.754 177.027 172.72 cv
176.24 172.565 174.871 172.118 173.498 170.317 cv
175.153 170.57 176.767 170.683 179.063 170.697 cv
179.057 170.741 179.056 170.803 179.046 170.845 cv
f
179.145 151.6 mo
173.426 151.6 168.612 156.268 168.502 162.063 cv
168.506 162.074 li
168.51 162.092 168.563 162.198 168.788 162.339 cv
169.013 162.48 169.345 162.629 169.783 162.742 cv
170.325 162.883 170.894 162.995 171.425 163.086 cv
171.434 163.088 li
173.049 163.361 174.359 163.473 176.289 163.554 cv
177.196 163.591 178.109 163.625 179.008 163.622 cv
179.006 163.078 179.004 159.98 179.029 156.989 cv
179.031 156.602 179.037 156.198 179.042 155.793 cv
179.065 153.846 179.107 151.86 179.145 151.6 cv
0 .18 1 0 cmyk
f
184.254 171.646 mo
183.65 171.984 183.534 171.993 182.723 172.327 cv
182.498 172.42 182.287 172.475 182.055 172.539 cv
183.494 172.152 185.46 170.542 185.807 170.148 cv
185.631 170.536 185.5 170.795 185.076 171.136 cv
184.958 171.231 184.449 171.537 184.254 171.646 cv
0 0 0 1 cmyk
f
169.783 162.742 mo
169.338 162.634 169.013 162.48 168.788 162.339 cv
168.906 158.479 171.051 155.056 174.174 153.18 cv
173.436 153.835 173.107 154.226 172.734 155.112 cv
170.982 157.125 169.863 159.831 169.783 162.742 cv
f
174.184 153.174 mo
174.965 152.609 175.413 152.197 176.652 151.9 cv
177.521 151.692 178.283 151.603 179.145 151.6 cv
177.348 151.677 175.657 152.291 174.184 153.174 cv
f
173.614 163.382 mo
172.835 163.306 172.098 163.202 171.436 163.087 cv
171.479 161.154 171.882 159.3 172.583 157.657 cv
172.854 158.736 173.084 159.316 173.845 160.595 cv
173.708 161.496 173.628 162.432 173.614 163.382 cv
f
179.043 155.793 mo
179.03 156.968 179.021 158.177 179.019 159.108 cv
179.015 160.031 179.01 160.7 179.01 160.83 cv
177.962 159.729 177.399 159.11 176.633 158.137 cv
177.149 154.82 178.079 152.201 179.145 151.6 cv
179.106 151.915 179.065 153.798 179.043 155.793 cv
f
175.299 155.668 mo
174.628 157.079 174.129 158.774 173.851 160.594 cv
174.504 161.563 174.907 162.129 176.206 163.55 cv
176.22 161.643 176.375 159.793 176.634 158.129 cv
175.853 157.066 175.605 156.56 175.299 155.668 cv
f
189.423 162.37 mo
189.427 162.487 189.428 162.605 189.428 162.724 cv
189.435 166.495 187.595 169.632 184.711 171.368 cv
184.637 171.424 li
185.992 170.594 187.702 169.188 188.791 166.861 cv
189.957 164.568 189.83 162.031 189.83 162.031 cv
189.772 162.136 189.602 162.268 189.423 162.37 cv
f
176.827 152.154 mo
175.271 152.765 173.871 153.81 172.736 155.11 cv
172.427 156.081 172.427 156.622 172.583 157.657 cv
173.276 156.041 174.241 154.64 175.384 153.592 cv
175.737 152.982 175.956 152.618 176.827 152.154 cv
f
175.296 155.675 mo
175.103 154.803 175.087 154.359 175.38 153.601 cv
176.494 152.576 177.777 151.813 179.145 151.6 cv
177.647 152.001 176.292 153.57 175.296 155.675 cv
f
228.265 167.341 mo
227.827 167.341 227.542 167.36 227.083 167.305 cv
227.083 161.084 li
227.427 161.045 227.674 161.045 228.037 161.045 cv
230.972 161.045 231.775 162.411 231.775 164.175 cv
231.775 166.45 230.382 167.341 228.265 167.341 cv
cp
215.356 166.56 mo
216.969 162.168 li
218.638 166.56 li
215.356 166.56 li
cp
234.681 170.6 mo
233.186 169.106 li
232.301 168.219 231.737 167.69 231.03 167.135 cv
232.583 166.679 233.542 165.483 233.542 164.062 cv
233.542 162.126 231.981 160.678 228.457 160.678 cv
227.216 160.678 226.838 160.698 226.066 160.737 cv
225.292 160.771 224.133 160.848 223.679 160.848 cv
223.679 161.216 li
224.096 161.216 li
225.197 161.216 225.52 161.557 225.52 162.733 cv
225.52 170.706 li
225.52 171.97 225.12 172.271 224.001 172.271 cv
223.685 172.271 li
222.737 172.271 222.337 172.082 221.958 171.077 cv
217.993 160.572 li
216.341 160.572 li
216.513 160.988 li
213.059 170.396 li
212.453 172.043 212.244 172.253 211.011 172.271 cv
209.635 172.271 209.484 172.267 209.37 170.525 cv
208.763 161.926 li
208.724 161.28 209.085 161.262 210.015 161.186 cv
210.015 160.845 li
207.225 160.845 li
202.673 170.41 li
198.1 160.845 li
195.225 160.845 li
195.225 161.186 li
196.403 161.262 196.441 161.604 196.364 162.856 cv
195.91 170.239 li
195.815 171.968 195.644 172.271 194.258 172.271 cv
194.258 172.639 li
198.214 172.639 li
198.214 172.271 li
197.361 172.233 196.633 172.025 196.69 171.057 cv
197.208 162.515 li
197.246 162.515 li
202.084 172.639 li
202.52 172.639 li
207.244 162.515 li
207.283 162.515 li
207.832 171.019 li
207.908 172.025 207.036 172.271 206.145 172.271 cv
206.145 172.639 li
211.021 172.639 li
215.395 172.639 li
215.395 172.271 li
215.09 172.271 li
214.046 172.271 213.554 172.082 213.554 171.569 cv
213.554 171.305 213.8 170.735 213.933 170.377 cv
215.033 167.403 li
218.961 167.403 li
220.231 170.851 li
220.308 171.04 220.441 171.325 220.441 171.627 cv
220.441 172.158 220.042 172.271 218.961 172.271 cv
218.467 172.271 li
218.467 172.639 li
223.679 172.639 li
223.685 172.639 li
229.049 172.639 li
229.049 172.271 li
228.609 172.271 li
227.542 172.271 227.083 171.988 227.083 170.858 cv
227.083 167.671 li
227.389 167.69 227.636 167.709 228.057 167.709 cv
228.57 167.709 228.875 167.69 229.351 167.671 cv
229.81 167.973 230.478 168.522 231.317 169.35 cv
232.565 170.594 li
234.245 172.278 235.098 172.998 238.419 172.847 cv
238.419 172.506 li
236.958 172.412 235.801 171.713 234.681 170.6 cv
cp
0 0 0 0 cmyk
f
257.667 169.867 mo
256.472 171.525 256.13 171.962 255.01 171.962 cv
252.222 171.962 li
251.672 171.962 251.463 171.772 251.463 171.261 cv
251.463 162.523 li
251.463 161.349 251.785 161.217 253.02 161.217 cv
253.721 161.217 li
253.721 160.849 li
248.226 160.849 li
248.135 160.849 li
243.95 160.849 li
243.95 161.217 li
245.164 161.217 245.522 161.538 244.916 162.578 cv
242.247 167.123 li
239.203 162.446 li
238.631 161.576 238.725 161.217 240.216 161.217 cv
240.216 160.849 li
235.17 160.849 li
235.17 161.217 li
236.399 161.252 236.834 161.519 237.76 162.977 cv
241.155 168.239 li
241.155 170.908 li
241.155 171.836 240.809 172.271 239.623 172.271 cv
239.259 172.271 li
239.259 172.641 li
244.48 172.641 li
244.48 172.271 li
244.234 172.271 li
243.079 172.271 242.718 171.874 242.718 170.871 cv
242.718 168.03 li
245.862 162.711 li
246.393 161.82 246.941 161.31 248.226 161.217 cv
248.4 161.217 li
249.595 161.217 249.898 161.634 249.898 162.638 cv
249.898 171.021 li
249.898 171.988 249.576 172.271 248.704 172.271 cv
248.077 172.271 li
248.077 172.639 li
256.547 172.639 li
258.008 169.867 li
257.667 169.867 li
cp
f
294.644 170.737 mo
293.465 171.911 292.404 172.271 289.857 172.271 cv
288.357 172.271 288.3 172.007 288.3 171.231 cv
288.3 161.121 li
288.527 161.103 289.041 161.045 289.819 161.045 cv
292.479 161.045 293.828 161.708 294.703 162.579 cv
295.822 163.697 296.221 165.249 296.221 166.648 cv
296.221 168.6 295.348 170.056 294.644 170.737 cv
cp
261.914 166.56 mo
263.527 162.168 li
265.197 166.56 li
261.914 166.56 li
cp
290.769 160.678 mo
289.782 160.678 288.623 160.698 287.584 160.737 cv
286.545 160.773 285.616 160.809 284.915 160.848 cv
284.915 160.849 li
280.333 160.849 li
280.333 161.217 li
281.847 161.254 282.19 161.463 282.19 162.618 cv
282.19 170.162 li
273.268 160.849 li
270.294 160.849 li
270.294 161.217 li
270.957 161.234 271.452 161.386 271.888 161.689 cv
271.888 171.003 li
271.888 171.874 271.507 172.271 270.333 172.271 cv
270.243 172.271 li
269.294 172.271 268.896 172.082 268.517 171.077 cv
264.551 160.572 li
262.9 160.572 li
263.072 160.988 li
259.618 170.396 li
259.011 172.043 258.803 172.253 257.568 172.271 cv
257.568 172.639 li
261.952 172.639 li
261.952 172.271 li
261.649 172.271 li
260.606 172.271 260.112 172.082 260.112 171.569 cv
260.112 171.305 260.358 170.735 260.491 170.377 cv
261.591 167.403 li
265.519 167.403 li
266.791 170.851 li
266.866 171.04 266.999 171.325 266.999 171.627 cv
266.999 172.158 266.6 172.271 265.519 172.271 cv
265.026 172.271 li
265.026 172.639 li
274.65 172.639 li
274.65 172.271 li
273.04 172.271 272.738 171.988 272.738 170.625 cv
272.738 162.503 li
282.547 172.778 li
283.039 172.778 li
283.039 162.202 li
283.039 161.463 283.491 161.2 284.915 161.2 cv
285.294 161.186 li
286.413 161.186 286.736 161.489 286.736 162.723 cv
286.736 170.89 li
286.736 171.987 286.261 172.271 285.236 172.271 cv
284.915 172.271 li
284.915 172.639 li
290.979 172.639 li
295.784 172.639 297.989 169.205 297.989 166.348 cv
297.989 163.223 295.784 160.678 290.769 160.678 cv
cp
f
202.156 152.96 mo
202.156 153.129 li
201.542 153.139 201.324 153.386 201.324 153.972 cv
201.324 156.439 li
201.324 157.574 200.598 158.791 198.615 158.791 cv
196.87 158.791 195.971 157.794 195.971 156.484 cv
195.971 153.816 li
195.971 153.229 195.805 153.139 195.184 153.129 cv
195.184 152.96 li
197.537 152.96 li
197.537 153.129 li
197.456 153.129 li
196.951 153.129 196.732 153.266 196.732 153.797 cv
196.732 156.339 li
196.732 157.574 197.456 158.314 198.816 158.314 cv
199.849 158.314 200.902 157.886 200.902 156.33 cv
200.902 154.2 li
200.902 153.322 200.763 153.167 200.005 153.129 cv
200.005 152.96 li
202.156 152.96 li
cp
f
211.083 158.722 mo
206.356 153.753 li
206.356 157.688 li
206.356 158.346 206.501 158.484 207.277 158.484 cv
207.277 158.654 li
205.16 158.654 li
205.16 158.484 li
205.197 158.484 li
205.765 158.484 205.947 158.292 205.947 157.87 cv
205.947 153.358 li
205.737 153.213 205.499 153.139 205.179 153.129 cv
205.179 152.96 li
206.61 152.96 li
210.91 157.457 li
210.91 153.808 li
210.91 153.249 210.747 153.147 210.016 153.129 cv
210.016 152.96 li
212.151 152.96 li
212.151 153.129 li
211.466 153.129 211.319 153.249 211.319 153.606 cv
211.319 158.722 li
211.083 158.722 li
cp
f
218.06 158.654 mo
215.833 158.654 li
215.833 158.486 li
216.4 158.457 216.519 158.311 216.519 157.697 cv
216.519 153.791 li
216.519 153.295 216.346 153.158 215.833 153.129 cv
215.833 152.959 li
218.06 152.959 li
218.06 153.129 li
217.482 153.129 217.28 153.259 217.28 153.872 cv
217.28 157.761 li
217.28 158.3 217.428 158.486 218.06 158.486 cv
218.06 158.654 li
cp
f
224.195 158.791 mo
222.209 153.844 li
221.98 153.266 221.87 153.129 221.312 153.129 cv
221.312 152.96 li
223.828 152.96 li
223.828 153.129 li
222.986 153.147 222.786 153.341 222.96 153.761 cv
224.605 157.856 li
226.051 154.08 li
226.15 153.824 226.206 153.642 226.206 153.514 cv
226.206 153.24 225.977 153.129 225.357 153.129 cv
225.357 152.96 li
227.479 152.96 li
227.479 153.129 li
227.002 153.129 226.755 153.35 226.537 153.916 cv
224.649 158.791 li
224.195 158.791 li
cp
f
234.663 156.592 mo
234.493 156.592 li
234.419 155.939 234.244 155.867 233.868 155.867 cv
232.313 155.867 li
232.313 157.826 li
232.313 158.248 232.471 158.332 232.811 158.332 cv
234.226 158.332 li
234.863 158.332 235.056 158.084 235.285 157.29 cv
235.45 157.29 li
235.302 158.654 li
230.436 158.654 li
230.436 158.486 li
230.691 158.486 li
231.425 158.486 231.553 158.282 231.553 157.731 cv
231.553 153.865 li
231.553 153.35 231.434 153.129 230.822 153.129 cv
230.618 153.129 li
230.618 152.959 li
235.019 152.959 li
235.093 154.229 li
234.928 154.229 li
234.809 153.447 234.582 153.283 234.253 153.283 cv
232.313 153.283 li
232.313 155.543 li
233.959 155.543 li
234.289 155.543 234.445 155.387 234.493 154.853 cv
234.663 154.853 li
234.663 156.592 li
cp
f
241.344 156.087 mo
241.135 156.087 240.997 156.096 240.778 156.067 cv
240.778 153.063 li
240.943 153.044 241.063 153.044 241.235 153.044 cv
242.641 153.044 243.025 153.704 243.025 154.558 cv
243.025 155.656 242.358 156.087 241.344 156.087 cv
cp
244.438 157.661 mo
243.715 156.937 li
243.282 156.505 243.007 156.248 242.669 155.987 cv
243.42 155.768 243.889 155.188 243.889 154.502 cv
243.889 153.566 243.126 152.874 241.436 152.874 cv
240.842 152.874 240.658 152.884 240.282 152.902 cv
239.906 152.924 239.349 152.96 239.128 152.96 cv
239.128 153.129 li
239.33 153.129 li
239.861 153.129 240.016 153.294 240.016 153.862 cv
240.016 157.721 li
240.016 158.337 239.825 158.484 239.284 158.484 cv
239.128 158.484 li
239.128 158.654 li
241.719 158.654 li
241.719 158.484 li
241.509 158.484 li
240.997 158.484 240.778 158.346 240.778 157.795 cv
240.778 156.239 li
240.924 156.248 241.042 156.257 241.245 156.257 cv
241.491 156.257 241.637 156.248 241.865 156.239 cv
242.085 156.388 242.404 156.654 242.806 157.058 cv
243.412 157.666 li
244.228 158.478 244.639 158.828 246.242 158.754 cv
246.242 158.589 li
245.537 158.542 244.978 158.202 244.438 157.661 cv
cp
f
248.718 157.25 mo
248.908 158.063 249.545 158.537 250.256 158.537 cv
250.868 158.537 251.515 158.181 251.515 157.46 cv
251.515 156.146 248.591 155.744 248.591 154.147 cv
248.591 153.392 249.281 152.824 250.211 152.824 cv
250.977 152.824 251.132 153.054 251.451 153.054 cv
251.524 153.054 251.561 153.035 251.615 152.96 cv
251.76 152.96 li
251.913 154.12 li
251.76 154.12 li
251.505 153.463 250.922 153.044 250.293 153.044 cv
249.69 153.044 249.27 153.392 249.27 153.902 cv
249.27 155.198 252.194 155.545 252.194 157.223 cv
252.194 158.116 251.406 158.788 250.338 158.788 cv
249.836 158.788 249.198 158.537 249.072 158.537 cv
248.991 158.537 248.926 158.583 248.891 158.654 cv
248.735 158.654 li
248.545 157.25 li
248.718 157.25 li
cp
f
258.622 158.654 mo
256.396 158.654 li
256.396 158.486 li
256.962 158.457 257.081 158.311 257.081 157.697 cv
257.081 153.791 li
257.081 153.295 256.907 153.158 256.396 153.129 cv
256.396 152.959 li
258.622 152.959 li
258.622 153.129 li
258.045 153.129 257.843 153.259 257.843 153.872 cv
257.843 157.761 li
257.843 158.3 257.989 158.486 258.622 158.486 cv
258.622 158.654 li
cp
f
265.125 157.814 mo
265.125 158.31 265.291 158.484 265.848 158.484 cv
266.188 158.484 li
266.188 158.654 li
263.301 158.654 li
263.301 158.484 li
263.64 158.484 li
264.198 158.484 264.363 158.31 264.363 157.814 cv
264.363 153.281 li
262.77 153.281 li
262.405 153.281 262.239 153.494 262.102 154.302 cv
261.938 154.302 li
262.083 152.824 li
262.258 152.824 li
262.267 152.878 262.304 152.914 262.358 152.934 cv
262.415 152.95 262.478 152.96 262.541 152.96 cv
266.947 152.96 li
267.075 152.96 267.211 152.934 267.23 152.824 cv
267.403 152.824 li
267.551 154.302 li
267.386 154.302 li
267.249 153.494 267.084 153.281 266.718 153.281 cv
265.125 153.281 li
265.125 157.814 li
cp
f
275.13 153.79 mo
275.424 153.285 275.25 153.129 274.66 153.129 cv
274.66 152.96 li
276.73 152.96 li
276.73 153.129 li
276.109 153.176 275.844 153.423 275.588 153.854 cv
274.06 156.431 li
274.06 157.806 li
274.06 158.292 274.234 158.484 274.798 158.484 cv
274.917 158.484 li
274.917 158.654 li
272.405 158.654 li
272.405 158.484 li
272.576 158.484 li
273.137 158.484 273.298 158.274 273.298 157.824 cv
273.298 156.531 li
271.683 153.982 li
271.232 153.278 271.021 153.147 270.426 153.129 cv
270.426 152.96 li
272.855 152.96 li
272.855 153.129 li
272.151 153.129 272.105 153.304 272.376 153.726 cv
273.831 155.99 li
275.13 153.79 li
cp
f
287.28 158.57 mo
285.805 158.57 284.641 157.36 284.641 155.646 cv
284.641 154.547 285.283 153.044 286.894 153.044 cv
288.408 153.044 289.488 154.245 289.488 155.949 cv
289.488 157.25 288.774 158.57 287.28 158.57 cv
cp
287.132 152.824 mo
285.182 152.824 283.776 154.106 283.776 155.932 cv
283.776 157.645 285.292 158.79 287.087 158.79 cv
288.865 158.79 290.352 157.498 290.352 155.646 cv
290.352 153.997 288.865 152.824 287.132 152.824 cv
cp
f
296.54 156.463 mo
296.386 156.463 li
296.368 155.93 296.174 155.765 295.735 155.765 cv
294.038 155.765 li
294.038 157.777 li
294.038 158.291 294.148 158.484 294.838 158.484 cv
294.838 158.654 li
292.608 158.654 li
292.608 158.484 li
293.177 158.447 293.277 158.328 293.277 157.583 cv
293.277 153.992 li
293.277 153.405 293.232 153.139 292.591 153.129 cv
292.591 152.959 li
296.692 152.959 li
296.692 154.036 li
296.54 154.036 li
296.529 153.503 296.347 153.283 295.779 153.283 cv
294.038 153.283 li
294.038 155.441 li
295.855 155.441 li
296.194 155.441 296.358 155.248 296.386 154.853 cv
296.54 154.853 li
296.54 156.463 li
cp
f
68.9995 153.036 mo
69.2158 153 69.4146 153 69.6216 153 cv
70.8213 153 71.1011 153.694 71.1011 154.398 cv
71.1011 155.31 70.4697 155.978 69.4863 155.978 cv
69.3154 155.978 69.1162 155.933 68.9995 155.905 cv
68.9995 153.036 li
cp
69.7661 156.148 mo
71.1011 156.148 71.9492 155.48 71.9492 154.425 cv
71.9492 153.73 71.5161 152.828 69.6309 152.828 cv
69.3872 152.828 68.9546 152.837 68.5122 152.855 cv
68.0703 152.874 67.6284 152.901 67.3755 152.91 cv
67.3755 153.081 li
67.8267 153.081 li
68.1421 153.081 68.2505 153.226 68.2505 153.559 cv
68.2505 157.826 li
68.2505 158.25 68.1152 158.35 67.646 158.35 cv
67.52 158.35 li
67.52 158.521 li
70.0186 158.521 li
70.0186 158.35 li
69.7212 158.35 li
69.1528 158.35 68.9995 158.16 68.9995 157.655 cv
68.9995 156.076 li
69.27 156.131 69.4956 156.148 69.7661 156.148 cv
cp
f
77.0098 155.995 mo
76.8018 155.995 76.6665 156.004 76.4502 155.978 cv
76.4502 153.018 li
76.6123 153 76.73 153 76.9009 153 cv
78.2905 153 78.6694 153.649 78.6694 154.489 cv
78.6694 155.571 78.0107 155.995 77.0098 155.995 cv
cp
80.0586 157.547 mo
79.3462 156.834 li
78.9219 156.41 78.6514 156.157 78.3174 155.896 cv
79.0571 155.679 79.5176 155.111 79.5176 154.435 cv
79.5176 153.514 78.7686 152.828 77.0996 152.828 cv
76.5132 152.828 76.3325 152.837 75.9629 152.855 cv
75.5933 152.874 75.043 152.91 74.8262 152.91 cv
74.8262 153.081 li
75.0249 153.081 li
75.5479 153.081 75.7012 153.244 75.7012 153.803 cv
75.7012 157.601 li
75.7012 158.205 75.5117 158.35 74.9795 158.35 cv
74.8262 158.35 li
74.8262 158.521 li
77.3794 158.521 li
77.3794 158.35 li
77.1719 158.35 li
76.6665 158.35 76.4502 158.214 76.4502 157.673 cv
76.4502 156.148 li
76.5942 156.157 76.7119 156.167 76.9102 156.167 cv
77.1538 156.167 77.2983 156.157 77.5234 156.148 cv
77.7402 156.293 78.0557 156.555 78.4531 156.951 cv
79.0479 157.547 li
79.8511 158.35 80.2568 158.692 81.8354 158.621 cv
81.8354 158.458 li
81.1411 158.412 80.5908 158.078 80.0586 157.547 cv
cp
f
87.293 158.44 mo
85.8408 158.44 84.6948 157.249 84.6948 155.562 cv
84.6948 154.48 85.3262 153 86.9136 153 cv
88.4023 153 89.4668 154.182 89.4668 155.859 cv
89.4668 157.141 88.7632 158.44 87.293 158.44 cv
cp
87.1484 152.774 mo
85.2271 152.774 83.8467 154.047 83.8467 155.842 cv
83.8467 157.528 85.3354 158.665 87.1035 158.665 cv
88.8535 158.665 90.3149 157.385 90.3149 155.562 cv
90.3149 153.938 88.8535 152.774 87.1484 152.774 cv
cp
f
99.0015 158.098 mo
98.1089 158.557 96.9629 158.665 96.584 158.665 cv
94.6084 158.665 93.688 157.141 93.688 155.823 cv
93.688 154.47 94.6353 152.774 96.8364 152.774 cv
97.8018 152.774 98.4419 153.081 98.6313 153.081 cv
98.7129 153.081 98.7852 153.063 98.8394 153.018 cv
98.9653 153.018 li
98.9653 154.48 li
98.7852 154.48 li
98.5415 153.352 97.7749 153 96.9355 153 cv
95.3481 153 94.5361 154.317 94.5361 155.77 cv
94.5361 157.619 95.835 158.44 96.8726 158.44 cv
97.2876 158.44 97.748 158.35 98.2529 158.098 cv
98.2529 156.96 li
98.2529 156.445 98.0723 156.275 97.5313 156.275 cv
97.1973 156.275 li
97.1973 156.112 li
99.6328 156.112 li
99.6328 156.275 li
99.1821 156.302 99.0015 156.456 99.0015 156.844 cv
99.0015 158.098 li
cp
f
104.585 155.995 mo
104.377 155.995 104.242 156.004 104.026 155.978 cv
104.026 153.018 li
104.188 153 104.305 153 104.477 153 cv
105.866 153 106.245 153.649 106.245 154.489 cv
106.245 155.571 105.586 155.995 104.585 155.995 cv
cp
107.634 157.547 mo
106.921 156.834 li
106.497 156.41 106.227 156.157 105.893 155.896 cv
106.633 155.679 107.093 155.111 107.093 154.435 cv
107.093 153.514 106.344 152.828 104.675 152.828 cv
104.088 152.828 103.909 152.837 103.538 152.855 cv
103.168 152.874 102.618 152.91 102.402 152.91 cv
102.402 153.081 li
102.6 153.081 li
103.124 153.081 103.277 153.244 103.277 153.803 cv
103.277 157.601 li
103.277 158.205 103.088 158.35 102.555 158.35 cv
102.402 158.35 li
102.402 158.521 li
104.955 158.521 li
104.955 158.35 li
104.748 158.35 li
104.242 158.35 104.026 158.214 104.026 157.673 cv
104.026 156.148 li
104.17 156.157 104.287 156.167 104.486 156.167 cv
104.729 156.167 104.874 156.157 105.099 156.148 cv
105.315 156.293 105.631 156.555 106.028 156.951 cv
106.624 157.547 li
107.427 158.35 107.833 158.692 109.411 158.621 cv
109.411 158.458 li
108.717 158.412 108.167 158.078 107.634 157.547 cv
cp
f
113.948 155.635 mo
114.715 153.532 li
115.509 155.635 li
113.948 155.635 li
cp
117.087 157.781 mo
115.202 152.774 li
114.417 152.774 li
114.498 152.973 li
112.856 157.456 li
112.568 158.242 112.469 158.341 111.882 158.35 cv
111.882 158.521 li
113.966 158.521 li
113.966 158.35 li
113.822 158.35 li
113.326 158.35 113.091 158.26 113.091 158.016 cv
113.091 157.89 113.208 157.619 113.271 157.447 cv
113.795 156.031 li
115.662 156.031 li
116.267 157.673 li
116.302 157.764 116.366 157.899 116.366 158.043 cv
116.366 158.296 116.176 158.35 115.662 158.35 cv
115.428 158.35 li
115.428 158.521 li
117.908 158.521 li
117.908 158.35 li
117.457 158.35 117.268 158.26 117.087 157.781 cv
cp
f
124.168 158.521 mo
121.868 153.713 li
121.85 153.713 li
121.606 157.772 li
121.579 158.232 121.922 158.332 122.328 158.35 cv
122.328 158.521 li
120.452 158.521 li
120.452 158.35 li
121.11 158.35 121.191 158.205 121.236 157.385 cv
121.453 153.875 li
121.489 153.28 121.471 153.117 120.912 153.081 cv
120.912 152.919 li
122.274 152.919 li
124.448 157.466 li
126.613 152.919 li
127.939 152.919 li
127.939 153.081 li
127.497 153.117 127.326 153.126 127.344 153.434 cv
127.632 157.52 li
127.687 158.35 127.759 158.35 128.417 158.35 cv
128.417 158.521 li
126.099 158.521 li
126.099 158.35 li
126.523 158.35 126.938 158.232 126.902 157.755 cv
126.64 153.713 li
126.622 153.713 li
124.376 158.521 li
124.168 158.521 li
cp
f
134.821 158.521 mo
132.521 153.713 li
132.503 153.713 li
132.259 157.772 li
132.232 158.232 132.575 158.332 132.981 158.35 cv
132.981 158.521 li
131.104 158.521 li
131.104 158.35 li
131.763 158.35 131.844 158.205 131.889 157.385 cv
132.106 153.875 li
132.142 153.28 132.124 153.117 131.565 153.081 cv
131.565 152.919 li
132.927 152.919 li
135.101 157.466 li
137.266 152.919 li
138.592 152.919 li
138.592 153.081 li
138.15 153.117 137.979 153.126 137.997 153.434 cv
138.286 157.52 li
138.339 158.35 138.412 158.35 139.07 158.35 cv
139.07 158.521 li
136.752 158.521 li
136.752 158.35 li
137.176 158.35 137.591 158.232 137.555 157.755 cv
137.293 153.713 li
137.275 153.713 li
135.029 158.521 li
134.821 158.521 li
cp
f
144.239 158.521 mo
142.046 158.521 li
142.046 158.35 li
142.606 158.322 142.723 158.178 142.723 157.574 cv
142.723 153.73 li
142.723 153.244 142.552 153.108 142.046 153.081 cv
142.046 152.91 li
144.239 152.91 li
144.239 153.081 li
143.67 153.081 143.472 153.207 143.472 153.813 cv
143.472 157.637 li
143.472 158.169 143.616 158.35 144.239 158.35 cv
144.239 158.521 li
cp
f
153.151 158.584 mo
148.479 153.694 li
148.479 157.565 li
148.479 158.214 148.623 158.35 149.389 158.35 cv
149.389 158.521 li
147.296 158.521 li
147.296 158.35 li
147.332 158.35 li
147.892 158.35 148.072 158.16 148.072 157.745 cv
148.072 153.307 li
147.865 153.162 147.63 153.091 147.314 153.081 cv
147.314 152.91 li
148.73 152.91 li
152.98 157.339 li
152.98 153.748 li
152.98 153.198 152.817 153.1 152.095 153.081 cv
152.095 152.91 li
154.207 152.91 li
154.207 153.081 li
153.53 153.081 153.386 153.198 153.386 153.55 cv
153.386 158.584 li
153.151 158.584 li
cp
f
162.568 158.098 mo
161.675 158.557 160.53 158.665 160.151 158.665 cv
158.175 158.665 157.255 157.141 157.255 155.823 cv
157.255 154.47 158.202 152.774 160.403 152.774 cv
161.369 152.774 162.009 153.081 162.199 153.081 cv
162.28 153.081 162.352 153.063 162.406 153.018 cv
162.532 153.018 li
162.532 154.48 li
162.352 154.48 li
162.108 153.352 161.341 153 160.502 153 cv
158.915 153 158.103 154.317 158.103 155.77 cv
158.103 157.619 159.402 158.44 160.439 158.44 cv
160.854 158.44 161.314 158.35 161.82 158.098 cv
161.82 156.96 li
161.82 156.445 161.639 156.275 161.098 156.275 cv
160.764 156.275 li
160.764 156.112 li
163.2 156.112 li
163.2 156.275 li
162.749 156.302 162.568 156.456 162.568 156.844 cv
162.568 158.098 li
cp
f
80.0767 166.305 mo
81.6748 161.924 li
83.3296 166.305 li
80.0767 166.305 li
cp
97.1143 160.626 mo
97.1143 160.983 li
98.6187 161.021 98.957 161.229 98.957 162.375 cv
98.957 169.859 li
90.0996 160.626 li
87.1475 160.626 li
87.1475 160.983 li
87.8062 161.002 88.2949 161.152 88.7275 161.453 cv
88.7275 170.705 li
88.7275 171.411 88.4761 171.805 87.749 171.925 cv
87.2065 171.83 86.9072 171.541 86.6206 170.78 cv
82.6904 160.344 li
81.0547 160.344 li
81.2236 160.758 li
77.8013 170.104 li
77.2729 171.54 77.0488 171.875 76.1743 171.947 cv
77.4248 169.577 li
77.0864 169.577 li
75.9014 171.213 75.563 171.646 74.4536 171.646 cv
71.6895 171.646 li
71.144 171.646 70.937 171.457 70.937 170.95 cv
70.937 162.281 li
70.937 161.115 71.2568 160.983 72.4795 160.983 cv
73.1748 160.983 li
73.1748 160.626 li
67.6279 160.626 li
67.6279 160.983 li
67.8906 160.983 li
69.0757 160.983 69.3765 161.396 69.3765 162.395 cv
69.3765 170.724 li
69.3765 171.684 69.0566 171.966 68.1914 171.966 cv
67.5713 171.966 li
67.5713 172.322 li
75.7705 172.322 li
75.9771 172.322 li
80.1143 172.322 li
80.1143 171.966 li
79.813 171.966 li
78.7793 171.966 78.29 171.777 78.29 171.27 cv
78.29 171.007 78.5347 170.442 78.666 170.085 cv
79.7573 167.133 li
83.6489 167.133 li
84.9092 170.556 li
84.9849 170.743 85.1162 171.024 85.1162 171.326 cv
85.1162 171.853 84.7212 171.966 83.6489 171.966 cv
83.1602 171.966 li
83.1602 172.322 li
87.1099 172.322 li
88.332 172.322 li
91.4727 172.322 li
91.4727 171.966 li
89.874 171.966 89.5732 171.684 89.5732 170.329 cv
89.5732 162.263 li
99.314 172.454 li
99.8027 172.454 li
99.8027 161.962 li
99.8027 161.229 100.104 160.983 101.514 160.983 cv
101.514 160.626 li
97.1143 160.626 li
cp
f
112.102 171.438 mo
110.24 172.398 107.852 172.623 107.063 172.623 cv
102.944 172.623 101.026 169.445 101.026 166.7 cv
101.026 163.88 103 160.344 107.589 160.344 cv
109.601 160.344 110.936 160.983 111.331 160.983 cv
111.5 160.983 111.65 160.946 111.764 160.853 cv
112.026 160.853 li
112.026 163.898 li
111.65 163.898 li
111.143 161.548 109.544 160.814 107.795 160.814 cv
104.486 160.814 102.794 163.56 102.794 166.587 cv
102.794 170.442 105.501 172.153 107.664 172.153 cv
108.529 172.153 109.488 171.966 110.541 171.438 cv
110.541 169.069 li
110.541 167.998 110.165 167.641 109.037 167.641 cv
108.341 167.641 li
108.341 167.303 li
113.418 167.303 li
113.418 167.641 li
112.478 167.696 112.102 168.017 112.102 168.824 cv
112.102 171.438 li
cp
f
126.657 160.626 mo
126.657 160.983 li
125.397 161.002 124.946 161.51 124.946 162.714 cv
124.946 167.791 li
124.946 170.123 123.46 172.623 119.38 172.623 cv
115.789 172.623 113.946 170.574 113.946 167.885 cv
113.946 162.395 li
113.946 161.19 113.607 161.002 112.328 160.983 cv
112.328 160.626 li
117.161 160.626 li
117.161 160.983 li
116.992 160.983 li
115.958 160.983 115.506 161.266 115.506 162.356 cv
115.506 167.584 li
115.506 170.123 116.992 171.646 119.793 171.646 cv
121.918 171.646 124.081 170.762 124.081 167.565 cv
124.081 163.184 li
124.081 161.378 123.799 161.059 122.238 160.983 cv
122.238 160.626 li
126.657 160.626 li
cp
f
128.163 166.305 mo
129.761 161.924 li
131.416 166.305 li
128.163 166.305 li
cp
134.707 170.78 mo
130.776 160.344 li
129.141 160.344 li
129.31 160.758 li
125.887 170.104 li
125.286 171.74 125.079 171.946 123.856 171.966 cv
123.856 172.322 li
128.2 172.322 li
128.2 171.966 li
127.899 171.966 li
126.865 171.966 126.376 171.777 126.376 171.27 cv
126.376 171.007 126.621 170.442 126.752 170.085 cv
127.843 167.133 li
131.735 167.133 li
132.996 170.556 li
133.07 170.743 133.202 171.024 133.202 171.326 cv
133.202 171.853 132.808 171.966 131.735 171.966 cv
131.247 171.966 li
131.247 172.322 li
136.418 172.322 li
136.418 171.966 li
135.478 171.966 135.083 171.777 134.707 170.78 cv
cp
f
146.028 171.438 mo
144.166 172.398 141.778 172.623 140.988 172.623 cv
136.87 172.623 134.952 169.445 134.952 166.7 cv
134.952 163.88 136.926 160.344 141.515 160.344 cv
143.527 160.344 144.862 160.983 145.257 160.983 cv
145.426 160.983 145.576 160.946 145.689 160.853 cv
145.953 160.853 li
145.953 163.898 li
145.576 163.898 li
145.069 161.548 143.47 160.814 141.721 160.814 cv
138.412 160.814 136.719 163.56 136.719 166.587 cv
136.719 170.442 139.427 172.153 141.59 172.153 cv
142.455 172.153 143.414 171.966 144.467 171.438 cv
144.467 169.069 li
144.467 167.998 144.091 167.641 142.962 167.641 cv
142.267 167.641 li
142.267 167.303 li
147.344 167.303 li
147.344 167.641 li
146.404 167.696 146.028 168.017 146.028 168.824 cv
146.028 171.438 li
cp
f
157.537 162.563 mo
157.537 161.51 158.402 160.796 159.643 160.796 cv
160.94 160.796 162.145 161.661 162.671 163.015 cv
162.99 163.015 li
162.671 160.626 li
162.37 160.626 li
162.257 160.776 162.182 160.814 162.032 160.814 cv
161.374 160.814 161.053 160.344 159.474 160.344 cv
157.556 160.344 156.127 161.51 156.127 163.071 cv
156.127 166.361 162.163 167.189 162.163 169.897 cv
162.163 171.382 160.828 172.116 159.568 172.116 cv
158.101 172.116 156.785 171.138 156.39 169.465 cv
156.033 169.465 li
156.041 169.521 li
155.919 169.521 li
155.449 171.138 155.055 171.646 153.738 171.646 cv
150.842 171.646 li
150.146 171.646 149.827 171.477 149.827 170.611 cv
149.827 166.605 li
153.004 166.605 li
153.775 166.605 154.133 166.757 154.284 168.091 cv
154.641 168.091 li
154.641 164.519 li
154.284 164.519 li
154.189 165.609 153.87 165.929 153.192 165.929 cv
149.827 165.929 li
149.827 161.303 li
153.794 161.303 li
154.472 161.303 154.941 161.642 155.186 163.239 cv
155.524 163.239 li
155.374 160.626 li
146.348 160.626 li
146.348 160.983 li
146.762 160.983 li
148.021 160.983 148.266 161.435 148.266 162.487 cv
148.266 170.423 li
148.266 171.552 148.002 171.966 146.498 171.966 cv
145.972 171.966 li
145.972 172.322 li
155.957 172.322 li
156.163 170.406 li
156.428 172.322 li
156.748 172.322 li
156.823 172.21 156.954 172.116 157.124 172.116 cv
157.387 172.116 158.703 172.623 159.737 172.623 cv
161.938 172.623 163.573 171.251 163.573 169.408 cv
163.573 165.948 157.537 165.233 157.537 162.563 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
%ADOBeginPageMarks
1.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
false sop
/1 
<<
/Name (All)
/3 
[/DeviceCMYK] /CSA add_res
/CSA /3 get_csa_by_name
/MappedCSA /3 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
@
.25 lw
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
1 /1 /CSD get_res sepcs
1 sep
@
true sop
.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPQ+Courier /Courier findfont ct_VMDictPut/RJHRPQ+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 18{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c 5{/.notdef}rp /i /.notdef /k /l 3{/.notdef}rp /p 7{/.notdef}rp /x 40{/.notdef}rp /degree 94{/.notdef}rp]RJHRPQ+Courier nfRJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp.3996 lw
@
1 0 0 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 .05 0 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 1 0 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 .05 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 1 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 0 .05 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 0 1 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPQ+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s 4{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPQ+Courier nfRJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan) false chp@
1 0 0 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan)sh0 .05 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPQ+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPQ+Courier nfRJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta) false chp@
0 1 0 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta)sh0 0 .05 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPQ+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPQ+Courier nfRJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow) false chp@
0 0 1 0 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow)sh0 0 0 .05 nzopmsc
%%IncludeResource: font Courier
/RJHRPQ+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 7{/.notdef}rp /B /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPQ+Courier nfRJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black) false chp@
0 0 0 1 nzopmsc
RJHRPQ+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black)sh%ADOEndPageMarks
pgrs
%%PageTrailer
[
[/CSA [/2 /3 ]]
[/CSD [/1 ]]
] del_res
/RJHRPQ+Courier*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
Adobe_AGM_OnHost_Seps/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 1 3
%%PlateColor: Yellow
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1) /PlateColor (Yellow)]
[/TrimBox [36 36 180 324]]
[/BleedBox [27 27 189 333]]
]xpdfm
/Yellow /y Adobe_AGM_OnHost_Seps /plate_setup gx
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_AGM_Core begin
60 45 getspotfunction setscreen
end
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[0 -1 1 0 0 360 ]ct
gsave
np
gsave
27 27 mo
27 189 li
333 189 li
333 27 li
cp
clp
333 189 mo
27 189 li
27 27 li
333 27 li
333 189 li
cp
false sop
/4 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
82.6406 84.3184 mo
92.2529 78.4033 96.1006 76.8115 103.478 66.1992 cv
105.608 63.1338 107.749 73.9648 107.749 73.9648 cv
88.335 92.7305 li
88.335 92.7305 79.2754 86.3896 82.6406 84.3184 cv
cp
.788724 1 .346899 .303899 cmyk
f
64.4102 48.5859 mo
65.375 48.5859 66.5801 48.1299 66.5801 48.1299 cv
65.3213 51.3721 li
63.1694 52.7061 li
63.1694 52.7061 61.8345 49.4453 62.0303 49.0791 cv
62.2261 48.7129 64.4102 48.5859 64.4102 48.5859 cv
cp
.890898 .318517 1 .249577 cmyk
f
70.251 43.335 mo
68.9111 43.709 62.3564 48.2109 62.0483 49.0146 cv
61.7402 49.8184 68.5361 47.5684 68.8579 48.0498 cv
83.1113 56.8379 84.8877 62.8223 96.0415 79.5527 cv
96.271 79.8975 99.1641 76.7109 99.0117 76.498 cv
97.0845 73.8008 85.5762 53.0859 70.251 43.335 cv
cp
.627649 0 1 0 cmyk
f
85.2705 61.332 mo
86.4282 62.2568 74.6611 68.7266 72.25 83.6768 cv
71.3101 89.502 67.7329 72.3613 70.793 66.8965 cv
73.853 61.4326 80.4482 57.4736 85.2705 61.332 cv
cp
.890898 .318517 1 .249577 cmyk
f
84.3062 60.6885 mo
73.5356 64.0645 72.1543 76.4102 71.6719 84.2861 cv
71.4136 88.5078 77.7153 68.4053 82.8599 65.3506 cv
88.667 61.9023 84.3062 60.6885 84.3062 60.6885 cv
cp
.627649 0 1 0 cmyk
f
146.059 68.7871 mo
130.563 55.5166 110.559 59.4111 104.125 65.2939 cv
99.5952 69.4355 103.913 73.7578 97.6538 79.6592 cv
93.124 83.9297 84.0645 81.8604 80.5698 86.1309 cv
71.936 96.6836 73.4497 114.177 82.0293 128.027 cv
82.083 127.959 82.1353 127.892 82.1904 127.822 cv
82.8628 126.994 84.0542 125.467 85.7632 123.24 cv
86.1763 122.672 86.6948 120.6 87.3159 117.028 cv
87.5742 115.476 88.04 114.311 88.7139 113.533 cv
90.8877 115.009 li
95.1323 108.951 97.4111 105.718 97.7212 105.302 cv
100.568 100.799 101.993 97.3311 101.993 94.8965 cv
98.8862 96.5537 96.1685 97.5635 93.8389 97.9258 cv
93.8389 97.1484 li
93.1401 96.3721 li
93.8389 93.498 li
96.1685 91.6875 100.387 89.8486 106.497 87.9854 cv
112.449 86.1738 117.031 85.2676 120.241 85.2676 cv
123.503 85.2676 126.065 86.1484 127.929 87.9082 cv
129.793 89.668 130.725 92.1787 130.725 95.4404 cv
130.725 104.863 123.554 112.137 109.214 117.261 cv
106.314 118.298 101.189 119.798 93.8389 121.765 cv
91.7153 122.335 89.9297 123.706 88.481 125.881 cv
88.1699 126.347 87.1606 128.314 85.4526 131.782 cv
85.3389 132.015 85.2246 132.234 85.1094 132.447 cv
97.7778 148.663 121.042 157.311 148.819 137.469 cv
151.717 135.398 154.085 132.854 156.012 130.126 cv
155.107 130.126 li
154.9 130.126 152.363 129.737 147.498 128.961 cv
145.115 128.547 143.33 128.34 142.14 128.34 cv
140.016 128.34 137.531 128.6 134.685 129.116 cv
128.162 130.255 124.149 130.824 122.648 130.824 cv
119.231 130.824 117.523 129.997 117.523 128.34 cv
117.523 127.513 118.325 125.984 119.93 123.758 cv
120.5 123.033 121.612 121.584 123.27 119.409 cv
131.293 108.591 137.325 96.2949 141.363 82.5244 cv
142.761 77.8135 144.314 75.4561 146.022 75.4561 cv
146.798 75.4561 147.536 75.9111 148.235 76.8154 cv
148.934 77.7217 149.284 78.5898 149.284 79.418 cv
149.284 80.2979 147.653 84.0508 144.392 90.6768 cv
142.373 94.8193 139.111 101.188 134.607 109.781 cv
127.463 123.448 li
130.775 124.225 134.502 124.612 138.645 124.612 cv
141.078 124.612 144.714 124.432 149.556 124.069 cv
153.95 123.74 157.349 123.561 159.76 123.53 cv
162.842 116.733 163.793 110.147 163.793 107.676 cv
163.793 103.488 164.07 84.2139 146.059 68.7871 cv
cp
.547906 .935973 0 0 cmyk
f
114.34 110.505 mo
122.622 105.535 126.764 100.902 126.764 96.6055 cv
126.764 94.2246 125.936 92.3867 124.279 91.0908 cv
122.83 89.9531 120.862 89.3838 118.377 89.3838 cv
116.306 89.3838 114.288 89.7715 112.32 90.5479 cv
110.042 91.4795 108.489 92.7227 107.662 94.2754 cv
106.936 96.0361 106.211 97.7695 105.487 99.4785 cv
99.5078 107.709 li
97.333 110.868 95.6763 113.818 94.5381 116.563 cv
95.2368 117.339 li
95.9355 117.339 li
100.595 117.339 106.729 115.061 114.34 110.505 cv
cp
f
126.192 146.653 mo
131.935 146.498 107.923 155.633 99.8726 134.766 cv
97.9409 129.759 107.721 147.148 126.192 146.653 cv
cp
.788724 1 .346899 .303899 cmyk
f
89.5435 107.787 mo
90.6699 113.42 77.5928 91.3076 96.791 79.8311 cv
101.398 77.0781 85.9194 89.668 89.5435 107.787 cv
cp
f
229.947 80.5176 mo
241.903 80.5176 li
261.241 121.04 li
280.5 80.5176 li
292.295 80.5176 li
292.295 82.041 li
288.364 82.3623 286.839 82.4434 286.999 85.1709 cv
289.567 121.521 li
290.049 128.902 290.691 128.902 296.549 128.902 cv
296.549 130.428 li
275.926 130.428 li
275.926 128.902 li
279.698 128.902 283.389 127.859 283.068 123.606 cv
280.741 87.6582 li
280.581 87.6582 li
260.6 130.428 li
258.754 130.428 li
238.292 87.6582 li
238.132 87.6582 li
235.966 123.768 li
235.725 127.859 238.774 128.743 242.385 128.902 cv
242.385 130.428 li
225.694 130.428 li
225.694 128.902 li
231.552 128.902 232.275 127.619 232.676 120.317 cv
234.602 89.1025 li
234.923 83.8066 234.922 82.3623 229.947 82.041 cv
224.572 82.1221 222.806 84.2891 222.806 89.4238 cv
222.806 111.09 li
222.806 121.04 216.467 131.711 199.054 131.711 cv
183.728 131.711 175.864 122.965 175.864 111.49 cv
175.864 88.0596 li
175.864 82.9248 174.42 82.1221 168.963 82.041 cv
168.963 80.5176 li
189.585 80.5176 li
189.585 82.041 li
188.864 82.041 li
184.45 82.041 182.525 83.2461 182.525 87.8994 cv
182.525 110.206 li
182.525 121.04 188.864 127.539 200.82 127.539 cv
209.887 127.539 219.115 123.768 219.115 110.127 cv
219.115 91.4307 li
219.115 83.7266 217.911 82.3623 211.251 82.041 cv
211.251 80.5176 li
229.947 80.5176 li
cp
0 0 0 0 cmyk
f
168.501 162.27 mo
168.501 168.159 173.276 172.935 179.165 172.935 cv
185.056 172.935 189.832 168.159 189.832 162.27 cv
189.832 156.379 185.056 151.604 179.165 151.604 cv
173.276 151.604 168.501 156.379 168.501 162.27 cv
cp
f
189.83 162.031 mo
189.83 162.079 189.64 162.24 189.438 162.362 cv
189.433 162.363 189.428 162.367 189.422 162.37 cv
189.148 162.521 188.758 162.661 188.273 162.787 cv
187.775 162.919 187.16 163.038 186.485 163.142 cv
185.809 163.245 185.056 163.322 184.246 163.395 cv
184.246 163.393 184.246 163.396 184.246 163.395 cv
183.208 163.487 182.581 163.527 181.754 163.567 cv
180.874 163.605 179.838 163.625 179.061 163.622 cv
179.061 163.741 179.061 163.858 179.061 163.977 cv
179.061 164.81 179.039 165.604 179.042 166.351 cv
179.064 170.445 179.058 170.444 179.179 172.935 cv
185.07 172.935 189.838 168.158 189.838 162.27 cv
189.838 162.27 189.83 162.114 189.83 162.031 cv
0 .18 1 0 cmyk
f
179.009 163.977 mo
179.01 164.81 179.013 165.604 179.016 166.353 cv
180.725 167.971 180.725 167.971 181.439 168.684 cv
181.626 167.33 181.731 165.714 181.729 163.921 cv
181.729 163.805 181.728 163.686 181.727 163.569 cv
180.648 163.611 179.935 163.624 179.008 163.622 cv
179.008 163.739 179.009 163.859 179.009 163.977 cv
0 0 0 1 cmyk
f
182.922 170.507 mo
182.548 169.898 182.208 169.501 181.436 168.69 cv
181.074 171.287 180.427 172.886 179.631 172.921 cv
179.697 172.918 179.802 172.912 179.869 172.908 cv
179.955 172.901 180.059 172.893 180.142 172.886 cv
181.246 172.787 182.195 171.941 182.922 170.507 cv
f
184.117 166.151 mo
184.12 166.138 183.502 169.356 182.923 170.507 cv
183.256 171.15 183.272 171.406 183.137 171.83 cv
184.171 171.044 185.026 169.858 185.614 168.391 cv
185.236 167.623 184.981 167.214 184.117 166.151 cv
f
181.063 172.768 mo
181.295 172.727 181.283 172.722 181.712 172.626 cv
181.968 172.554 li
182.756 172.309 182.894 172.184 183.139 171.819 cv
182.437 172.35 181.685 172.674 180.845 172.804 cv
181.063 172.768 li
cp
f
185.805 170.15 mo
187.342 168.408 188.281 165.948 188.278 163.142 cv
188.278 163.022 188.275 162.905 188.273 162.787 cv
187.776 162.919 187.16 163.038 186.485 163.142 cv
186.495 163.26 186.499 163.38 186.499 163.498 cv
186.501 165.323 186.191 166.981 185.627 168.384 cv
185.945 169.199 185.949 169.539 185.805 170.15 cv
f
184.247 163.395 mo
183.208 163.486 182.555 163.526 181.727 163.567 cv
183.189 165.088 183.499 165.443 184.117 166.151 cv
184.205 165.398 184.25 164.598 184.25 163.761 cv
184.249 163.641 184.248 163.515 184.247 163.395 cv
f
176.827 152.154 mo
177.422 151.913 177.993 151.666 179.145 151.6 cv
178.364 151.671 177.551 151.888 176.827 152.154 cv
f
186.308 163.14 mo
185.752 163.067 185.288 162.128 185.532 161.173 cv
184.751 161.714 183.872 160.604 184 159.576 cv
184.068 159.032 184.424 158.551 185.046 158.773 cv
184.793 157.906 184.477 157.084 184.107 156.328 cv
183.556 156.398 182.951 156.456 182.309 156.502 cv
182.879 157.363 182.321 158.163 181.525 158.037 cv
180.949 157.943 180.409 157.339 180.56 156.618 cv
180.093 156.943 179.134 156.814 179.044 155.792 cv
179.018 157.964 179.005 160.737 179.009 163.622 cv
181.842 163.65 185.164 163.349 186.485 163.142 cv
186.485 163.142 186.485 163.146 186.485 163.142 cv
186.431 163.146 186.359 163.147 186.308 163.14 cv
0 1 .66 .2 cmyk
f
172.275 165.282 mo
173.067 164.975 174.064 166.346 173.716 167.261 cv
173.555 167.684 173.138 167.802 172.701 167.547 cv
172.936 168.347 173.242 169.079 173.608 169.727 cv
174.169 169.803 174.8 169.869 175.488 169.922 cv
174.935 169.241 175.379 168.683 176.117 168.721 cv
176.751 168.753 177.589 169.279 177.41 170.001 cv
177.98 169.743 178.943 169.953 179.061 170.696 cv
179.032 169.098 179.015 166.748 179.01 163.977 cv
179.01 163.854 179.009 163.743 179.008 163.622 cv
178.108 163.625 177.196 163.591 176.289 163.553 cv
174.359 163.473 173.049 163.362 171.437 163.087 cv
171.434 163.094 171.437 163.084 171.437 163.087 cv
172.262 163.367 172.489 164.599 172.275 165.282 cv
f
184.169 155.459 mo
184.169 155.459 li
184.172 155.459 184.225 155.462 184.228 155.462 cv
184.228 155.462 184.23 155.462 184.232 155.462 cv
184.336 155.462 184.433 155.422 184.527 155.406 cv
185.138 155.294 186.523 154.959 186.523 154.558 cv
186.523 154.558 187.065 155.101 187.463 155.855 cv
187.51 155.938 187.542 156.013 187.584 156.132 cv
187.632 156.267 187.662 156.421 187.656 156.496 cv
187.638 156.727 187.492 156.729 187.34 156.662 cv
187.324 156.656 187.308 156.649 187.291 156.641 cv
186.743 156.395 186.563 155.892 186.458 155.686 cv
186.179 155.772 185.718 155.972 185.334 156.048 cv
185.29 156.057 185.208 156.076 185.162 156.083 cv
185.614 156.828 186.044 157.715 186.353 158.574 cv
186.89 158.021 187.731 159.046 187.771 160.035 cv
187.796 160.616 187.535 161.134 187.004 160.946 cv
187.428 161.733 187.292 162.889 186.485 163.143 cv
186.353 160.556 185.913 158.31 184.209 155.462 cv
184.109 155.462 li
f
184.223 155.396 mo
184.223 155.396 li
182.865 153.321 181.785 152.6 180.407 152.055 cv
180.133 151.946 179.196 151.596 179.148 151.584 cv
179.152 151.601 li
179.394 151.955 179.881 152.172 179.986 152.202 cv
179.956 152.332 179.977 152.591 180.426 152.915 cv
180.497 152.967 180.562 153.006 180.627 153.039 cv
181.321 153.403 181.475 153.119 181.507 153.007 cv
181.512 153.004 181.515 153.002 181.52 152.998 cv
181.73 153.154 182.142 153.484 182.597 154.002 cv
182.86 154.316 183.107 154.591 183.293 154.866 cv
182.865 154.92 182.298 154.97 181.735 155.011 cv
181.704 154.33 181.213 153.991 180.903 153.876 cv
180.228 153.625 180.005 154.42 180.299 154.979 cv
179.765 154.69 179.146 154.947 179.058 155.792 cv
181.17 155.779 182.686 155.688 184.238 155.459 cv
184.238 155.333 li
f
184.341 153.526 mo
184.335 153.516 184.329 153.479 184.336 153.451 cv
184.344 153.424 184.367 153.401 184.367 153.401 cv
184.367 153.401 184.377 153.373 184.418 153.35 cv
184.527 153.288 184.849 153.256 185.741 153.872 cv
183.892 152.418 181.901 151.82 180.211 151.654 cv
179.973 151.627 179.531 151.608 179.531 151.608 cv
180.067 151.656 180.434 151.76 180.52 151.79 cv
180.589 151.813 180.643 151.838 180.676 151.838 cv
180.679 151.838 180.681 151.838 180.681 151.838 cv
180.788 151.838 180.911 151.911 181.062 151.954 cv
181.227 152.003 181.501 152.124 181.747 152.239 cv
181.993 152.355 182.356 152.624 182.358 152.77 cv
182.302 152.804 182.284 152.818 182.119 152.773 cv
182.75 153.225 183.656 154.074 184.19 154.699 cv
184.557 154.629 185.104 154.551 185.357 154.467 cv
185.34 154.484 184.523 153.873 184.341 153.526 cv
f
173.498 170.317 mo
172.583 170.15 172.057 170.013 171.706 169.834 cv
171.648 169.803 171.629 169.803 171.615 169.8 cv
171.608 169.8 171.096 169.273 170.644 168.688 cv
170.318 168.263 170.04 167.782 170.011 167.737 cv
170.015 167.744 170.085 167.737 170.128 167.753 cv
170.608 167.912 171.355 169.221 171.365 169.234 cv
171.66 169.345 172.047 169.449 172.513 169.543 cv
172.075 168.882 171.709 168.142 171.426 167.334 cv
170.76 167.67 169.912 165.911 170.18 165.17 cv
170.236 165.02 170.412 164.704 170.862 165.045 cv
170.523 164.262 170.615 163.086 171.436 163.088 cv
171.453 165.681 171.808 167.914 173.498 170.317 cv
f
179.046 170.845 mo
178.954 171.216 178.436 171.567 177.703 171.269 cv
178.044 171.722 177.748 172.112 177.145 172.003 cv
176.678 171.918 176.119 171.541 176.076 171.164 cv
175.496 171.12 174.967 171.064 174.496 170.999 cv
174.944 171.519 175.442 171.942 175.98 172.259 cv
176.046 172.232 176.145 172.238 176.464 172.352 cv
176.873 172.493 177.262 172.686 177.671 172.831 cv
177.584 172.818 li
177.275 172.77 177.199 172.754 177.027 172.72 cv
176.24 172.565 174.871 172.118 173.498 170.317 cv
175.153 170.57 176.767 170.683 179.063 170.697 cv
179.057 170.741 179.056 170.803 179.046 170.845 cv
f
179.145 151.6 mo
173.426 151.6 168.612 156.268 168.502 162.063 cv
168.506 162.074 li
168.51 162.092 168.563 162.198 168.788 162.339 cv
169.013 162.48 169.345 162.629 169.783 162.742 cv
170.325 162.883 170.894 162.995 171.425 163.086 cv
171.434 163.088 li
173.049 163.361 174.359 163.473 176.289 163.554 cv
177.196 163.591 178.109 163.625 179.008 163.622 cv
179.006 163.078 179.004 159.98 179.029 156.989 cv
179.031 156.602 179.037 156.198 179.042 155.793 cv
179.065 153.846 179.107 151.86 179.145 151.6 cv
0 .18 1 0 cmyk
f
184.254 171.646 mo
183.65 171.984 183.534 171.993 182.723 172.327 cv
182.498 172.42 182.287 172.475 182.055 172.539 cv
183.494 172.152 185.46 170.542 185.807 170.148 cv
185.631 170.536 185.5 170.795 185.076 171.136 cv
184.958 171.231 184.449 171.537 184.254 171.646 cv
0 0 0 1 cmyk
f
169.783 162.742 mo
169.338 162.634 169.013 162.48 168.788 162.339 cv
168.906 158.479 171.051 155.056 174.174 153.18 cv
173.436 153.835 173.107 154.226 172.734 155.112 cv
170.982 157.125 169.863 159.831 169.783 162.742 cv
f
174.184 153.174 mo
174.965 152.609 175.413 152.197 176.652 151.9 cv
177.521 151.692 178.283 151.603 179.145 151.6 cv
177.348 151.677 175.657 152.291 174.184 153.174 cv
f
173.614 163.382 mo
172.835 163.306 172.098 163.202 171.436 163.087 cv
171.479 161.154 171.882 159.3 172.583 157.657 cv
172.854 158.736 173.084 159.316 173.845 160.595 cv
173.708 161.496 173.628 162.432 173.614 163.382 cv
f
179.043 155.793 mo
179.03 156.968 179.021 158.177 179.019 159.108 cv
179.015 160.031 179.01 160.7 179.01 160.83 cv
177.962 159.729 177.399 159.11 176.633 158.137 cv
177.149 154.82 178.079 152.201 179.145 151.6 cv
179.106 151.915 179.065 153.798 179.043 155.793 cv
f
175.299 155.668 mo
174.628 157.079 174.129 158.774 173.851 160.594 cv
174.504 161.563 174.907 162.129 176.206 163.55 cv
176.22 161.643 176.375 159.793 176.634 158.129 cv
175.853 157.066 175.605 156.56 175.299 155.668 cv
f
189.423 162.37 mo
189.427 162.487 189.428 162.605 189.428 162.724 cv
189.435 166.495 187.595 169.632 184.711 171.368 cv
184.637 171.424 li
185.992 170.594 187.702 169.188 188.791 166.861 cv
189.957 164.568 189.83 162.031 189.83 162.031 cv
189.772 162.136 189.602 162.268 189.423 162.37 cv
f
176.827 152.154 mo
175.271 152.765 173.871 153.81 172.736 155.11 cv
172.427 156.081 172.427 156.622 172.583 157.657 cv
173.276 156.041 174.241 154.64 175.384 153.592 cv
175.737 152.982 175.956 152.618 176.827 152.154 cv
f
175.296 155.675 mo
175.103 154.803 175.087 154.359 175.38 153.601 cv
176.494 152.576 177.777 151.813 179.145 151.6 cv
177.647 152.001 176.292 153.57 175.296 155.675 cv
f
228.265 167.341 mo
227.827 167.341 227.542 167.36 227.083 167.305 cv
227.083 161.084 li
227.427 161.045 227.674 161.045 228.037 161.045 cv
230.972 161.045 231.775 162.411 231.775 164.175 cv
231.775 166.45 230.382 167.341 228.265 167.341 cv
cp
215.356 166.56 mo
216.969 162.168 li
218.638 166.56 li
215.356 166.56 li
cp
234.681 170.6 mo
233.186 169.106 li
232.301 168.219 231.737 167.69 231.03 167.135 cv
232.583 166.679 233.542 165.483 233.542 164.062 cv
233.542 162.126 231.981 160.678 228.457 160.678 cv
227.216 160.678 226.838 160.698 226.066 160.737 cv
225.292 160.771 224.133 160.848 223.679 160.848 cv
223.679 161.216 li
224.096 161.216 li
225.197 161.216 225.52 161.557 225.52 162.733 cv
225.52 170.706 li
225.52 171.97 225.12 172.271 224.001 172.271 cv
223.685 172.271 li
222.737 172.271 222.337 172.082 221.958 171.077 cv
217.993 160.572 li
216.341 160.572 li
216.513 160.988 li
213.059 170.396 li
212.453 172.043 212.244 172.253 211.011 172.271 cv
209.635 172.271 209.484 172.267 209.37 170.525 cv
208.763 161.926 li
208.724 161.28 209.085 161.262 210.015 161.186 cv
210.015 160.845 li
207.225 160.845 li
202.673 170.41 li
198.1 160.845 li
195.225 160.845 li
195.225 161.186 li
196.403 161.262 196.441 161.604 196.364 162.856 cv
195.91 170.239 li
195.815 171.968 195.644 172.271 194.258 172.271 cv
194.258 172.639 li
198.214 172.639 li
198.214 172.271 li
197.361 172.233 196.633 172.025 196.69 171.057 cv
197.208 162.515 li
197.246 162.515 li
202.084 172.639 li
202.52 172.639 li
207.244 162.515 li
207.283 162.515 li
207.832 171.019 li
207.908 172.025 207.036 172.271 206.145 172.271 cv
206.145 172.639 li
211.021 172.639 li
215.395 172.639 li
215.395 172.271 li
215.09 172.271 li
214.046 172.271 213.554 172.082 213.554 171.569 cv
213.554 171.305 213.8 170.735 213.933 170.377 cv
215.033 167.403 li
218.961 167.403 li
220.231 170.851 li
220.308 171.04 220.441 171.325 220.441 171.627 cv
220.441 172.158 220.042 172.271 218.961 172.271 cv
218.467 172.271 li
218.467 172.639 li
223.679 172.639 li
223.685 172.639 li
229.049 172.639 li
229.049 172.271 li
228.609 172.271 li
227.542 172.271 227.083 171.988 227.083 170.858 cv
227.083 167.671 li
227.389 167.69 227.636 167.709 228.057 167.709 cv
228.57 167.709 228.875 167.69 229.351 167.671 cv
229.81 167.973 230.478 168.522 231.317 169.35 cv
232.565 170.594 li
234.245 172.278 235.098 172.998 238.419 172.847 cv
238.419 172.506 li
236.958 172.412 235.801 171.713 234.681 170.6 cv
cp
0 0 0 0 cmyk
f
257.667 169.867 mo
256.472 171.525 256.13 171.962 255.01 171.962 cv
252.222 171.962 li
251.672 171.962 251.463 171.772 251.463 171.261 cv
251.463 162.523 li
251.463 161.349 251.785 161.217 253.02 161.217 cv
253.721 161.217 li
253.721 160.849 li
248.226 160.849 li
248.135 160.849 li
243.95 160.849 li
243.95 161.217 li
245.164 161.217 245.522 161.538 244.916 162.578 cv
242.247 167.123 li
239.203 162.446 li
238.631 161.576 238.725 161.217 240.216 161.217 cv
240.216 160.849 li
235.17 160.849 li
235.17 161.217 li
236.399 161.252 236.834 161.519 237.76 162.977 cv
241.155 168.239 li
241.155 170.908 li
241.155 171.836 240.809 172.271 239.623 172.271 cv
239.259 172.271 li
239.259 172.641 li
244.48 172.641 li
244.48 172.271 li
244.234 172.271 li
243.079 172.271 242.718 171.874 242.718 170.871 cv
242.718 168.03 li
245.862 162.711 li
246.393 161.82 246.941 161.31 248.226 161.217 cv
248.4 161.217 li
249.595 161.217 249.898 161.634 249.898 162.638 cv
249.898 171.021 li
249.898 171.988 249.576 172.271 248.704 172.271 cv
248.077 172.271 li
248.077 172.639 li
256.547 172.639 li
258.008 169.867 li
257.667 169.867 li
cp
f
294.644 170.737 mo
293.465 171.911 292.404 172.271 289.857 172.271 cv
288.357 172.271 288.3 172.007 288.3 171.231 cv
288.3 161.121 li
288.527 161.103 289.041 161.045 289.819 161.045 cv
292.479 161.045 293.828 161.708 294.703 162.579 cv
295.822 163.697 296.221 165.249 296.221 166.648 cv
296.221 168.6 295.348 170.056 294.644 170.737 cv
cp
261.914 166.56 mo
263.527 162.168 li
265.197 166.56 li
261.914 166.56 li
cp
290.769 160.678 mo
289.782 160.678 288.623 160.698 287.584 160.737 cv
286.545 160.773 285.616 160.809 284.915 160.848 cv
284.915 160.849 li
280.333 160.849 li
280.333 161.217 li
281.847 161.254 282.19 161.463 282.19 162.618 cv
282.19 170.162 li
273.268 160.849 li
270.294 160.849 li
270.294 161.217 li
270.957 161.234 271.452 161.386 271.888 161.689 cv
271.888 171.003 li
271.888 171.874 271.507 172.271 270.333 172.271 cv
270.243 172.271 li
269.294 172.271 268.896 172.082 268.517 171.077 cv
264.551 160.572 li
262.9 160.572 li
263.072 160.988 li
259.618 170.396 li
259.011 172.043 258.803 172.253 257.568 172.271 cv
257.568 172.639 li
261.952 172.639 li
261.952 172.271 li
261.649 172.271 li
260.606 172.271 260.112 172.082 260.112 171.569 cv
260.112 171.305 260.358 170.735 260.491 170.377 cv
261.591 167.403 li
265.519 167.403 li
266.791 170.851 li
266.866 171.04 266.999 171.325 266.999 171.627 cv
266.999 172.158 266.6 172.271 265.519 172.271 cv
265.026 172.271 li
265.026 172.639 li
274.65 172.639 li
274.65 172.271 li
273.04 172.271 272.738 171.988 272.738 170.625 cv
272.738 162.503 li
282.547 172.778 li
283.039 172.778 li
283.039 162.202 li
283.039 161.463 283.491 161.2 284.915 161.2 cv
285.294 161.186 li
286.413 161.186 286.736 161.489 286.736 162.723 cv
286.736 170.89 li
286.736 171.987 286.261 172.271 285.236 172.271 cv
284.915 172.271 li
284.915 172.639 li
290.979 172.639 li
295.784 172.639 297.989 169.205 297.989 166.348 cv
297.989 163.223 295.784 160.678 290.769 160.678 cv
cp
f
202.156 152.96 mo
202.156 153.129 li
201.542 153.139 201.324 153.386 201.324 153.972 cv
201.324 156.439 li
201.324 157.574 200.598 158.791 198.615 158.791 cv
196.87 158.791 195.971 157.794 195.971 156.484 cv
195.971 153.816 li
195.971 153.229 195.805 153.139 195.184 153.129 cv
195.184 152.96 li
197.537 152.96 li
197.537 153.129 li
197.456 153.129 li
196.951 153.129 196.732 153.266 196.732 153.797 cv
196.732 156.339 li
196.732 157.574 197.456 158.314 198.816 158.314 cv
199.849 158.314 200.902 157.886 200.902 156.33 cv
200.902 154.2 li
200.902 153.322 200.763 153.167 200.005 153.129 cv
200.005 152.96 li
202.156 152.96 li
cp
f
211.083 158.722 mo
206.356 153.753 li
206.356 157.688 li
206.356 158.346 206.501 158.484 207.277 158.484 cv
207.277 158.654 li
205.16 158.654 li
205.16 158.484 li
205.197 158.484 li
205.765 158.484 205.947 158.292 205.947 157.87 cv
205.947 153.358 li
205.737 153.213 205.499 153.139 205.179 153.129 cv
205.179 152.96 li
206.61 152.96 li
210.91 157.457 li
210.91 153.808 li
210.91 153.249 210.747 153.147 210.016 153.129 cv
210.016 152.96 li
212.151 152.96 li
212.151 153.129 li
211.466 153.129 211.319 153.249 211.319 153.606 cv
211.319 158.722 li
211.083 158.722 li
cp
f
218.06 158.654 mo
215.833 158.654 li
215.833 158.486 li
216.4 158.457 216.519 158.311 216.519 157.697 cv
216.519 153.791 li
216.519 153.295 216.346 153.158 215.833 153.129 cv
215.833 152.959 li
218.06 152.959 li
218.06 153.129 li
217.482 153.129 217.28 153.259 217.28 153.872 cv
217.28 157.761 li
217.28 158.3 217.428 158.486 218.06 158.486 cv
218.06 158.654 li
cp
f
224.195 158.791 mo
222.209 153.844 li
221.98 153.266 221.87 153.129 221.312 153.129 cv
221.312 152.96 li
223.828 152.96 li
223.828 153.129 li
222.986 153.147 222.786 153.341 222.96 153.761 cv
224.605 157.856 li
226.051 154.08 li
226.15 153.824 226.206 153.642 226.206 153.514 cv
226.206 153.24 225.977 153.129 225.357 153.129 cv
225.357 152.96 li
227.479 152.96 li
227.479 153.129 li
227.002 153.129 226.755 153.35 226.537 153.916 cv
224.649 158.791 li
224.195 158.791 li
cp
f
234.663 156.592 mo
234.493 156.592 li
234.419 155.939 234.244 155.867 233.868 155.867 cv
232.313 155.867 li
232.313 157.826 li
232.313 158.248 232.471 158.332 232.811 158.332 cv
234.226 158.332 li
234.863 158.332 235.056 158.084 235.285 157.29 cv
235.45 157.29 li
235.302 158.654 li
230.436 158.654 li
230.436 158.486 li
230.691 158.486 li
231.425 158.486 231.553 158.282 231.553 157.731 cv
231.553 153.865 li
231.553 153.35 231.434 153.129 230.822 153.129 cv
230.618 153.129 li
230.618 152.959 li
235.019 152.959 li
235.093 154.229 li
234.928 154.229 li
234.809 153.447 234.582 153.283 234.253 153.283 cv
232.313 153.283 li
232.313 155.543 li
233.959 155.543 li
234.289 155.543 234.445 155.387 234.493 154.853 cv
234.663 154.853 li
234.663 156.592 li
cp
f
241.344 156.087 mo
241.135 156.087 240.997 156.096 240.778 156.067 cv
240.778 153.063 li
240.943 153.044 241.063 153.044 241.235 153.044 cv
242.641 153.044 243.025 153.704 243.025 154.558 cv
243.025 155.656 242.358 156.087 241.344 156.087 cv
cp
244.438 157.661 mo
243.715 156.937 li
243.282 156.505 243.007 156.248 242.669 155.987 cv
243.42 155.768 243.889 155.188 243.889 154.502 cv
243.889 153.566 243.126 152.874 241.436 152.874 cv
240.842 152.874 240.658 152.884 240.282 152.902 cv
239.906 152.924 239.349 152.96 239.128 152.96 cv
239.128 153.129 li
239.33 153.129 li
239.861 153.129 240.016 153.294 240.016 153.862 cv
240.016 157.721 li
240.016 158.337 239.825 158.484 239.284 158.484 cv
239.128 158.484 li
239.128 158.654 li
241.719 158.654 li
241.719 158.484 li
241.509 158.484 li
240.997 158.484 240.778 158.346 240.778 157.795 cv
240.778 156.239 li
240.924 156.248 241.042 156.257 241.245 156.257 cv
241.491 156.257 241.637 156.248 241.865 156.239 cv
242.085 156.388 242.404 156.654 242.806 157.058 cv
243.412 157.666 li
244.228 158.478 244.639 158.828 246.242 158.754 cv
246.242 158.589 li
245.537 158.542 244.978 158.202 244.438 157.661 cv
cp
f
248.718 157.25 mo
248.908 158.063 249.545 158.537 250.256 158.537 cv
250.868 158.537 251.515 158.181 251.515 157.46 cv
251.515 156.146 248.591 155.744 248.591 154.147 cv
248.591 153.392 249.281 152.824 250.211 152.824 cv
250.977 152.824 251.132 153.054 251.451 153.054 cv
251.524 153.054 251.561 153.035 251.615 152.96 cv
251.76 152.96 li
251.913 154.12 li
251.76 154.12 li
251.505 153.463 250.922 153.044 250.293 153.044 cv
249.69 153.044 249.27 153.392 249.27 153.902 cv
249.27 155.198 252.194 155.545 252.194 157.223 cv
252.194 158.116 251.406 158.788 250.338 158.788 cv
249.836 158.788 249.198 158.537 249.072 158.537 cv
248.991 158.537 248.926 158.583 248.891 158.654 cv
248.735 158.654 li
248.545 157.25 li
248.718 157.25 li
cp
f
258.622 158.654 mo
256.396 158.654 li
256.396 158.486 li
256.962 158.457 257.081 158.311 257.081 157.697 cv
257.081 153.791 li
257.081 153.295 256.907 153.158 256.396 153.129 cv
256.396 152.959 li
258.622 152.959 li
258.622 153.129 li
258.045 153.129 257.843 153.259 257.843 153.872 cv
257.843 157.761 li
257.843 158.3 257.989 158.486 258.622 158.486 cv
258.622 158.654 li
cp
f
265.125 157.814 mo
265.125 158.31 265.291 158.484 265.848 158.484 cv
266.188 158.484 li
266.188 158.654 li
263.301 158.654 li
263.301 158.484 li
263.64 158.484 li
264.198 158.484 264.363 158.31 264.363 157.814 cv
264.363 153.281 li
262.77 153.281 li
262.405 153.281 262.239 153.494 262.102 154.302 cv
261.938 154.302 li
262.083 152.824 li
262.258 152.824 li
262.267 152.878 262.304 152.914 262.358 152.934 cv
262.415 152.95 262.478 152.96 262.541 152.96 cv
266.947 152.96 li
267.075 152.96 267.211 152.934 267.23 152.824 cv
267.403 152.824 li
267.551 154.302 li
267.386 154.302 li
267.249 153.494 267.084 153.281 266.718 153.281 cv
265.125 153.281 li
265.125 157.814 li
cp
f
275.13 153.79 mo
275.424 153.285 275.25 153.129 274.66 153.129 cv
274.66 152.96 li
276.73 152.96 li
276.73 153.129 li
276.109 153.176 275.844 153.423 275.588 153.854 cv
274.06 156.431 li
274.06 157.806 li
274.06 158.292 274.234 158.484 274.798 158.484 cv
274.917 158.484 li
274.917 158.654 li
272.405 158.654 li
272.405 158.484 li
272.576 158.484 li
273.137 158.484 273.298 158.274 273.298 157.824 cv
273.298 156.531 li
271.683 153.982 li
271.232 153.278 271.021 153.147 270.426 153.129 cv
270.426 152.96 li
272.855 152.96 li
272.855 153.129 li
272.151 153.129 272.105 153.304 272.376 153.726 cv
273.831 155.99 li
275.13 153.79 li
cp
f
287.28 158.57 mo
285.805 158.57 284.641 157.36 284.641 155.646 cv
284.641 154.547 285.283 153.044 286.894 153.044 cv
288.408 153.044 289.488 154.245 289.488 155.949 cv
289.488 157.25 288.774 158.57 287.28 158.57 cv
cp
287.132 152.824 mo
285.182 152.824 283.776 154.106 283.776 155.932 cv
283.776 157.645 285.292 158.79 287.087 158.79 cv
288.865 158.79 290.352 157.498 290.352 155.646 cv
290.352 153.997 288.865 152.824 287.132 152.824 cv
cp
f
296.54 156.463 mo
296.386 156.463 li
296.368 155.93 296.174 155.765 295.735 155.765 cv
294.038 155.765 li
294.038 157.777 li
294.038 158.291 294.148 158.484 294.838 158.484 cv
294.838 158.654 li
292.608 158.654 li
292.608 158.484 li
293.177 158.447 293.277 158.328 293.277 157.583 cv
293.277 153.992 li
293.277 153.405 293.232 153.139 292.591 153.129 cv
292.591 152.959 li
296.692 152.959 li
296.692 154.036 li
296.54 154.036 li
296.529 153.503 296.347 153.283 295.779 153.283 cv
294.038 153.283 li
294.038 155.441 li
295.855 155.441 li
296.194 155.441 296.358 155.248 296.386 154.853 cv
296.54 154.853 li
296.54 156.463 li
cp
f
68.9995 153.036 mo
69.2158 153 69.4146 153 69.6216 153 cv
70.8213 153 71.1011 153.694 71.1011 154.398 cv
71.1011 155.31 70.4697 155.978 69.4863 155.978 cv
69.3154 155.978 69.1162 155.933 68.9995 155.905 cv
68.9995 153.036 li
cp
69.7661 156.148 mo
71.1011 156.148 71.9492 155.48 71.9492 154.425 cv
71.9492 153.73 71.5161 152.828 69.6309 152.828 cv
69.3872 152.828 68.9546 152.837 68.5122 152.855 cv
68.0703 152.874 67.6284 152.901 67.3755 152.91 cv
67.3755 153.081 li
67.8267 153.081 li
68.1421 153.081 68.2505 153.226 68.2505 153.559 cv
68.2505 157.826 li
68.2505 158.25 68.1152 158.35 67.646 158.35 cv
67.52 158.35 li
67.52 158.521 li
70.0186 158.521 li
70.0186 158.35 li
69.7212 158.35 li
69.1528 158.35 68.9995 158.16 68.9995 157.655 cv
68.9995 156.076 li
69.27 156.131 69.4956 156.148 69.7661 156.148 cv
cp
f
77.0098 155.995 mo
76.8018 155.995 76.6665 156.004 76.4502 155.978 cv
76.4502 153.018 li
76.6123 153 76.73 153 76.9009 153 cv
78.2905 153 78.6694 153.649 78.6694 154.489 cv
78.6694 155.571 78.0107 155.995 77.0098 155.995 cv
cp
80.0586 157.547 mo
79.3462 156.834 li
78.9219 156.41 78.6514 156.157 78.3174 155.896 cv
79.0571 155.679 79.5176 155.111 79.5176 154.435 cv
79.5176 153.514 78.7686 152.828 77.0996 152.828 cv
76.5132 152.828 76.3325 152.837 75.9629 152.855 cv
75.5933 152.874 75.043 152.91 74.8262 152.91 cv
74.8262 153.081 li
75.0249 153.081 li
75.5479 153.081 75.7012 153.244 75.7012 153.803 cv
75.7012 157.601 li
75.7012 158.205 75.5117 158.35 74.9795 158.35 cv
74.8262 158.35 li
74.8262 158.521 li
77.3794 158.521 li
77.3794 158.35 li
77.1719 158.35 li
76.6665 158.35 76.4502 158.214 76.4502 157.673 cv
76.4502 156.148 li
76.5942 156.157 76.7119 156.167 76.9102 156.167 cv
77.1538 156.167 77.2983 156.157 77.5234 156.148 cv
77.7402 156.293 78.0557 156.555 78.4531 156.951 cv
79.0479 157.547 li
79.8511 158.35 80.2568 158.692 81.8354 158.621 cv
81.8354 158.458 li
81.1411 158.412 80.5908 158.078 80.0586 157.547 cv
cp
f
87.293 158.44 mo
85.8408 158.44 84.6948 157.249 84.6948 155.562 cv
84.6948 154.48 85.3262 153 86.9136 153 cv
88.4023 153 89.4668 154.182 89.4668 155.859 cv
89.4668 157.141 88.7632 158.44 87.293 158.44 cv
cp
87.1484 152.774 mo
85.2271 152.774 83.8467 154.047 83.8467 155.842 cv
83.8467 157.528 85.3354 158.665 87.1035 158.665 cv
88.8535 158.665 90.3149 157.385 90.3149 155.562 cv
90.3149 153.938 88.8535 152.774 87.1484 152.774 cv
cp
f
99.0015 158.098 mo
98.1089 158.557 96.9629 158.665 96.584 158.665 cv
94.6084 158.665 93.688 157.141 93.688 155.823 cv
93.688 154.47 94.6353 152.774 96.8364 152.774 cv
97.8018 152.774 98.4419 153.081 98.6313 153.081 cv
98.7129 153.081 98.7852 153.063 98.8394 153.018 cv
98.9653 153.018 li
98.9653 154.48 li
98.7852 154.48 li
98.5415 153.352 97.7749 153 96.9355 153 cv
95.3481 153 94.5361 154.317 94.5361 155.77 cv
94.5361 157.619 95.835 158.44 96.8726 158.44 cv
97.2876 158.44 97.748 158.35 98.2529 158.098 cv
98.2529 156.96 li
98.2529 156.445 98.0723 156.275 97.5313 156.275 cv
97.1973 156.275 li
97.1973 156.112 li
99.6328 156.112 li
99.6328 156.275 li
99.1821 156.302 99.0015 156.456 99.0015 156.844 cv
99.0015 158.098 li
cp
f
104.585 155.995 mo
104.377 155.995 104.242 156.004 104.026 155.978 cv
104.026 153.018 li
104.188 153 104.305 153 104.477 153 cv
105.866 153 106.245 153.649 106.245 154.489 cv
106.245 155.571 105.586 155.995 104.585 155.995 cv
cp
107.634 157.547 mo
106.921 156.834 li
106.497 156.41 106.227 156.157 105.893 155.896 cv
106.633 155.679 107.093 155.111 107.093 154.435 cv
107.093 153.514 106.344 152.828 104.675 152.828 cv
104.088 152.828 103.909 152.837 103.538 152.855 cv
103.168 152.874 102.618 152.91 102.402 152.91 cv
102.402 153.081 li
102.6 153.081 li
103.124 153.081 103.277 153.244 103.277 153.803 cv
103.277 157.601 li
103.277 158.205 103.088 158.35 102.555 158.35 cv
102.402 158.35 li
102.402 158.521 li
104.955 158.521 li
104.955 158.35 li
104.748 158.35 li
104.242 158.35 104.026 158.214 104.026 157.673 cv
104.026 156.148 li
104.17 156.157 104.287 156.167 104.486 156.167 cv
104.729 156.167 104.874 156.157 105.099 156.148 cv
105.315 156.293 105.631 156.555 106.028 156.951 cv
106.624 157.547 li
107.427 158.35 107.833 158.692 109.411 158.621 cv
109.411 158.458 li
108.717 158.412 108.167 158.078 107.634 157.547 cv
cp
f
113.948 155.635 mo
114.715 153.532 li
115.509 155.635 li
113.948 155.635 li
cp
117.087 157.781 mo
115.202 152.774 li
114.417 152.774 li
114.498 152.973 li
112.856 157.456 li
112.568 158.242 112.469 158.341 111.882 158.35 cv
111.882 158.521 li
113.966 158.521 li
113.966 158.35 li
113.822 158.35 li
113.326 158.35 113.091 158.26 113.091 158.016 cv
113.091 157.89 113.208 157.619 113.271 157.447 cv
113.795 156.031 li
115.662 156.031 li
116.267 157.673 li
116.302 157.764 116.366 157.899 116.366 158.043 cv
116.366 158.296 116.176 158.35 115.662 158.35 cv
115.428 158.35 li
115.428 158.521 li
117.908 158.521 li
117.908 158.35 li
117.457 158.35 117.268 158.26 117.087 157.781 cv
cp
f
124.168 158.521 mo
121.868 153.713 li
121.85 153.713 li
121.606 157.772 li
121.579 158.232 121.922 158.332 122.328 158.35 cv
122.328 158.521 li
120.452 158.521 li
120.452 158.35 li
121.11 158.35 121.191 158.205 121.236 157.385 cv
121.453 153.875 li
121.489 153.28 121.471 153.117 120.912 153.081 cv
120.912 152.919 li
122.274 152.919 li
124.448 157.466 li
126.613 152.919 li
127.939 152.919 li
127.939 153.081 li
127.497 153.117 127.326 153.126 127.344 153.434 cv
127.632 157.52 li
127.687 158.35 127.759 158.35 128.417 158.35 cv
128.417 158.521 li
126.099 158.521 li
126.099 158.35 li
126.523 158.35 126.938 158.232 126.902 157.755 cv
126.64 153.713 li
126.622 153.713 li
124.376 158.521 li
124.168 158.521 li
cp
f
134.821 158.521 mo
132.521 153.713 li
132.503 153.713 li
132.259 157.772 li
132.232 158.232 132.575 158.332 132.981 158.35 cv
132.981 158.521 li
131.104 158.521 li
131.104 158.35 li
131.763 158.35 131.844 158.205 131.889 157.385 cv
132.106 153.875 li
132.142 153.28 132.124 153.117 131.565 153.081 cv
131.565 152.919 li
132.927 152.919 li
135.101 157.466 li
137.266 152.919 li
138.592 152.919 li
138.592 153.081 li
138.15 153.117 137.979 153.126 137.997 153.434 cv
138.286 157.52 li
138.339 158.35 138.412 158.35 139.07 158.35 cv
139.07 158.521 li
136.752 158.521 li
136.752 158.35 li
137.176 158.35 137.591 158.232 137.555 157.755 cv
137.293 153.713 li
137.275 153.713 li
135.029 158.521 li
134.821 158.521 li
cp
f
144.239 158.521 mo
142.046 158.521 li
142.046 158.35 li
142.606 158.322 142.723 158.178 142.723 157.574 cv
142.723 153.73 li
142.723 153.244 142.552 153.108 142.046 153.081 cv
142.046 152.91 li
144.239 152.91 li
144.239 153.081 li
143.67 153.081 143.472 153.207 143.472 153.813 cv
143.472 157.637 li
143.472 158.169 143.616 158.35 144.239 158.35 cv
144.239 158.521 li
cp
f
153.151 158.584 mo
148.479 153.694 li
148.479 157.565 li
148.479 158.214 148.623 158.35 149.389 158.35 cv
149.389 158.521 li
147.296 158.521 li
147.296 158.35 li
147.332 158.35 li
147.892 158.35 148.072 158.16 148.072 157.745 cv
148.072 153.307 li
147.865 153.162 147.63 153.091 147.314 153.081 cv
147.314 152.91 li
148.73 152.91 li
152.98 157.339 li
152.98 153.748 li
152.98 153.198 152.817 153.1 152.095 153.081 cv
152.095 152.91 li
154.207 152.91 li
154.207 153.081 li
153.53 153.081 153.386 153.198 153.386 153.55 cv
153.386 158.584 li
153.151 158.584 li
cp
f
162.568 158.098 mo
161.675 158.557 160.53 158.665 160.151 158.665 cv
158.175 158.665 157.255 157.141 157.255 155.823 cv
157.255 154.47 158.202 152.774 160.403 152.774 cv
161.369 152.774 162.009 153.081 162.199 153.081 cv
162.28 153.081 162.352 153.063 162.406 153.018 cv
162.532 153.018 li
162.532 154.48 li
162.352 154.48 li
162.108 153.352 161.341 153 160.502 153 cv
158.915 153 158.103 154.317 158.103 155.77 cv
158.103 157.619 159.402 158.44 160.439 158.44 cv
160.854 158.44 161.314 158.35 161.82 158.098 cv
161.82 156.96 li
161.82 156.445 161.639 156.275 161.098 156.275 cv
160.764 156.275 li
160.764 156.112 li
163.2 156.112 li
163.2 156.275 li
162.749 156.302 162.568 156.456 162.568 156.844 cv
162.568 158.098 li
cp
f
80.0767 166.305 mo
81.6748 161.924 li
83.3296 166.305 li
80.0767 166.305 li
cp
97.1143 160.626 mo
97.1143 160.983 li
98.6187 161.021 98.957 161.229 98.957 162.375 cv
98.957 169.859 li
90.0996 160.626 li
87.1475 160.626 li
87.1475 160.983 li
87.8062 161.002 88.2949 161.152 88.7275 161.453 cv
88.7275 170.705 li
88.7275 171.411 88.4761 171.805 87.749 171.925 cv
87.2065 171.83 86.9072 171.541 86.6206 170.78 cv
82.6904 160.344 li
81.0547 160.344 li
81.2236 160.758 li
77.8013 170.104 li
77.2729 171.54 77.0488 171.875 76.1743 171.947 cv
77.4248 169.577 li
77.0864 169.577 li
75.9014 171.213 75.563 171.646 74.4536 171.646 cv
71.6895 171.646 li
71.144 171.646 70.937 171.457 70.937 170.95 cv
70.937 162.281 li
70.937 161.115 71.2568 160.983 72.4795 160.983 cv
73.1748 160.983 li
73.1748 160.626 li
67.6279 160.626 li
67.6279 160.983 li
67.8906 160.983 li
69.0757 160.983 69.3765 161.396 69.3765 162.395 cv
69.3765 170.724 li
69.3765 171.684 69.0566 171.966 68.1914 171.966 cv
67.5713 171.966 li
67.5713 172.322 li
75.7705 172.322 li
75.9771 172.322 li
80.1143 172.322 li
80.1143 171.966 li
79.813 171.966 li
78.7793 171.966 78.29 171.777 78.29 171.27 cv
78.29 171.007 78.5347 170.442 78.666 170.085 cv
79.7573 167.133 li
83.6489 167.133 li
84.9092 170.556 li
84.9849 170.743 85.1162 171.024 85.1162 171.326 cv
85.1162 171.853 84.7212 171.966 83.6489 171.966 cv
83.1602 171.966 li
83.1602 172.322 li
87.1099 172.322 li
88.332 172.322 li
91.4727 172.322 li
91.4727 171.966 li
89.874 171.966 89.5732 171.684 89.5732 170.329 cv
89.5732 162.263 li
99.314 172.454 li
99.8027 172.454 li
99.8027 161.962 li
99.8027 161.229 100.104 160.983 101.514 160.983 cv
101.514 160.626 li
97.1143 160.626 li
cp
f
112.102 171.438 mo
110.24 172.398 107.852 172.623 107.063 172.623 cv
102.944 172.623 101.026 169.445 101.026 166.7 cv
101.026 163.88 103 160.344 107.589 160.344 cv
109.601 160.344 110.936 160.983 111.331 160.983 cv
111.5 160.983 111.65 160.946 111.764 160.853 cv
112.026 160.853 li
112.026 163.898 li
111.65 163.898 li
111.143 161.548 109.544 160.814 107.795 160.814 cv
104.486 160.814 102.794 163.56 102.794 166.587 cv
102.794 170.442 105.501 172.153 107.664 172.153 cv
108.529 172.153 109.488 171.966 110.541 171.438 cv
110.541 169.069 li
110.541 167.998 110.165 167.641 109.037 167.641 cv
108.341 167.641 li
108.341 167.303 li
113.418 167.303 li
113.418 167.641 li
112.478 167.696 112.102 168.017 112.102 168.824 cv
112.102 171.438 li
cp
f
126.657 160.626 mo
126.657 160.983 li
125.397 161.002 124.946 161.51 124.946 162.714 cv
124.946 167.791 li
124.946 170.123 123.46 172.623 119.38 172.623 cv
115.789 172.623 113.946 170.574 113.946 167.885 cv
113.946 162.395 li
113.946 161.19 113.607 161.002 112.328 160.983 cv
112.328 160.626 li
117.161 160.626 li
117.161 160.983 li
116.992 160.983 li
115.958 160.983 115.506 161.266 115.506 162.356 cv
115.506 167.584 li
115.506 170.123 116.992 171.646 119.793 171.646 cv
121.918 171.646 124.081 170.762 124.081 167.565 cv
124.081 163.184 li
124.081 161.378 123.799 161.059 122.238 160.983 cv
122.238 160.626 li
126.657 160.626 li
cp
f
128.163 166.305 mo
129.761 161.924 li
131.416 166.305 li
128.163 166.305 li
cp
134.707 170.78 mo
130.776 160.344 li
129.141 160.344 li
129.31 160.758 li
125.887 170.104 li
125.286 171.74 125.079 171.946 123.856 171.966 cv
123.856 172.322 li
128.2 172.322 li
128.2 171.966 li
127.899 171.966 li
126.865 171.966 126.376 171.777 126.376 171.27 cv
126.376 171.007 126.621 170.442 126.752 170.085 cv
127.843 167.133 li
131.735 167.133 li
132.996 170.556 li
133.07 170.743 133.202 171.024 133.202 171.326 cv
133.202 171.853 132.808 171.966 131.735 171.966 cv
131.247 171.966 li
131.247 172.322 li
136.418 172.322 li
136.418 171.966 li
135.478 171.966 135.083 171.777 134.707 170.78 cv
cp
f
146.028 171.438 mo
144.166 172.398 141.778 172.623 140.988 172.623 cv
136.87 172.623 134.952 169.445 134.952 166.7 cv
134.952 163.88 136.926 160.344 141.515 160.344 cv
143.527 160.344 144.862 160.983 145.257 160.983 cv
145.426 160.983 145.576 160.946 145.689 160.853 cv
145.953 160.853 li
145.953 163.898 li
145.576 163.898 li
145.069 161.548 143.47 160.814 141.721 160.814 cv
138.412 160.814 136.719 163.56 136.719 166.587 cv
136.719 170.442 139.427 172.153 141.59 172.153 cv
142.455 172.153 143.414 171.966 144.467 171.438 cv
144.467 169.069 li
144.467 167.998 144.091 167.641 142.962 167.641 cv
142.267 167.641 li
142.267 167.303 li
147.344 167.303 li
147.344 167.641 li
146.404 167.696 146.028 168.017 146.028 168.824 cv
146.028 171.438 li
cp
f
157.537 162.563 mo
157.537 161.51 158.402 160.796 159.643 160.796 cv
160.94 160.796 162.145 161.661 162.671 163.015 cv
162.99 163.015 li
162.671 160.626 li
162.37 160.626 li
162.257 160.776 162.182 160.814 162.032 160.814 cv
161.374 160.814 161.053 160.344 159.474 160.344 cv
157.556 160.344 156.127 161.51 156.127 163.071 cv
156.127 166.361 162.163 167.189 162.163 169.897 cv
162.163 171.382 160.828 172.116 159.568 172.116 cv
158.101 172.116 156.785 171.138 156.39 169.465 cv
156.033 169.465 li
156.041 169.521 li
155.919 169.521 li
155.449 171.138 155.055 171.646 153.738 171.646 cv
150.842 171.646 li
150.146 171.646 149.827 171.477 149.827 170.611 cv
149.827 166.605 li
153.004 166.605 li
153.775 166.605 154.133 166.757 154.284 168.091 cv
154.641 168.091 li
154.641 164.519 li
154.284 164.519 li
154.189 165.609 153.87 165.929 153.192 165.929 cv
149.827 165.929 li
149.827 161.303 li
153.794 161.303 li
154.472 161.303 154.941 161.642 155.186 163.239 cv
155.524 163.239 li
155.374 160.626 li
146.348 160.626 li
146.348 160.983 li
146.762 160.983 li
148.021 160.983 148.266 161.435 148.266 162.487 cv
148.266 170.423 li
148.266 171.552 148.002 171.966 146.498 171.966 cv
145.972 171.966 li
145.972 172.322 li
155.957 172.322 li
156.163 170.406 li
156.428 172.322 li
156.748 172.322 li
156.823 172.21 156.954 172.116 157.124 172.116 cv
157.387 172.116 158.703 172.623 159.737 172.623 cv
161.938 172.623 163.573 171.251 163.573 169.408 cv
163.573 165.948 157.537 165.233 157.537 162.563 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
%ADOBeginPageMarks
1.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
false sop
/2 
<<
/Name (All)
/5 
[/DeviceCMYK] /CSA add_res
/CSA /5 get_csa_by_name
/MappedCSA /5 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
0 sep
@
.25 lw
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
1 /2 /CSD get_res sepcs
1 sep
@
true sop
.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPR+Courier /Courier findfont ct_VMDictPut/RJHRPR+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 18{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c 5{/.notdef}rp /i /.notdef /k /l 3{/.notdef}rp /p 7{/.notdef}rp /x 40{/.notdef}rp /degree 94{/.notdef}rp]RJHRPR+Courier nfRJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp.3996 lw
@
1 0 0 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 .05 0 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 1 0 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 .05 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 1 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 0 .05 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 0 1 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPR+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s 4{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPR+Courier nfRJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan) false chp@
1 0 0 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan)sh0 .05 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPR+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPR+Courier nfRJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta) false chp@
0 1 0 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta)sh0 0 .05 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPR+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPR+Courier nfRJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow) false chp@
0 0 1 0 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow)sh0 0 0 .05 nzopmsc
%%IncludeResource: font Courier
/RJHRPR+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 7{/.notdef}rp /B /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPR+Courier nfRJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black) false chp@
0 0 0 1 nzopmsc
RJHRPR+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black)sh%ADOEndPageMarks
pgrs
%%PageTrailer
[
[/CSA [/4 /5 ]]
[/CSD [/2 ]]
] del_res
/RJHRPR+Courier*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
Adobe_AGM_OnHost_Seps/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 1 4
%%PlateColor: Black
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1) /PlateColor (Black)]
[/TrimBox [36 36 180 324]]
[/BleedBox [27 27 189 333]]
]xpdfm
/Black /k Adobe_AGM_OnHost_Seps /plate_setup gx
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_AGM_Core begin
60 45 getspotfunction setscreen
end
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[0 -1 1 0 0 360 ]ct
gsave
np
gsave
27 27 mo
27 189 li
333 189 li
333 27 li
cp
clp
333 189 mo
27 189 li
27 27 li
333 27 li
333 189 li
cp
false sop
/6 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
82.6406 84.3184 mo
92.2529 78.4033 96.1006 76.8115 103.478 66.1992 cv
105.608 63.1338 107.749 73.9648 107.749 73.9648 cv
88.335 92.7305 li
88.335 92.7305 79.2754 86.3896 82.6406 84.3184 cv
cp
.788724 1 .346899 .303899 cmyk
f
64.4102 48.5859 mo
65.375 48.5859 66.5801 48.1299 66.5801 48.1299 cv
65.3213 51.3721 li
63.1694 52.7061 li
63.1694 52.7061 61.8345 49.4453 62.0303 49.0791 cv
62.2261 48.7129 64.4102 48.5859 64.4102 48.5859 cv
cp
.890898 .318517 1 .249577 cmyk
f
70.251 43.335 mo
68.9111 43.709 62.3564 48.2109 62.0483 49.0146 cv
61.7402 49.8184 68.5361 47.5684 68.8579 48.0498 cv
83.1113 56.8379 84.8877 62.8223 96.0415 79.5527 cv
96.271 79.8975 99.1641 76.7109 99.0117 76.498 cv
97.0845 73.8008 85.5762 53.0859 70.251 43.335 cv
cp
.627649 0 1 0 cmyk
f
85.2705 61.332 mo
86.4282 62.2568 74.6611 68.7266 72.25 83.6768 cv
71.3101 89.502 67.7329 72.3613 70.793 66.8965 cv
73.853 61.4326 80.4482 57.4736 85.2705 61.332 cv
cp
.890898 .318517 1 .249577 cmyk
f
84.3062 60.6885 mo
73.5356 64.0645 72.1543 76.4102 71.6719 84.2861 cv
71.4136 88.5078 77.7153 68.4053 82.8599 65.3506 cv
88.667 61.9023 84.3062 60.6885 84.3062 60.6885 cv
cp
.627649 0 1 0 cmyk
f
146.059 68.7871 mo
130.563 55.5166 110.559 59.4111 104.125 65.2939 cv
99.5952 69.4355 103.913 73.7578 97.6538 79.6592 cv
93.124 83.9297 84.0645 81.8604 80.5698 86.1309 cv
71.936 96.6836 73.4497 114.177 82.0293 128.027 cv
82.083 127.959 82.1353 127.892 82.1904 127.822 cv
82.8628 126.994 84.0542 125.467 85.7632 123.24 cv
86.1763 122.672 86.6948 120.6 87.3159 117.028 cv
87.5742 115.476 88.04 114.311 88.7139 113.533 cv
90.8877 115.009 li
95.1323 108.951 97.4111 105.718 97.7212 105.302 cv
100.568 100.799 101.993 97.3311 101.993 94.8965 cv
98.8862 96.5537 96.1685 97.5635 93.8389 97.9258 cv
93.8389 97.1484 li
93.1401 96.3721 li
93.8389 93.498 li
96.1685 91.6875 100.387 89.8486 106.497 87.9854 cv
112.449 86.1738 117.031 85.2676 120.241 85.2676 cv
123.503 85.2676 126.065 86.1484 127.929 87.9082 cv
129.793 89.668 130.725 92.1787 130.725 95.4404 cv
130.725 104.863 123.554 112.137 109.214 117.261 cv
106.314 118.298 101.189 119.798 93.8389 121.765 cv
91.7153 122.335 89.9297 123.706 88.481 125.881 cv
88.1699 126.347 87.1606 128.314 85.4526 131.782 cv
85.3389 132.015 85.2246 132.234 85.1094 132.447 cv
97.7778 148.663 121.042 157.311 148.819 137.469 cv
151.717 135.398 154.085 132.854 156.012 130.126 cv
155.107 130.126 li
154.9 130.126 152.363 129.737 147.498 128.961 cv
145.115 128.547 143.33 128.34 142.14 128.34 cv
140.016 128.34 137.531 128.6 134.685 129.116 cv
128.162 130.255 124.149 130.824 122.648 130.824 cv
119.231 130.824 117.523 129.997 117.523 128.34 cv
117.523 127.513 118.325 125.984 119.93 123.758 cv
120.5 123.033 121.612 121.584 123.27 119.409 cv
131.293 108.591 137.325 96.2949 141.363 82.5244 cv
142.761 77.8135 144.314 75.4561 146.022 75.4561 cv
146.798 75.4561 147.536 75.9111 148.235 76.8154 cv
148.934 77.7217 149.284 78.5898 149.284 79.418 cv
149.284 80.2979 147.653 84.0508 144.392 90.6768 cv
142.373 94.8193 139.111 101.188 134.607 109.781 cv
127.463 123.448 li
130.775 124.225 134.502 124.612 138.645 124.612 cv
141.078 124.612 144.714 124.432 149.556 124.069 cv
153.95 123.74 157.349 123.561 159.76 123.53 cv
162.842 116.733 163.793 110.147 163.793 107.676 cv
163.793 103.488 164.07 84.2139 146.059 68.7871 cv
cp
.547906 .935973 0 0 cmyk
f
114.34 110.505 mo
122.622 105.535 126.764 100.902 126.764 96.6055 cv
126.764 94.2246 125.936 92.3867 124.279 91.0908 cv
122.83 89.9531 120.862 89.3838 118.377 89.3838 cv
116.306 89.3838 114.288 89.7715 112.32 90.5479 cv
110.042 91.4795 108.489 92.7227 107.662 94.2754 cv
106.936 96.0361 106.211 97.7695 105.487 99.4785 cv
99.5078 107.709 li
97.333 110.868 95.6763 113.818 94.5381 116.563 cv
95.2368 117.339 li
95.9355 117.339 li
100.595 117.339 106.729 115.061 114.34 110.505 cv
cp
f
126.192 146.653 mo
131.935 146.498 107.923 155.633 99.8726 134.766 cv
97.9409 129.759 107.721 147.148 126.192 146.653 cv
cp
.788724 1 .346899 .303899 cmyk
f
89.5435 107.787 mo
90.6699 113.42 77.5928 91.3076 96.791 79.8311 cv
101.398 77.0781 85.9194 89.668 89.5435 107.787 cv
cp
f
229.947 80.5176 mo
241.903 80.5176 li
261.241 121.04 li
280.5 80.5176 li
292.295 80.5176 li
292.295 82.041 li
288.364 82.3623 286.839 82.4434 286.999 85.1709 cv
289.567 121.521 li
290.049 128.902 290.691 128.902 296.549 128.902 cv
296.549 130.428 li
275.926 130.428 li
275.926 128.902 li
279.698 128.902 283.389 127.859 283.068 123.606 cv
280.741 87.6582 li
280.581 87.6582 li
260.6 130.428 li
258.754 130.428 li
238.292 87.6582 li
238.132 87.6582 li
235.966 123.768 li
235.725 127.859 238.774 128.743 242.385 128.902 cv
242.385 130.428 li
225.694 130.428 li
225.694 128.902 li
231.552 128.902 232.275 127.619 232.676 120.317 cv
234.602 89.1025 li
234.923 83.8066 234.922 82.3623 229.947 82.041 cv
224.572 82.1221 222.806 84.2891 222.806 89.4238 cv
222.806 111.09 li
222.806 121.04 216.467 131.711 199.054 131.711 cv
183.728 131.711 175.864 122.965 175.864 111.49 cv
175.864 88.0596 li
175.864 82.9248 174.42 82.1221 168.963 82.041 cv
168.963 80.5176 li
189.585 80.5176 li
189.585 82.041 li
188.864 82.041 li
184.45 82.041 182.525 83.2461 182.525 87.8994 cv
182.525 110.206 li
182.525 121.04 188.864 127.539 200.82 127.539 cv
209.887 127.539 219.115 123.768 219.115 110.127 cv
219.115 91.4307 li
219.115 83.7266 217.911 82.3623 211.251 82.041 cv
211.251 80.5176 li
229.947 80.5176 li
cp
0 0 0 0 cmyk
f
168.501 162.27 mo
168.501 168.159 173.276 172.935 179.165 172.935 cv
185.056 172.935 189.832 168.159 189.832 162.27 cv
189.832 156.379 185.056 151.604 179.165 151.604 cv
173.276 151.604 168.501 156.379 168.501 162.27 cv
cp
f
189.83 162.031 mo
189.83 162.079 189.64 162.24 189.438 162.362 cv
189.433 162.363 189.428 162.367 189.422 162.37 cv
189.148 162.521 188.758 162.661 188.273 162.787 cv
187.775 162.919 187.16 163.038 186.485 163.142 cv
185.809 163.245 185.056 163.322 184.246 163.395 cv
184.246 163.393 184.246 163.396 184.246 163.395 cv
183.208 163.487 182.581 163.527 181.754 163.567 cv
180.874 163.605 179.838 163.625 179.061 163.622 cv
179.061 163.741 179.061 163.858 179.061 163.977 cv
179.061 164.81 179.039 165.604 179.042 166.351 cv
179.064 170.445 179.058 170.444 179.179 172.935 cv
185.07 172.935 189.838 168.158 189.838 162.27 cv
189.838 162.27 189.83 162.114 189.83 162.031 cv
0 .18 1 0 cmyk
f
179.009 163.977 mo
179.01 164.81 179.013 165.604 179.016 166.353 cv
180.725 167.971 180.725 167.971 181.439 168.684 cv
181.626 167.33 181.731 165.714 181.729 163.921 cv
181.729 163.805 181.728 163.686 181.727 163.569 cv
180.648 163.611 179.935 163.624 179.008 163.622 cv
179.008 163.739 179.009 163.859 179.009 163.977 cv
0 0 0 1 cmyk
f
182.922 170.507 mo
182.548 169.898 182.208 169.501 181.436 168.69 cv
181.074 171.287 180.427 172.886 179.631 172.921 cv
179.697 172.918 179.802 172.912 179.869 172.908 cv
179.955 172.901 180.059 172.893 180.142 172.886 cv
181.246 172.787 182.195 171.941 182.922 170.507 cv
f
184.117 166.151 mo
184.12 166.138 183.502 169.356 182.923 170.507 cv
183.256 171.15 183.272 171.406 183.137 171.83 cv
184.171 171.044 185.026 169.858 185.614 168.391 cv
185.236 167.623 184.981 167.214 184.117 166.151 cv
f
181.063 172.768 mo
181.295 172.727 181.283 172.722 181.712 172.626 cv
181.968 172.554 li
182.756 172.309 182.894 172.184 183.139 171.819 cv
182.437 172.35 181.685 172.674 180.845 172.804 cv
181.063 172.768 li
cp
f
185.805 170.15 mo
187.342 168.408 188.281 165.948 188.278 163.142 cv
188.278 163.022 188.275 162.905 188.273 162.787 cv
187.776 162.919 187.16 163.038 186.485 163.142 cv
186.495 163.26 186.499 163.38 186.499 163.498 cv
186.501 165.323 186.191 166.981 185.627 168.384 cv
185.945 169.199 185.949 169.539 185.805 170.15 cv
f
184.247 163.395 mo
183.208 163.486 182.555 163.526 181.727 163.567 cv
183.189 165.088 183.499 165.443 184.117 166.151 cv
184.205 165.398 184.25 164.598 184.25 163.761 cv
184.249 163.641 184.248 163.515 184.247 163.395 cv
f
176.827 152.154 mo
177.422 151.913 177.993 151.666 179.145 151.6 cv
178.364 151.671 177.551 151.888 176.827 152.154 cv
f
186.308 163.14 mo
185.752 163.067 185.288 162.128 185.532 161.173 cv
184.751 161.714 183.872 160.604 184 159.576 cv
184.068 159.032 184.424 158.551 185.046 158.773 cv
184.793 157.906 184.477 157.084 184.107 156.328 cv
183.556 156.398 182.951 156.456 182.309 156.502 cv
182.879 157.363 182.321 158.163 181.525 158.037 cv
180.949 157.943 180.409 157.339 180.56 156.618 cv
180.093 156.943 179.134 156.814 179.044 155.792 cv
179.018 157.964 179.005 160.737 179.009 163.622 cv
181.842 163.65 185.164 163.349 186.485 163.142 cv
186.485 163.142 186.485 163.146 186.485 163.142 cv
186.431 163.146 186.359 163.147 186.308 163.14 cv
0 1 .66 .2 cmyk
f
172.275 165.282 mo
173.067 164.975 174.064 166.346 173.716 167.261 cv
173.555 167.684 173.138 167.802 172.701 167.547 cv
172.936 168.347 173.242 169.079 173.608 169.727 cv
174.169 169.803 174.8 169.869 175.488 169.922 cv
174.935 169.241 175.379 168.683 176.117 168.721 cv
176.751 168.753 177.589 169.279 177.41 170.001 cv
177.98 169.743 178.943 169.953 179.061 170.696 cv
179.032 169.098 179.015 166.748 179.01 163.977 cv
179.01 163.854 179.009 163.743 179.008 163.622 cv
178.108 163.625 177.196 163.591 176.289 163.553 cv
174.359 163.473 173.049 163.362 171.437 163.087 cv
171.434 163.094 171.437 163.084 171.437 163.087 cv
172.262 163.367 172.489 164.599 172.275 165.282 cv
f
184.169 155.459 mo
184.169 155.459 li
184.172 155.459 184.225 155.462 184.228 155.462 cv
184.228 155.462 184.23 155.462 184.232 155.462 cv
184.336 155.462 184.433 155.422 184.527 155.406 cv
185.138 155.294 186.523 154.959 186.523 154.558 cv
186.523 154.558 187.065 155.101 187.463 155.855 cv
187.51 155.938 187.542 156.013 187.584 156.132 cv
187.632 156.267 187.662 156.421 187.656 156.496 cv
187.638 156.727 187.492 156.729 187.34 156.662 cv
187.324 156.656 187.308 156.649 187.291 156.641 cv
186.743 156.395 186.563 155.892 186.458 155.686 cv
186.179 155.772 185.718 155.972 185.334 156.048 cv
185.29 156.057 185.208 156.076 185.162 156.083 cv
185.614 156.828 186.044 157.715 186.353 158.574 cv
186.89 158.021 187.731 159.046 187.771 160.035 cv
187.796 160.616 187.535 161.134 187.004 160.946 cv
187.428 161.733 187.292 162.889 186.485 163.143 cv
186.353 160.556 185.913 158.31 184.209 155.462 cv
184.109 155.462 li
f
184.223 155.396 mo
184.223 155.396 li
182.865 153.321 181.785 152.6 180.407 152.055 cv
180.133 151.946 179.196 151.596 179.148 151.584 cv
179.152 151.601 li
179.394 151.955 179.881 152.172 179.986 152.202 cv
179.956 152.332 179.977 152.591 180.426 152.915 cv
180.497 152.967 180.562 153.006 180.627 153.039 cv
181.321 153.403 181.475 153.119 181.507 153.007 cv
181.512 153.004 181.515 153.002 181.52 152.998 cv
181.73 153.154 182.142 153.484 182.597 154.002 cv
182.86 154.316 183.107 154.591 183.293 154.866 cv
182.865 154.92 182.298 154.97 181.735 155.011 cv
181.704 154.33 181.213 153.991 180.903 153.876 cv
180.228 153.625 180.005 154.42 180.299 154.979 cv
179.765 154.69 179.146 154.947 179.058 155.792 cv
181.17 155.779 182.686 155.688 184.238 155.459 cv
184.238 155.333 li
f
184.341 153.526 mo
184.335 153.516 184.329 153.479 184.336 153.451 cv
184.344 153.424 184.367 153.401 184.367 153.401 cv
184.367 153.401 184.377 153.373 184.418 153.35 cv
184.527 153.288 184.849 153.256 185.741 153.872 cv
183.892 152.418 181.901 151.82 180.211 151.654 cv
179.973 151.627 179.531 151.608 179.531 151.608 cv
180.067 151.656 180.434 151.76 180.52 151.79 cv
180.589 151.813 180.643 151.838 180.676 151.838 cv
180.679 151.838 180.681 151.838 180.681 151.838 cv
180.788 151.838 180.911 151.911 181.062 151.954 cv
181.227 152.003 181.501 152.124 181.747 152.239 cv
181.993 152.355 182.356 152.624 182.358 152.77 cv
182.302 152.804 182.284 152.818 182.119 152.773 cv
182.75 153.225 183.656 154.074 184.19 154.699 cv
184.557 154.629 185.104 154.551 185.357 154.467 cv
185.34 154.484 184.523 153.873 184.341 153.526 cv
f
173.498 170.317 mo
172.583 170.15 172.057 170.013 171.706 169.834 cv
171.648 169.803 171.629 169.803 171.615 169.8 cv
171.608 169.8 171.096 169.273 170.644 168.688 cv
170.318 168.263 170.04 167.782 170.011 167.737 cv
170.015 167.744 170.085 167.737 170.128 167.753 cv
170.608 167.912 171.355 169.221 171.365 169.234 cv
171.66 169.345 172.047 169.449 172.513 169.543 cv
172.075 168.882 171.709 168.142 171.426 167.334 cv
170.76 167.67 169.912 165.911 170.18 165.17 cv
170.236 165.02 170.412 164.704 170.862 165.045 cv
170.523 164.262 170.615 163.086 171.436 163.088 cv
171.453 165.681 171.808 167.914 173.498 170.317 cv
f
179.046 170.845 mo
178.954 171.216 178.436 171.567 177.703 171.269 cv
178.044 171.722 177.748 172.112 177.145 172.003 cv
176.678 171.918 176.119 171.541 176.076 171.164 cv
175.496 171.12 174.967 171.064 174.496 170.999 cv
174.944 171.519 175.442 171.942 175.98 172.259 cv
176.046 172.232 176.145 172.238 176.464 172.352 cv
176.873 172.493 177.262 172.686 177.671 172.831 cv
177.584 172.818 li
177.275 172.77 177.199 172.754 177.027 172.72 cv
176.24 172.565 174.871 172.118 173.498 170.317 cv
175.153 170.57 176.767 170.683 179.063 170.697 cv
179.057 170.741 179.056 170.803 179.046 170.845 cv
f
179.145 151.6 mo
173.426 151.6 168.612 156.268 168.502 162.063 cv
168.506 162.074 li
168.51 162.092 168.563 162.198 168.788 162.339 cv
169.013 162.48 169.345 162.629 169.783 162.742 cv
170.325 162.883 170.894 162.995 171.425 163.086 cv
171.434 163.088 li
173.049 163.361 174.359 163.473 176.289 163.554 cv
177.196 163.591 178.109 163.625 179.008 163.622 cv
179.006 163.078 179.004 159.98 179.029 156.989 cv
179.031 156.602 179.037 156.198 179.042 155.793 cv
179.065 153.846 179.107 151.86 179.145 151.6 cv
0 .18 1 0 cmyk
f
184.254 171.646 mo
183.65 171.984 183.534 171.993 182.723 172.327 cv
182.498 172.42 182.287 172.475 182.055 172.539 cv
183.494 172.152 185.46 170.542 185.807 170.148 cv
185.631 170.536 185.5 170.795 185.076 171.136 cv
184.958 171.231 184.449 171.537 184.254 171.646 cv
0 0 0 1 cmyk
f
169.783 162.742 mo
169.338 162.634 169.013 162.48 168.788 162.339 cv
168.906 158.479 171.051 155.056 174.174 153.18 cv
173.436 153.835 173.107 154.226 172.734 155.112 cv
170.982 157.125 169.863 159.831 169.783 162.742 cv
f
174.184 153.174 mo
174.965 152.609 175.413 152.197 176.652 151.9 cv
177.521 151.692 178.283 151.603 179.145 151.6 cv
177.348 151.677 175.657 152.291 174.184 153.174 cv
f
173.614 163.382 mo
172.835 163.306 172.098 163.202 171.436 163.087 cv
171.479 161.154 171.882 159.3 172.583 157.657 cv
172.854 158.736 173.084 159.316 173.845 160.595 cv
173.708 161.496 173.628 162.432 173.614 163.382 cv
f
179.043 155.793 mo
179.03 156.968 179.021 158.177 179.019 159.108 cv
179.015 160.031 179.01 160.7 179.01 160.83 cv
177.962 159.729 177.399 159.11 176.633 158.137 cv
177.149 154.82 178.079 152.201 179.145 151.6 cv
179.106 151.915 179.065 153.798 179.043 155.793 cv
f
175.299 155.668 mo
174.628 157.079 174.129 158.774 173.851 160.594 cv
174.504 161.563 174.907 162.129 176.206 163.55 cv
176.22 161.643 176.375 159.793 176.634 158.129 cv
175.853 157.066 175.605 156.56 175.299 155.668 cv
f
189.423 162.37 mo
189.427 162.487 189.428 162.605 189.428 162.724 cv
189.435 166.495 187.595 169.632 184.711 171.368 cv
184.637 171.424 li
185.992 170.594 187.702 169.188 188.791 166.861 cv
189.957 164.568 189.83 162.031 189.83 162.031 cv
189.772 162.136 189.602 162.268 189.423 162.37 cv
f
176.827 152.154 mo
175.271 152.765 173.871 153.81 172.736 155.11 cv
172.427 156.081 172.427 156.622 172.583 157.657 cv
173.276 156.041 174.241 154.64 175.384 153.592 cv
175.737 152.982 175.956 152.618 176.827 152.154 cv
f
175.296 155.675 mo
175.103 154.803 175.087 154.359 175.38 153.601 cv
176.494 152.576 177.777 151.813 179.145 151.6 cv
177.647 152.001 176.292 153.57 175.296 155.675 cv
f
228.265 167.341 mo
227.827 167.341 227.542 167.36 227.083 167.305 cv
227.083 161.084 li
227.427 161.045 227.674 161.045 228.037 161.045 cv
230.972 161.045 231.775 162.411 231.775 164.175 cv
231.775 166.45 230.382 167.341 228.265 167.341 cv
cp
215.356 166.56 mo
216.969 162.168 li
218.638 166.56 li
215.356 166.56 li
cp
234.681 170.6 mo
233.186 169.106 li
232.301 168.219 231.737 167.69 231.03 167.135 cv
232.583 166.679 233.542 165.483 233.542 164.062 cv
233.542 162.126 231.981 160.678 228.457 160.678 cv
227.216 160.678 226.838 160.698 226.066 160.737 cv
225.292 160.771 224.133 160.848 223.679 160.848 cv
223.679 161.216 li
224.096 161.216 li
225.197 161.216 225.52 161.557 225.52 162.733 cv
225.52 170.706 li
225.52 171.97 225.12 172.271 224.001 172.271 cv
223.685 172.271 li
222.737 172.271 222.337 172.082 221.958 171.077 cv
217.993 160.572 li
216.341 160.572 li
216.513 160.988 li
213.059 170.396 li
212.453 172.043 212.244 172.253 211.011 172.271 cv
209.635 172.271 209.484 172.267 209.37 170.525 cv
208.763 161.926 li
208.724 161.28 209.085 161.262 210.015 161.186 cv
210.015 160.845 li
207.225 160.845 li
202.673 170.41 li
198.1 160.845 li
195.225 160.845 li
195.225 161.186 li
196.403 161.262 196.441 161.604 196.364 162.856 cv
195.91 170.239 li
195.815 171.968 195.644 172.271 194.258 172.271 cv
194.258 172.639 li
198.214 172.639 li
198.214 172.271 li
197.361 172.233 196.633 172.025 196.69 171.057 cv
197.208 162.515 li
197.246 162.515 li
202.084 172.639 li
202.52 172.639 li
207.244 162.515 li
207.283 162.515 li
207.832 171.019 li
207.908 172.025 207.036 172.271 206.145 172.271 cv
206.145 172.639 li
211.021 172.639 li
215.395 172.639 li
215.395 172.271 li
215.09 172.271 li
214.046 172.271 213.554 172.082 213.554 171.569 cv
213.554 171.305 213.8 170.735 213.933 170.377 cv
215.033 167.403 li
218.961 167.403 li
220.231 170.851 li
220.308 171.04 220.441 171.325 220.441 171.627 cv
220.441 172.158 220.042 172.271 218.961 172.271 cv
218.467 172.271 li
218.467 172.639 li
223.679 172.639 li
223.685 172.639 li
229.049 172.639 li
229.049 172.271 li
228.609 172.271 li
227.542 172.271 227.083 171.988 227.083 170.858 cv
227.083 167.671 li
227.389 167.69 227.636 167.709 228.057 167.709 cv
228.57 167.709 228.875 167.69 229.351 167.671 cv
229.81 167.973 230.478 168.522 231.317 169.35 cv
232.565 170.594 li
234.245 172.278 235.098 172.998 238.419 172.847 cv
238.419 172.506 li
236.958 172.412 235.801 171.713 234.681 170.6 cv
cp
0 0 0 0 cmyk
f
257.667 169.867 mo
256.472 171.525 256.13 171.962 255.01 171.962 cv
252.222 171.962 li
251.672 171.962 251.463 171.772 251.463 171.261 cv
251.463 162.523 li
251.463 161.349 251.785 161.217 253.02 161.217 cv
253.721 161.217 li
253.721 160.849 li
248.226 160.849 li
248.135 160.849 li
243.95 160.849 li
243.95 161.217 li
245.164 161.217 245.522 161.538 244.916 162.578 cv
242.247 167.123 li
239.203 162.446 li
238.631 161.576 238.725 161.217 240.216 161.217 cv
240.216 160.849 li
235.17 160.849 li
235.17 161.217 li
236.399 161.252 236.834 161.519 237.76 162.977 cv
241.155 168.239 li
241.155 170.908 li
241.155 171.836 240.809 172.271 239.623 172.271 cv
239.259 172.271 li
239.259 172.641 li
244.48 172.641 li
244.48 172.271 li
244.234 172.271 li
243.079 172.271 242.718 171.874 242.718 170.871 cv
242.718 168.03 li
245.862 162.711 li
246.393 161.82 246.941 161.31 248.226 161.217 cv
248.4 161.217 li
249.595 161.217 249.898 161.634 249.898 162.638 cv
249.898 171.021 li
249.898 171.988 249.576 172.271 248.704 172.271 cv
248.077 172.271 li
248.077 172.639 li
256.547 172.639 li
258.008 169.867 li
257.667 169.867 li
cp
f
294.644 170.737 mo
293.465 171.911 292.404 172.271 289.857 172.271 cv
288.357 172.271 288.3 172.007 288.3 171.231 cv
288.3 161.121 li
288.527 161.103 289.041 161.045 289.819 161.045 cv
292.479 161.045 293.828 161.708 294.703 162.579 cv
295.822 163.697 296.221 165.249 296.221 166.648 cv
296.221 168.6 295.348 170.056 294.644 170.737 cv
cp
261.914 166.56 mo
263.527 162.168 li
265.197 166.56 li
261.914 166.56 li
cp
290.769 160.678 mo
289.782 160.678 288.623 160.698 287.584 160.737 cv
286.545 160.773 285.616 160.809 284.915 160.848 cv
284.915 160.849 li
280.333 160.849 li
280.333 161.217 li
281.847 161.254 282.19 161.463 282.19 162.618 cv
282.19 170.162 li
273.268 160.849 li
270.294 160.849 li
270.294 161.217 li
270.957 161.234 271.452 161.386 271.888 161.689 cv
271.888 171.003 li
271.888 171.874 271.507 172.271 270.333 172.271 cv
270.243 172.271 li
269.294 172.271 268.896 172.082 268.517 171.077 cv
264.551 160.572 li
262.9 160.572 li
263.072 160.988 li
259.618 170.396 li
259.011 172.043 258.803 172.253 257.568 172.271 cv
257.568 172.639 li
261.952 172.639 li
261.952 172.271 li
261.649 172.271 li
260.606 172.271 260.112 172.082 260.112 171.569 cv
260.112 171.305 260.358 170.735 260.491 170.377 cv
261.591 167.403 li
265.519 167.403 li
266.791 170.851 li
266.866 171.04 266.999 171.325 266.999 171.627 cv
266.999 172.158 266.6 172.271 265.519 172.271 cv
265.026 172.271 li
265.026 172.639 li
274.65 172.639 li
274.65 172.271 li
273.04 172.271 272.738 171.988 272.738 170.625 cv
272.738 162.503 li
282.547 172.778 li
283.039 172.778 li
283.039 162.202 li
283.039 161.463 283.491 161.2 284.915 161.2 cv
285.294 161.186 li
286.413 161.186 286.736 161.489 286.736 162.723 cv
286.736 170.89 li
286.736 171.987 286.261 172.271 285.236 172.271 cv
284.915 172.271 li
284.915 172.639 li
290.979 172.639 li
295.784 172.639 297.989 169.205 297.989 166.348 cv
297.989 163.223 295.784 160.678 290.769 160.678 cv
cp
f
202.156 152.96 mo
202.156 153.129 li
201.542 153.139 201.324 153.386 201.324 153.972 cv
201.324 156.439 li
201.324 157.574 200.598 158.791 198.615 158.791 cv
196.87 158.791 195.971 157.794 195.971 156.484 cv
195.971 153.816 li
195.971 153.229 195.805 153.139 195.184 153.129 cv
195.184 152.96 li
197.537 152.96 li
197.537 153.129 li
197.456 153.129 li
196.951 153.129 196.732 153.266 196.732 153.797 cv
196.732 156.339 li
196.732 157.574 197.456 158.314 198.816 158.314 cv
199.849 158.314 200.902 157.886 200.902 156.33 cv
200.902 154.2 li
200.902 153.322 200.763 153.167 200.005 153.129 cv
200.005 152.96 li
202.156 152.96 li
cp
f
211.083 158.722 mo
206.356 153.753 li
206.356 157.688 li
206.356 158.346 206.501 158.484 207.277 158.484 cv
207.277 158.654 li
205.16 158.654 li
205.16 158.484 li
205.197 158.484 li
205.765 158.484 205.947 158.292 205.947 157.87 cv
205.947 153.358 li
205.737 153.213 205.499 153.139 205.179 153.129 cv
205.179 152.96 li
206.61 152.96 li
210.91 157.457 li
210.91 153.808 li
210.91 153.249 210.747 153.147 210.016 153.129 cv
210.016 152.96 li
212.151 152.96 li
212.151 153.129 li
211.466 153.129 211.319 153.249 211.319 153.606 cv
211.319 158.722 li
211.083 158.722 li
cp
f
218.06 158.654 mo
215.833 158.654 li
215.833 158.486 li
216.4 158.457 216.519 158.311 216.519 157.697 cv
216.519 153.791 li
216.519 153.295 216.346 153.158 215.833 153.129 cv
215.833 152.959 li
218.06 152.959 li
218.06 153.129 li
217.482 153.129 217.28 153.259 217.28 153.872 cv
217.28 157.761 li
217.28 158.3 217.428 158.486 218.06 158.486 cv
218.06 158.654 li
cp
f
224.195 158.791 mo
222.209 153.844 li
221.98 153.266 221.87 153.129 221.312 153.129 cv
221.312 152.96 li
223.828 152.96 li
223.828 153.129 li
222.986 153.147 222.786 153.341 222.96 153.761 cv
224.605 157.856 li
226.051 154.08 li
226.15 153.824 226.206 153.642 226.206 153.514 cv
226.206 153.24 225.977 153.129 225.357 153.129 cv
225.357 152.96 li
227.479 152.96 li
227.479 153.129 li
227.002 153.129 226.755 153.35 226.537 153.916 cv
224.649 158.791 li
224.195 158.791 li
cp
f
234.663 156.592 mo
234.493 156.592 li
234.419 155.939 234.244 155.867 233.868 155.867 cv
232.313 155.867 li
232.313 157.826 li
232.313 158.248 232.471 158.332 232.811 158.332 cv
234.226 158.332 li
234.863 158.332 235.056 158.084 235.285 157.29 cv
235.45 157.29 li
235.302 158.654 li
230.436 158.654 li
230.436 158.486 li
230.691 158.486 li
231.425 158.486 231.553 158.282 231.553 157.731 cv
231.553 153.865 li
231.553 153.35 231.434 153.129 230.822 153.129 cv
230.618 153.129 li
230.618 152.959 li
235.019 152.959 li
235.093 154.229 li
234.928 154.229 li
234.809 153.447 234.582 153.283 234.253 153.283 cv
232.313 153.283 li
232.313 155.543 li
233.959 155.543 li
234.289 155.543 234.445 155.387 234.493 154.853 cv
234.663 154.853 li
234.663 156.592 li
cp
f
241.344 156.087 mo
241.135 156.087 240.997 156.096 240.778 156.067 cv
240.778 153.063 li
240.943 153.044 241.063 153.044 241.235 153.044 cv
242.641 153.044 243.025 153.704 243.025 154.558 cv
243.025 155.656 242.358 156.087 241.344 156.087 cv
cp
244.438 157.661 mo
243.715 156.937 li
243.282 156.505 243.007 156.248 242.669 155.987 cv
243.42 155.768 243.889 155.188 243.889 154.502 cv
243.889 153.566 243.126 152.874 241.436 152.874 cv
240.842 152.874 240.658 152.884 240.282 152.902 cv
239.906 152.924 239.349 152.96 239.128 152.96 cv
239.128 153.129 li
239.33 153.129 li
239.861 153.129 240.016 153.294 240.016 153.862 cv
240.016 157.721 li
240.016 158.337 239.825 158.484 239.284 158.484 cv
239.128 158.484 li
239.128 158.654 li
241.719 158.654 li
241.719 158.484 li
241.509 158.484 li
240.997 158.484 240.778 158.346 240.778 157.795 cv
240.778 156.239 li
240.924 156.248 241.042 156.257 241.245 156.257 cv
241.491 156.257 241.637 156.248 241.865 156.239 cv
242.085 156.388 242.404 156.654 242.806 157.058 cv
243.412 157.666 li
244.228 158.478 244.639 158.828 246.242 158.754 cv
246.242 158.589 li
245.537 158.542 244.978 158.202 244.438 157.661 cv
cp
f
248.718 157.25 mo
248.908 158.063 249.545 158.537 250.256 158.537 cv
250.868 158.537 251.515 158.181 251.515 157.46 cv
251.515 156.146 248.591 155.744 248.591 154.147 cv
248.591 153.392 249.281 152.824 250.211 152.824 cv
250.977 152.824 251.132 153.054 251.451 153.054 cv
251.524 153.054 251.561 153.035 251.615 152.96 cv
251.76 152.96 li
251.913 154.12 li
251.76 154.12 li
251.505 153.463 250.922 153.044 250.293 153.044 cv
249.69 153.044 249.27 153.392 249.27 153.902 cv
249.27 155.198 252.194 155.545 252.194 157.223 cv
252.194 158.116 251.406 158.788 250.338 158.788 cv
249.836 158.788 249.198 158.537 249.072 158.537 cv
248.991 158.537 248.926 158.583 248.891 158.654 cv
248.735 158.654 li
248.545 157.25 li
248.718 157.25 li
cp
f
258.622 158.654 mo
256.396 158.654 li
256.396 158.486 li
256.962 158.457 257.081 158.311 257.081 157.697 cv
257.081 153.791 li
257.081 153.295 256.907 153.158 256.396 153.129 cv
256.396 152.959 li
258.622 152.959 li
258.622 153.129 li
258.045 153.129 257.843 153.259 257.843 153.872 cv
257.843 157.761 li
257.843 158.3 257.989 158.486 258.622 158.486 cv
258.622 158.654 li
cp
f
265.125 157.814 mo
265.125 158.31 265.291 158.484 265.848 158.484 cv
266.188 158.484 li
266.188 158.654 li
263.301 158.654 li
263.301 158.484 li
263.64 158.484 li
264.198 158.484 264.363 158.31 264.363 157.814 cv
264.363 153.281 li
262.77 153.281 li
262.405 153.281 262.239 153.494 262.102 154.302 cv
261.938 154.302 li
262.083 152.824 li
262.258 152.824 li
262.267 152.878 262.304 152.914 262.358 152.934 cv
262.415 152.95 262.478 152.96 262.541 152.96 cv
266.947 152.96 li
267.075 152.96 267.211 152.934 267.23 152.824 cv
267.403 152.824 li
267.551 154.302 li
267.386 154.302 li
267.249 153.494 267.084 153.281 266.718 153.281 cv
265.125 153.281 li
265.125 157.814 li
cp
f
275.13 153.79 mo
275.424 153.285 275.25 153.129 274.66 153.129 cv
274.66 152.96 li
276.73 152.96 li
276.73 153.129 li
276.109 153.176 275.844 153.423 275.588 153.854 cv
274.06 156.431 li
274.06 157.806 li
274.06 158.292 274.234 158.484 274.798 158.484 cv
274.917 158.484 li
274.917 158.654 li
272.405 158.654 li
272.405 158.484 li
272.576 158.484 li
273.137 158.484 273.298 158.274 273.298 157.824 cv
273.298 156.531 li
271.683 153.982 li
271.232 153.278 271.021 153.147 270.426 153.129 cv
270.426 152.96 li
272.855 152.96 li
272.855 153.129 li
272.151 153.129 272.105 153.304 272.376 153.726 cv
273.831 155.99 li
275.13 153.79 li
cp
f
287.28 158.57 mo
285.805 158.57 284.641 157.36 284.641 155.646 cv
284.641 154.547 285.283 153.044 286.894 153.044 cv
288.408 153.044 289.488 154.245 289.488 155.949 cv
289.488 157.25 288.774 158.57 287.28 158.57 cv
cp
287.132 152.824 mo
285.182 152.824 283.776 154.106 283.776 155.932 cv
283.776 157.645 285.292 158.79 287.087 158.79 cv
288.865 158.79 290.352 157.498 290.352 155.646 cv
290.352 153.997 288.865 152.824 287.132 152.824 cv
cp
f
296.54 156.463 mo
296.386 156.463 li
296.368 155.93 296.174 155.765 295.735 155.765 cv
294.038 155.765 li
294.038 157.777 li
294.038 158.291 294.148 158.484 294.838 158.484 cv
294.838 158.654 li
292.608 158.654 li
292.608 158.484 li
293.177 158.447 293.277 158.328 293.277 157.583 cv
293.277 153.992 li
293.277 153.405 293.232 153.139 292.591 153.129 cv
292.591 152.959 li
296.692 152.959 li
296.692 154.036 li
296.54 154.036 li
296.529 153.503 296.347 153.283 295.779 153.283 cv
294.038 153.283 li
294.038 155.441 li
295.855 155.441 li
296.194 155.441 296.358 155.248 296.386 154.853 cv
296.54 154.853 li
296.54 156.463 li
cp
f
68.9995 153.036 mo
69.2158 153 69.4146 153 69.6216 153 cv
70.8213 153 71.1011 153.694 71.1011 154.398 cv
71.1011 155.31 70.4697 155.978 69.4863 155.978 cv
69.3154 155.978 69.1162 155.933 68.9995 155.905 cv
68.9995 153.036 li
cp
69.7661 156.148 mo
71.1011 156.148 71.9492 155.48 71.9492 154.425 cv
71.9492 153.73 71.5161 152.828 69.6309 152.828 cv
69.3872 152.828 68.9546 152.837 68.5122 152.855 cv
68.0703 152.874 67.6284 152.901 67.3755 152.91 cv
67.3755 153.081 li
67.8267 153.081 li
68.1421 153.081 68.2505 153.226 68.2505 153.559 cv
68.2505 157.826 li
68.2505 158.25 68.1152 158.35 67.646 158.35 cv
67.52 158.35 li
67.52 158.521 li
70.0186 158.521 li
70.0186 158.35 li
69.7212 158.35 li
69.1528 158.35 68.9995 158.16 68.9995 157.655 cv
68.9995 156.076 li
69.27 156.131 69.4956 156.148 69.7661 156.148 cv
cp
f
77.0098 155.995 mo
76.8018 155.995 76.6665 156.004 76.4502 155.978 cv
76.4502 153.018 li
76.6123 153 76.73 153 76.9009 153 cv
78.2905 153 78.6694 153.649 78.6694 154.489 cv
78.6694 155.571 78.0107 155.995 77.0098 155.995 cv
cp
80.0586 157.547 mo
79.3462 156.834 li
78.9219 156.41 78.6514 156.157 78.3174 155.896 cv
79.0571 155.679 79.5176 155.111 79.5176 154.435 cv
79.5176 153.514 78.7686 152.828 77.0996 152.828 cv
76.5132 152.828 76.3325 152.837 75.9629 152.855 cv
75.5933 152.874 75.043 152.91 74.8262 152.91 cv
74.8262 153.081 li
75.0249 153.081 li
75.5479 153.081 75.7012 153.244 75.7012 153.803 cv
75.7012 157.601 li
75.7012 158.205 75.5117 158.35 74.9795 158.35 cv
74.8262 158.35 li
74.8262 158.521 li
77.3794 158.521 li
77.3794 158.35 li
77.1719 158.35 li
76.6665 158.35 76.4502 158.214 76.4502 157.673 cv
76.4502 156.148 li
76.5942 156.157 76.7119 156.167 76.9102 156.167 cv
77.1538 156.167 77.2983 156.157 77.5234 156.148 cv
77.7402 156.293 78.0557 156.555 78.4531 156.951 cv
79.0479 157.547 li
79.8511 158.35 80.2568 158.692 81.8354 158.621 cv
81.8354 158.458 li
81.1411 158.412 80.5908 158.078 80.0586 157.547 cv
cp
f
87.293 158.44 mo
85.8408 158.44 84.6948 157.249 84.6948 155.562 cv
84.6948 154.48 85.3262 153 86.9136 153 cv
88.4023 153 89.4668 154.182 89.4668 155.859 cv
89.4668 157.141 88.7632 158.44 87.293 158.44 cv
cp
87.1484 152.774 mo
85.2271 152.774 83.8467 154.047 83.8467 155.842 cv
83.8467 157.528 85.3354 158.665 87.1035 158.665 cv
88.8535 158.665 90.3149 157.385 90.3149 155.562 cv
90.3149 153.938 88.8535 152.774 87.1484 152.774 cv
cp
f
99.0015 158.098 mo
98.1089 158.557 96.9629 158.665 96.584 158.665 cv
94.6084 158.665 93.688 157.141 93.688 155.823 cv
93.688 154.47 94.6353 152.774 96.8364 152.774 cv
97.8018 152.774 98.4419 153.081 98.6313 153.081 cv
98.7129 153.081 98.7852 153.063 98.8394 153.018 cv
98.9653 153.018 li
98.9653 154.48 li
98.7852 154.48 li
98.5415 153.352 97.7749 153 96.9355 153 cv
95.3481 153 94.5361 154.317 94.5361 155.77 cv
94.5361 157.619 95.835 158.44 96.8726 158.44 cv
97.2876 158.44 97.748 158.35 98.2529 158.098 cv
98.2529 156.96 li
98.2529 156.445 98.0723 156.275 97.5313 156.275 cv
97.1973 156.275 li
97.1973 156.112 li
99.6328 156.112 li
99.6328 156.275 li
99.1821 156.302 99.0015 156.456 99.0015 156.844 cv
99.0015 158.098 li
cp
f
104.585 155.995 mo
104.377 155.995 104.242 156.004 104.026 155.978 cv
104.026 153.018 li
104.188 153 104.305 153 104.477 153 cv
105.866 153 106.245 153.649 106.245 154.489 cv
106.245 155.571 105.586 155.995 104.585 155.995 cv
cp
107.634 157.547 mo
106.921 156.834 li
106.497 156.41 106.227 156.157 105.893 155.896 cv
106.633 155.679 107.093 155.111 107.093 154.435 cv
107.093 153.514 106.344 152.828 104.675 152.828 cv
104.088 152.828 103.909 152.837 103.538 152.855 cv
103.168 152.874 102.618 152.91 102.402 152.91 cv
102.402 153.081 li
102.6 153.081 li
103.124 153.081 103.277 153.244 103.277 153.803 cv
103.277 157.601 li
103.277 158.205 103.088 158.35 102.555 158.35 cv
102.402 158.35 li
102.402 158.521 li
104.955 158.521 li
104.955 158.35 li
104.748 158.35 li
104.242 158.35 104.026 158.214 104.026 157.673 cv
104.026 156.148 li
104.17 156.157 104.287 156.167 104.486 156.167 cv
104.729 156.167 104.874 156.157 105.099 156.148 cv
105.315 156.293 105.631 156.555 106.028 156.951 cv
106.624 157.547 li
107.427 158.35 107.833 158.692 109.411 158.621 cv
109.411 158.458 li
108.717 158.412 108.167 158.078 107.634 157.547 cv
cp
f
113.948 155.635 mo
114.715 153.532 li
115.509 155.635 li
113.948 155.635 li
cp
117.087 157.781 mo
115.202 152.774 li
114.417 152.774 li
114.498 152.973 li
112.856 157.456 li
112.568 158.242 112.469 158.341 111.882 158.35 cv
111.882 158.521 li
113.966 158.521 li
113.966 158.35 li
113.822 158.35 li
113.326 158.35 113.091 158.26 113.091 158.016 cv
113.091 157.89 113.208 157.619 113.271 157.447 cv
113.795 156.031 li
115.662 156.031 li
116.267 157.673 li
116.302 157.764 116.366 157.899 116.366 158.043 cv
116.366 158.296 116.176 158.35 115.662 158.35 cv
115.428 158.35 li
115.428 158.521 li
117.908 158.521 li
117.908 158.35 li
117.457 158.35 117.268 158.26 117.087 157.781 cv
cp
f
124.168 158.521 mo
121.868 153.713 li
121.85 153.713 li
121.606 157.772 li
121.579 158.232 121.922 158.332 122.328 158.35 cv
122.328 158.521 li
120.452 158.521 li
120.452 158.35 li
121.11 158.35 121.191 158.205 121.236 157.385 cv
121.453 153.875 li
121.489 153.28 121.471 153.117 120.912 153.081 cv
120.912 152.919 li
122.274 152.919 li
124.448 157.466 li
126.613 152.919 li
127.939 152.919 li
127.939 153.081 li
127.497 153.117 127.326 153.126 127.344 153.434 cv
127.632 157.52 li
127.687 158.35 127.759 158.35 128.417 158.35 cv
128.417 158.521 li
126.099 158.521 li
126.099 158.35 li
126.523 158.35 126.938 158.232 126.902 157.755 cv
126.64 153.713 li
126.622 153.713 li
124.376 158.521 li
124.168 158.521 li
cp
f
134.821 158.521 mo
132.521 153.713 li
132.503 153.713 li
132.259 157.772 li
132.232 158.232 132.575 158.332 132.981 158.35 cv
132.981 158.521 li
131.104 158.521 li
131.104 158.35 li
131.763 158.35 131.844 158.205 131.889 157.385 cv
132.106 153.875 li
132.142 153.28 132.124 153.117 131.565 153.081 cv
131.565 152.919 li
132.927 152.919 li
135.101 157.466 li
137.266 152.919 li
138.592 152.919 li
138.592 153.081 li
138.15 153.117 137.979 153.126 137.997 153.434 cv
138.286 157.52 li
138.339 158.35 138.412 158.35 139.07 158.35 cv
139.07 158.521 li
136.752 158.521 li
136.752 158.35 li
137.176 158.35 137.591 158.232 137.555 157.755 cv
137.293 153.713 li
137.275 153.713 li
135.029 158.521 li
134.821 158.521 li
cp
f
144.239 158.521 mo
142.046 158.521 li
142.046 158.35 li
142.606 158.322 142.723 158.178 142.723 157.574 cv
142.723 153.73 li
142.723 153.244 142.552 153.108 142.046 153.081 cv
142.046 152.91 li
144.239 152.91 li
144.239 153.081 li
143.67 153.081 143.472 153.207 143.472 153.813 cv
143.472 157.637 li
143.472 158.169 143.616 158.35 144.239 158.35 cv
144.239 158.521 li
cp
f
153.151 158.584 mo
148.479 153.694 li
148.479 157.565 li
148.479 158.214 148.623 158.35 149.389 158.35 cv
149.389 158.521 li
147.296 158.521 li
147.296 158.35 li
147.332 158.35 li
147.892 158.35 148.072 158.16 148.072 157.745 cv
148.072 153.307 li
147.865 153.162 147.63 153.091 147.314 153.081 cv
147.314 152.91 li
148.73 152.91 li
152.98 157.339 li
152.98 153.748 li
152.98 153.198 152.817 153.1 152.095 153.081 cv
152.095 152.91 li
154.207 152.91 li
154.207 153.081 li
153.53 153.081 153.386 153.198 153.386 153.55 cv
153.386 158.584 li
153.151 158.584 li
cp
f
162.568 158.098 mo
161.675 158.557 160.53 158.665 160.151 158.665 cv
158.175 158.665 157.255 157.141 157.255 155.823 cv
157.255 154.47 158.202 152.774 160.403 152.774 cv
161.369 152.774 162.009 153.081 162.199 153.081 cv
162.28 153.081 162.352 153.063 162.406 153.018 cv
162.532 153.018 li
162.532 154.48 li
162.352 154.48 li
162.108 153.352 161.341 153 160.502 153 cv
158.915 153 158.103 154.317 158.103 155.77 cv
158.103 157.619 159.402 158.44 160.439 158.44 cv
160.854 158.44 161.314 158.35 161.82 158.098 cv
161.82 156.96 li
161.82 156.445 161.639 156.275 161.098 156.275 cv
160.764 156.275 li
160.764 156.112 li
163.2 156.112 li
163.2 156.275 li
162.749 156.302 162.568 156.456 162.568 156.844 cv
162.568 158.098 li
cp
f
80.0767 166.305 mo
81.6748 161.924 li
83.3296 166.305 li
80.0767 166.305 li
cp
97.1143 160.626 mo
97.1143 160.983 li
98.6187 161.021 98.957 161.229 98.957 162.375 cv
98.957 169.859 li
90.0996 160.626 li
87.1475 160.626 li
87.1475 160.983 li
87.8062 161.002 88.2949 161.152 88.7275 161.453 cv
88.7275 170.705 li
88.7275 171.411 88.4761 171.805 87.749 171.925 cv
87.2065 171.83 86.9072 171.541 86.6206 170.78 cv
82.6904 160.344 li
81.0547 160.344 li
81.2236 160.758 li
77.8013 170.104 li
77.2729 171.54 77.0488 171.875 76.1743 171.947 cv
77.4248 169.577 li
77.0864 169.577 li
75.9014 171.213 75.563 171.646 74.4536 171.646 cv
71.6895 171.646 li
71.144 171.646 70.937 171.457 70.937 170.95 cv
70.937 162.281 li
70.937 161.115 71.2568 160.983 72.4795 160.983 cv
73.1748 160.983 li
73.1748 160.626 li
67.6279 160.626 li
67.6279 160.983 li
67.8906 160.983 li
69.0757 160.983 69.3765 161.396 69.3765 162.395 cv
69.3765 170.724 li
69.3765 171.684 69.0566 171.966 68.1914 171.966 cv
67.5713 171.966 li
67.5713 172.322 li
75.7705 172.322 li
75.9771 172.322 li
80.1143 172.322 li
80.1143 171.966 li
79.813 171.966 li
78.7793 171.966 78.29 171.777 78.29 171.27 cv
78.29 171.007 78.5347 170.442 78.666 170.085 cv
79.7573 167.133 li
83.6489 167.133 li
84.9092 170.556 li
84.9849 170.743 85.1162 171.024 85.1162 171.326 cv
85.1162 171.853 84.7212 171.966 83.6489 171.966 cv
83.1602 171.966 li
83.1602 172.322 li
87.1099 172.322 li
88.332 172.322 li
91.4727 172.322 li
91.4727 171.966 li
89.874 171.966 89.5732 171.684 89.5732 170.329 cv
89.5732 162.263 li
99.314 172.454 li
99.8027 172.454 li
99.8027 161.962 li
99.8027 161.229 100.104 160.983 101.514 160.983 cv
101.514 160.626 li
97.1143 160.626 li
cp
f
112.102 171.438 mo
110.24 172.398 107.852 172.623 107.063 172.623 cv
102.944 172.623 101.026 169.445 101.026 166.7 cv
101.026 163.88 103 160.344 107.589 160.344 cv
109.601 160.344 110.936 160.983 111.331 160.983 cv
111.5 160.983 111.65 160.946 111.764 160.853 cv
112.026 160.853 li
112.026 163.898 li
111.65 163.898 li
111.143 161.548 109.544 160.814 107.795 160.814 cv
104.486 160.814 102.794 163.56 102.794 166.587 cv
102.794 170.442 105.501 172.153 107.664 172.153 cv
108.529 172.153 109.488 171.966 110.541 171.438 cv
110.541 169.069 li
110.541 167.998 110.165 167.641 109.037 167.641 cv
108.341 167.641 li
108.341 167.303 li
113.418 167.303 li
113.418 167.641 li
112.478 167.696 112.102 168.017 112.102 168.824 cv
112.102 171.438 li
cp
f
126.657 160.626 mo
126.657 160.983 li
125.397 161.002 124.946 161.51 124.946 162.714 cv
124.946 167.791 li
124.946 170.123 123.46 172.623 119.38 172.623 cv
115.789 172.623 113.946 170.574 113.946 167.885 cv
113.946 162.395 li
113.946 161.19 113.607 161.002 112.328 160.983 cv
112.328 160.626 li
117.161 160.626 li
117.161 160.983 li
116.992 160.983 li
115.958 160.983 115.506 161.266 115.506 162.356 cv
115.506 167.584 li
115.506 170.123 116.992 171.646 119.793 171.646 cv
121.918 171.646 124.081 170.762 124.081 167.565 cv
124.081 163.184 li
124.081 161.378 123.799 161.059 122.238 160.983 cv
122.238 160.626 li
126.657 160.626 li
cp
f
128.163 166.305 mo
129.761 161.924 li
131.416 166.305 li
128.163 166.305 li
cp
134.707 170.78 mo
130.776 160.344 li
129.141 160.344 li
129.31 160.758 li
125.887 170.104 li
125.286 171.74 125.079 171.946 123.856 171.966 cv
123.856 172.322 li
128.2 172.322 li
128.2 171.966 li
127.899 171.966 li
126.865 171.966 126.376 171.777 126.376 171.27 cv
126.376 171.007 126.621 170.442 126.752 170.085 cv
127.843 167.133 li
131.735 167.133 li
132.996 170.556 li
133.07 170.743 133.202 171.024 133.202 171.326 cv
133.202 171.853 132.808 171.966 131.735 171.966 cv
131.247 171.966 li
131.247 172.322 li
136.418 172.322 li
136.418 171.966 li
135.478 171.966 135.083 171.777 134.707 170.78 cv
cp
f
146.028 171.438 mo
144.166 172.398 141.778 172.623 140.988 172.623 cv
136.87 172.623 134.952 169.445 134.952 166.7 cv
134.952 163.88 136.926 160.344 141.515 160.344 cv
143.527 160.344 144.862 160.983 145.257 160.983 cv
145.426 160.983 145.576 160.946 145.689 160.853 cv
145.953 160.853 li
145.953 163.898 li
145.576 163.898 li
145.069 161.548 143.47 160.814 141.721 160.814 cv
138.412 160.814 136.719 163.56 136.719 166.587 cv
136.719 170.442 139.427 172.153 141.59 172.153 cv
142.455 172.153 143.414 171.966 144.467 171.438 cv
144.467 169.069 li
144.467 167.998 144.091 167.641 142.962 167.641 cv
142.267 167.641 li
142.267 167.303 li
147.344 167.303 li
147.344 167.641 li
146.404 167.696 146.028 168.017 146.028 168.824 cv
146.028 171.438 li
cp
f
157.537 162.563 mo
157.537 161.51 158.402 160.796 159.643 160.796 cv
160.94 160.796 162.145 161.661 162.671 163.015 cv
162.99 163.015 li
162.671 160.626 li
162.37 160.626 li
162.257 160.776 162.182 160.814 162.032 160.814 cv
161.374 160.814 161.053 160.344 159.474 160.344 cv
157.556 160.344 156.127 161.51 156.127 163.071 cv
156.127 166.361 162.163 167.189 162.163 169.897 cv
162.163 171.382 160.828 172.116 159.568 172.116 cv
158.101 172.116 156.785 171.138 156.39 169.465 cv
156.033 169.465 li
156.041 169.521 li
155.919 169.521 li
155.449 171.138 155.055 171.646 153.738 171.646 cv
150.842 171.646 li
150.146 171.646 149.827 171.477 149.827 170.611 cv
149.827 166.605 li
153.004 166.605 li
153.775 166.605 154.133 166.757 154.284 168.091 cv
154.641 168.091 li
154.641 164.519 li
154.284 164.519 li
154.189 165.609 153.87 165.929 153.192 165.929 cv
149.827 165.929 li
149.827 161.303 li
153.794 161.303 li
154.472 161.303 154.941 161.642 155.186 163.239 cv
155.524 163.239 li
155.374 160.626 li
146.348 160.626 li
146.348 160.983 li
146.762 160.983 li
148.021 160.983 148.266 161.435 148.266 162.487 cv
148.266 170.423 li
148.266 171.552 148.002 171.966 146.498 171.966 cv
145.972 171.966 li
145.972 172.322 li
155.957 172.322 li
156.163 170.406 li
156.428 172.322 li
156.748 172.322 li
156.823 172.21 156.954 172.116 157.124 172.116 cv
157.387 172.116 158.703 172.623 159.737 172.623 cv
161.938 172.623 163.573 171.251 163.573 169.408 cv
163.573 165.948 157.537 165.233 157.537 162.563 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
%ADOBeginPageMarks
1.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
false sop
/3 
<<
/Name (All)
/7 
[/DeviceCMYK] /CSA add_res
/CSA /7 get_csa_by_name
/MappedCSA /7 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /3 /CSD get_res sepcs
0 sep
@
.25 lw
30 36 mo
3 36 li
330 36 mo
357 36 li
30 180 mo
3 180 li
330 180 mo
357 180 li
36 30 mo
36 3 li
36 186 mo
36 213 li
324 30 mo
324 3 li
324 186 mo
324 213 li
1 /3 /CSD get_res sepcs
1 sep
@
true sop
.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPS+Courier /Courier findfont ct_VMDictPut/RJHRPS+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 18{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c 5{/.notdef}rp /i /.notdef /k /l 3{/.notdef}rp /p 7{/.notdef}rp /x 40{/.notdef}rp /degree 94{/.notdef}rp]RJHRPS+Courier nfRJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp.3996 lw
@
1 0 0 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 .05 0 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 1 0 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 .05 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 1 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh0 0 0 .05 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM) false chp@
0 0 0 1 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 14.5 mo(black_2x4.ai   1   60.00 lpi   45.00\241  2/6/14   5:21 PM)sh.05 0 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPS+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s 4{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPS+Courier nfRJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan) false chp@
1 0 0 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf74 21.5 mo(Process Cyan)sh0 .05 0 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPS+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 14{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPS+Courier nfRJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta) false chp@
0 1 0 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf117.207 21.5 mo(Process Magenta)sh0 0 .05 0 nzopmsc
%%IncludeResource: font Courier
/RJHRPS+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 8{/.notdef}rp /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPS+Courier nfRJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow) false chp@
0 0 1 0 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf171.216 21.5 mo(Process Yellow)sh0 0 0 .05 nzopmsc
%%IncludeResource: font Courier
/RJHRPS+Courier*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six 3{/.notdef}rp /colon 7{/.notdef}rp /B /C 9{/.notdef}rp /M 2{/.notdef}rp /P 8{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /b /c /.notdef /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t 2{/.notdef}rp /w /x /y 39{/.notdef}rp /degree 94{/.notdef}rp]RJHRPS+Courier nfRJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black) false chp@
0 0 0 1 nzopmsc
RJHRPS+Courier*1 [6 0 0 -6 0 0 ]msf221.624 21.5 mo(Process Black)sh%ADOEndPageMarks
pgrs
%%PageTrailer
[
[/CSA [/6 /7 ]]
[/CSD [/3 ]]
] del_res
/RJHRPS+Courier*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
Adobe_AGM_OnHost_Seps/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
Adobe_AGM_OnHost_Seps/dt get exec
%%Pages: 4
%%DocumentNeededResources: font Courier
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_OnHost_Seps 1.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
